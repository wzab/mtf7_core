// Copyright 1986-2014 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2014.3 (lin64) Build 1034051 Fri Oct  3 16:31:15 MDT 2014
// Date        : Tue Nov  4 13:28:10 2014
// Host        : adrian-lap running 64-bit Debian GNU/Linux testing (jessie)
// Command     : write_verilog -force -mode funcsim
//               /home/adrian/praca/elka/CMS/firmware/MTF7_core_vivado/MTF7_core_vivado.srcs/sources_1/ip/control_to_core_slave_axi/control_to_core_slave_axi_funcsim.v
// Design      : control_to_core_slave_axi
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7vx690tffg1927-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* X_CORE_INFO = "axi_chip2chip_v4_2,Vivado 2014.3" *) (* CHECK_LICENSE_TYPE = "control_to_core_slave_axi,axi_chip2chip_v4_2,{}" *) (* CORE_GENERATION_INFO = "control_to_core_slave_axi,axi_chip2chip_v4_2,{x_ipProduct=Vivado 2014.3,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=axi_chip2chip,x_ipVersion=4.2,x_ipCoreRevision=2,x_ipLanguage=VHDL,C_FAMILY=virtex7,C_INSTANCE=axi_c2c,C_SIMULATION=0,C_MASTER_FPGA=0,C_AXI_BUS_TYPE=0,C_COMMON_CLK=0,C_INTERFACE_TYPE=1,C_INTERFACE_MODE=2,C_NUM_OF_IO=20,C_SELECTIO_PHY_CLK=400,C_INCLUDE_AXILITE=0,C_AXI_DATA_WIDTH=32,C_AXI_ID_WIDTH=1,C_AXI_WUSER_WIDTH=1,C_DISABLE_DESKEW=0,C_DISABLE_CLK_SHIFT=0,C_USE_DIFF_CLK=0,C_USE_DIFF_IO=0,C_AURORA_WIDTH=64,C_ECC_ENABLE=1,C_AXI_STB_WIDTH=4,C_AXI_ADDR_WIDTH=32,C_AXI_LEN_WIDTH=8,C_AXI_SIZE_WIDTH=3,C_AXI_BRST_WIDTH=2,C_AXI_RESP_WIDTH=2,C_INTERRUPT_WIDTH=4,C_AXI_LITE_ADDR_WIDTH=32,C_AXI_LITE_PROT_WIDTH=2,C_AXI_LITE_DATA_WIDTH=32,C_AXI_LITE_STB_WIDTH=4,C_AXI_LITE_RESP_WIDTH=2}" *) 
(* DowngradeIPIdentifiedWarnings = "yes" *) 
(* NotValidForBitStream *)
module control_to_core_slave_axi
   (m_aclk,
    m_aresetn,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wuser,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready,
    axi_c2c_s2m_intr_in,
    axi_c2c_m2s_intr_out,
    idelay_ref_clk,
    axi_c2c_selio_tx_clk_out,
    axi_c2c_selio_tx_data_out,
    axi_c2c_selio_rx_clk_in,
    axi_c2c_selio_rx_data_in,
    axi_c2c_link_status_out,
    axi_c2c_multi_bit_error_out);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 m_aclk CLK" *) input m_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 m_aresetn RST" *) input m_aresetn;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi AWVALID" *) output m_axi_awvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi AWREADY" *) input m_axi_awready;
  output [0:0]m_axi_wuser;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi WLAST" *) output m_axi_wlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi WVALID" *) output m_axi_wvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi WREADY" *) input m_axi_wready;
  input [1:0]m_axi_bresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi BVALID" *) input m_axi_bvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi BREADY" *) output m_axi_bready;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi ARVALID" *) output m_axi_arvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi ARREADY" *) input m_axi_arready;
  input [31:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi RLAST" *) input m_axi_rlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi RVALID" *) input m_axi_rvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi RREADY" *) output m_axi_rready;
  input [3:0]axi_c2c_s2m_intr_in;
  output [3:0]axi_c2c_m2s_intr_out;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 idelay_ref_clk CLK" *) input idelay_ref_clk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 axi_c2c_selio_tx_clk_out CLK" *) output axi_c2c_selio_tx_clk_out;
  output [8:0]axi_c2c_selio_tx_data_out;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 axi_c2c_selio_rx_clk_in CLK" *) input axi_c2c_selio_rx_clk_in;
  input [8:0]axi_c2c_selio_rx_data_in;
  output axi_c2c_link_status_out;
  output axi_c2c_multi_bit_error_out;

  wire axi_c2c_link_status_out;
  wire [3:0]axi_c2c_m2s_intr_out;
  wire axi_c2c_multi_bit_error_out;
  wire [3:0]axi_c2c_s2m_intr_in;
(* IBUF_LOW_PWR *)   wire axi_c2c_selio_rx_clk_in;
(* IBUF_LOW_PWR *)   wire [8:0]axi_c2c_selio_rx_data_in;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire axi_c2c_selio_tx_clk_out;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire [8:0]axi_c2c_selio_tx_data_out;
  wire idelay_ref_clk;
  wire m_aclk;
  wire m_aresetn;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [7:0]m_axi_arlen;
  wire m_axi_arready;
  wire [2:0]m_axi_arsize;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [7:0]m_axi_awlen;
  wire m_axi_awready;
  wire [2:0]m_axi_awsize;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire [0:0]m_axi_wuser;
  wire m_axi_wvalid;
  wire NLW_inst_aurora_do_cc_UNCONNECTED;
  wire NLW_inst_aurora_pma_init_out_UNCONNECTED;
  wire NLW_inst_aurora_reset_pb_UNCONNECTED;
  wire NLW_inst_axi_c2c_aurora_tx_tvalid_UNCONNECTED;
  wire NLW_inst_axi_c2c_config_error_out_UNCONNECTED;
  wire NLW_inst_axi_c2c_link_error_out_UNCONNECTED;
  wire NLW_inst_axi_c2c_selio_tx_diff_clk_out_n_UNCONNECTED;
  wire NLW_inst_axi_c2c_selio_tx_diff_clk_out_p_UNCONNECTED;
  wire NLW_inst_m_aclk_out_UNCONNECTED;
  wire NLW_inst_m_axi_lite_arvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_awvalid_UNCONNECTED;
  wire NLW_inst_m_axi_lite_bready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_rready_UNCONNECTED;
  wire NLW_inst_m_axi_lite_wvalid_UNCONNECTED;
  wire NLW_inst_s_axi_arready_UNCONNECTED;
  wire NLW_inst_s_axi_awready_UNCONNECTED;
  wire NLW_inst_s_axi_bvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_arready_UNCONNECTED;
  wire NLW_inst_s_axi_lite_awready_UNCONNECTED;
  wire NLW_inst_s_axi_lite_bvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_rvalid_UNCONNECTED;
  wire NLW_inst_s_axi_lite_wready_UNCONNECTED;
  wire NLW_inst_s_axi_rlast_UNCONNECTED;
  wire NLW_inst_s_axi_rvalid_UNCONNECTED;
  wire NLW_inst_s_axi_wready_UNCONNECTED;
  wire [63:0]NLW_inst_axi_c2c_aurora_tx_tdata_UNCONNECTED;
  wire [3:0]NLW_inst_axi_c2c_s2m_intr_out_UNCONNECTED;
  wire [8:0]NLW_inst_axi_c2c_selio_tx_diff_data_out_n_UNCONNECTED;
  wire [8:0]NLW_inst_axi_c2c_selio_tx_diff_data_out_p_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_arid_UNCONNECTED;
  wire [0:0]NLW_inst_m_axi_awid_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_araddr_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_arprot_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_awaddr_UNCONNECTED;
  wire [1:0]NLW_inst_m_axi_lite_awprot_UNCONNECTED;
  wire [31:0]NLW_inst_m_axi_lite_wdata_UNCONNECTED;
  wire [3:0]NLW_inst_m_axi_lite_wstrb_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_bresp_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_lite_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_lite_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_lite_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_inst_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_inst_s_axi_rresp_UNCONNECTED;

(* ADDR_MUX_RATIO = "4" *) 
   (* AFIFO_DATA_SIZE = "45" *) 
   (* AFIFO_DATA_SIZE_M2 = "1" *) 
   (* AFIFO_DATA_SIZE_M3 = "0" *) 
   (* AFIFO_DATA_SIZE_M4 = "1" *) 
   (* AFIFO_TIE_WIDTH = "4" *) 
   (* AFIFO_WIDTH = "48" *) 
   (* AWB_FC_WIDTH = "2" *) 
   (* AXILITE_WIDTH = "20" *) 
   (* BFIFO_DATA_SIZE = "3" *) 
   (* BFIFO_WIDTH = "3" *) 
   (* C_AURORA_WIDTH = "64" *) 
   (* C_AXI_ADDR_WIDTH = "32" *) 
   (* C_AXI_BRST_WIDTH = "2" *) 
   (* C_AXI_BUS_TYPE = "0" *) 
   (* C_AXI_DATA_WIDTH = "32" *) 
   (* C_AXI_ID_WIDTH = "1" *) 
   (* C_AXI_LEN_WIDTH = "8" *) 
   (* C_AXI_LITE_ADDR_WIDTH = "32" *) 
   (* C_AXI_LITE_DATA_WIDTH = "32" *) 
   (* C_AXI_LITE_PROT_WIDTH = "2" *) 
   (* C_AXI_LITE_RESP_WIDTH = "2" *) 
   (* C_AXI_LITE_STB_WIDTH = "4" *) 
   (* C_AXI_RESP_WIDTH = "2" *) 
   (* C_AXI_SIZE_WIDTH = "3" *) 
   (* C_AXI_SIZE_WIDTH_INTERNAL = "2" *) 
   (* C_AXI_STB_WIDTH = "4" *) 
   (* C_AXI_WUSER_WIDTH = "1" *) 
   (* C_COMMON_CLK = "0" *) 
   (* C_DISABLE_CLK_SHIFT = "0" *) 
   (* C_DISABLE_DESKEW = "0" *) 
   (* C_ECC_ENABLE = "1" *) 
   (* C_FAMILY = "virtex7" *) 
   (* C_INCLUDE_AXILITE = "0" *) 
   (* C_INSTANCE = "axi_c2c" *) 
   (* C_INTERFACE_MODE = "2" *) 
   (* C_INTERFACE_TYPE = "1" *) 
   (* C_INTERRUPT_WIDTH = "4" *) 
   (* C_MASTER_FPGA = "0" *) 
   (* C_NUM_OF_IO = "20" *) 
   (* C_PHY_SELECT = "0" *) 
   (* C_SELECTIO_DDR = "1" *) 
   (* C_SELECTIO_PHY_CLK = "400" *) 
   (* C_SELECTIO_WIDTH = "9" *) 
   (* C_SIMULATION = "0" *) 
   (* C_SYNC_STAGE = "6" *) 
   (* C_USE_DIFF_CLK = "0" *) 
   (* C_USE_DIFF_IO = "0" *) 
   (* C_WIDTH_CONVERSION = "4" *) 
   (* DATA_MUX_RATIO = "4" *) 
   (* DowngradeIPIdentifiedWarnings = "yes" *) 
   (* PHY_CTRL_WIDTH = "3" *) 
   (* PHY_DATA_WIDTH = "18" *) 
   (* RB_FC_WIDTH = "3" *) 
   (* RFIFO_DATA_SIZE = "36" *) 
   (* RFIFO_DATA_SIZE_M2 = "0" *) 
   (* RFIFO_DATA_SIZE_M3 = "0" *) 
   (* RFIFO_DATA_SIZE_M4 = "0" *) 
   (* RFIFO_TIE_WIDTH = "1" *) 
   (* RFIFO_WIDTH = "36" *) 
   (* TDM_ID_WIDTH = "2" *) 
   (* TDM_VAL_BITS = "1" *) 
   (* WFIFO_DATA_SIZE = "38" *) 
   (* WFIFO_DATA_SIZE_M2 = "0" *) 
   (* WFIFO_DATA_SIZE_M3 = "2" *) 
   (* WFIFO_DATA_SIZE_M4 = "2" *) 
   (* WFIFO_TIE_WIDTH = "3" *) 
   (* WFIFO_WIDTH = "40" *) 
   (* X_INTERFACE_INFO = "xilinx.com:interface:aximm:1.0 m_axi AWADDR" *) 
   control_to_core_slave_axi_axi_chip2chip_v4_2 inst
       (.aurora_do_cc(NLW_inst_aurora_do_cc_UNCONNECTED),
        .aurora_init_clk(1'b0),
        .aurora_mmcm_not_locked(1'b0),
        .aurora_pma_init_in(1'b0),
        .aurora_pma_init_out(NLW_inst_aurora_pma_init_out_UNCONNECTED),
        .aurora_reset_pb(NLW_inst_aurora_reset_pb_UNCONNECTED),
        .axi_c2c_aurora_channel_up(1'b0),
        .axi_c2c_aurora_rx_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_c2c_aurora_rx_tvalid(1'b0),
        .axi_c2c_aurora_tx_tdata(NLW_inst_axi_c2c_aurora_tx_tdata_UNCONNECTED[63:0]),
        .axi_c2c_aurora_tx_tready(1'b0),
        .axi_c2c_aurora_tx_tvalid(NLW_inst_axi_c2c_aurora_tx_tvalid_UNCONNECTED),
        .axi_c2c_config_error_out(NLW_inst_axi_c2c_config_error_out_UNCONNECTED),
        .axi_c2c_link_error_out(NLW_inst_axi_c2c_link_error_out_UNCONNECTED),
        .axi_c2c_link_status_out(axi_c2c_link_status_out),
        .axi_c2c_m2s_intr_in({1'b0,1'b0,1'b0,1'b0}),
        .axi_c2c_m2s_intr_out(axi_c2c_m2s_intr_out),
        .axi_c2c_multi_bit_error_out(axi_c2c_multi_bit_error_out),
        .axi_c2c_phy_clk(1'b0),
        .axi_c2c_s2m_intr_in(axi_c2c_s2m_intr_in),
        .axi_c2c_s2m_intr_out(NLW_inst_axi_c2c_s2m_intr_out_UNCONNECTED[3:0]),
        .axi_c2c_selio_rx_clk_in(axi_c2c_selio_rx_clk_in),
        .axi_c2c_selio_rx_data_in(axi_c2c_selio_rx_data_in),
        .axi_c2c_selio_rx_diff_clk_in_n(1'b0),
        .axi_c2c_selio_rx_diff_clk_in_p(1'b0),
        .axi_c2c_selio_rx_diff_data_in_n({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_c2c_selio_rx_diff_data_in_p({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_c2c_selio_tx_clk_out(axi_c2c_selio_tx_clk_out),
        .axi_c2c_selio_tx_data_out(axi_c2c_selio_tx_data_out),
        .axi_c2c_selio_tx_diff_clk_out_n(NLW_inst_axi_c2c_selio_tx_diff_clk_out_n_UNCONNECTED),
        .axi_c2c_selio_tx_diff_clk_out_p(NLW_inst_axi_c2c_selio_tx_diff_clk_out_p_UNCONNECTED),
        .axi_c2c_selio_tx_diff_data_out_n(NLW_inst_axi_c2c_selio_tx_diff_data_out_n_UNCONNECTED[8:0]),
        .axi_c2c_selio_tx_diff_data_out_p(NLW_inst_axi_c2c_selio_tx_diff_data_out_p_UNCONNECTED[8:0]),
        .idelay_ref_clk(idelay_ref_clk),
        .m_aclk(m_aclk),
        .m_aclk_out(NLW_inst_m_aclk_out_UNCONNECTED),
        .m_aresetn(m_aresetn),
        .m_axi_araddr(m_axi_araddr),
        .m_axi_arburst(m_axi_arburst),
        .m_axi_arid(NLW_inst_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(m_axi_arlen),
        .m_axi_arready(m_axi_arready),
        .m_axi_arsize(m_axi_arsize),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awaddr(m_axi_awaddr),
        .m_axi_awburst(m_axi_awburst),
        .m_axi_awid(NLW_inst_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(m_axi_awlen),
        .m_axi_awready(m_axi_awready),
        .m_axi_awsize(m_axi_awsize),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bid(1'b0),
        .m_axi_bready(m_axi_bready),
        .m_axi_bresp(m_axi_bresp),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_lite_aclk(1'b0),
        .m_axi_lite_araddr(NLW_inst_m_axi_lite_araddr_UNCONNECTED[31:0]),
        .m_axi_lite_arprot(NLW_inst_m_axi_lite_arprot_UNCONNECTED[1:0]),
        .m_axi_lite_arready(1'b0),
        .m_axi_lite_arvalid(NLW_inst_m_axi_lite_arvalid_UNCONNECTED),
        .m_axi_lite_awaddr(NLW_inst_m_axi_lite_awaddr_UNCONNECTED[31:0]),
        .m_axi_lite_awprot(NLW_inst_m_axi_lite_awprot_UNCONNECTED[1:0]),
        .m_axi_lite_awready(1'b0),
        .m_axi_lite_awvalid(NLW_inst_m_axi_lite_awvalid_UNCONNECTED),
        .m_axi_lite_bready(NLW_inst_m_axi_lite_bready_UNCONNECTED),
        .m_axi_lite_bresp({1'b0,1'b0}),
        .m_axi_lite_bvalid(1'b0),
        .m_axi_lite_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_lite_rready(NLW_inst_m_axi_lite_rready_UNCONNECTED),
        .m_axi_lite_rresp({1'b0,1'b0}),
        .m_axi_lite_rvalid(1'b0),
        .m_axi_lite_wdata(NLW_inst_m_axi_lite_wdata_UNCONNECTED[31:0]),
        .m_axi_lite_wready(1'b0),
        .m_axi_lite_wstrb(NLW_inst_m_axi_lite_wstrb_UNCONNECTED[3:0]),
        .m_axi_lite_wvalid(NLW_inst_m_axi_lite_wvalid_UNCONNECTED),
        .m_axi_rdata(m_axi_rdata),
        .m_axi_rid(1'b0),
        .m_axi_rlast(m_axi_rlast),
        .m_axi_rready(m_axi_rready),
        .m_axi_rresp(m_axi_rresp),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wdata(m_axi_wdata),
        .m_axi_wlast(m_axi_wlast),
        .m_axi_wready(m_axi_wready),
        .m_axi_wstrb(m_axi_wstrb),
        .m_axi_wuser(m_axi_wuser),
        .m_axi_wvalid(m_axi_wvalid),
        .s_aclk(1'b0),
        .s_aresetn(1'b1),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_inst_s_axi_arready_UNCONNECTED),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_inst_s_axi_awready_UNCONNECTED),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_inst_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_inst_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_bvalid(NLW_inst_s_axi_bvalid_UNCONNECTED),
        .s_axi_lite_aclk(1'b0),
        .s_axi_lite_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_arprot({1'b0,1'b0}),
        .s_axi_lite_arready(NLW_inst_s_axi_lite_arready_UNCONNECTED),
        .s_axi_lite_arvalid(1'b0),
        .s_axi_lite_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_awprot({1'b0,1'b0}),
        .s_axi_lite_awready(NLW_inst_s_axi_lite_awready_UNCONNECTED),
        .s_axi_lite_awvalid(1'b0),
        .s_axi_lite_bready(1'b0),
        .s_axi_lite_bresp(NLW_inst_s_axi_lite_bresp_UNCONNECTED[1:0]),
        .s_axi_lite_bvalid(NLW_inst_s_axi_lite_bvalid_UNCONNECTED),
        .s_axi_lite_rdata(NLW_inst_s_axi_lite_rdata_UNCONNECTED[31:0]),
        .s_axi_lite_rready(1'b0),
        .s_axi_lite_rresp(NLW_inst_s_axi_lite_rresp_UNCONNECTED[1:0]),
        .s_axi_lite_rvalid(NLW_inst_s_axi_lite_rvalid_UNCONNECTED),
        .s_axi_lite_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_wready(NLW_inst_s_axi_lite_wready_UNCONNECTED),
        .s_axi_lite_wstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_lite_wvalid(1'b0),
        .s_axi_rdata(NLW_inst_s_axi_rdata_UNCONNECTED[31:0]),
        .s_axi_rid(NLW_inst_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_inst_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_inst_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_rvalid(NLW_inst_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_inst_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0));
endmodule

(* DowngradeIPIdentifiedWarnings = "yes" *) (* C_FAMILY = "virtex7" *) (* C_INSTANCE = "axi_c2c" *) 
(* C_SIMULATION = "0" *) (* C_MASTER_FPGA = "0" *) (* C_AXI_BUS_TYPE = "0" *) 
(* C_COMMON_CLK = "0" *) (* C_INTERFACE_TYPE = "1" *) (* C_INTERFACE_MODE = "2" *) 
(* C_NUM_OF_IO = "20" *) (* C_SELECTIO_PHY_CLK = "400" *) (* C_INCLUDE_AXILITE = "0" *) 
(* C_AXI_DATA_WIDTH = "32" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_WUSER_WIDTH = "1" *) 
(* C_DISABLE_DESKEW = "0" *) (* C_DISABLE_CLK_SHIFT = "0" *) (* C_USE_DIFF_CLK = "0" *) 
(* C_USE_DIFF_IO = "0" *) (* C_AURORA_WIDTH = "64" *) (* C_ECC_ENABLE = "1" *) 
(* C_AXI_STB_WIDTH = "4" *) (* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_SIZE_WIDTH = "3" *) (* C_AXI_BRST_WIDTH = "2" *) (* C_AXI_RESP_WIDTH = "2" *) 
(* C_INTERRUPT_WIDTH = "4" *) (* C_AXI_LITE_ADDR_WIDTH = "32" *) (* C_AXI_LITE_PROT_WIDTH = "2" *) 
(* C_AXI_LITE_DATA_WIDTH = "32" *) (* C_AXI_LITE_STB_WIDTH = "4" *) (* C_AXI_LITE_RESP_WIDTH = "2" *) 
(* C_AXI_SIZE_WIDTH_INTERNAL = "2" *) (* C_SYNC_STAGE = "6" *) (* C_PHY_SELECT = "0" *) 
(* C_SELECTIO_DDR = "1" *) (* C_WIDTH_CONVERSION = "4" *) (* C_SELECTIO_WIDTH = "9" *) 
(* PHY_DATA_WIDTH = "18" *) (* ADDR_MUX_RATIO = "4" *) (* DATA_MUX_RATIO = "4" *) 
(* AFIFO_DATA_SIZE = "45" *) (* AFIFO_DATA_SIZE_M2 = "1" *) (* AFIFO_DATA_SIZE_M3 = "0" *) 
(* AFIFO_DATA_SIZE_M4 = "1" *) (* AFIFO_WIDTH = "48" *) (* AFIFO_TIE_WIDTH = "4" *) 
(* WFIFO_DATA_SIZE = "38" *) (* WFIFO_DATA_SIZE_M2 = "0" *) (* WFIFO_DATA_SIZE_M3 = "2" *) 
(* WFIFO_DATA_SIZE_M4 = "2" *) (* WFIFO_WIDTH = "40" *) (* WFIFO_TIE_WIDTH = "3" *) 
(* RFIFO_DATA_SIZE = "36" *) (* RFIFO_DATA_SIZE_M2 = "0" *) (* RFIFO_DATA_SIZE_M3 = "0" *) 
(* RFIFO_DATA_SIZE_M4 = "0" *) (* RFIFO_WIDTH = "36" *) (* RFIFO_TIE_WIDTH = "1" *) 
(* BFIFO_DATA_SIZE = "3" *) (* BFIFO_WIDTH = "3" *) (* AWB_FC_WIDTH = "2" *) 
(* RB_FC_WIDTH = "3" *) (* TDM_ID_WIDTH = "2" *) (* TDM_VAL_BITS = "1" *) 
(* PHY_CTRL_WIDTH = "3" *) (* AXILITE_WIDTH = "20" *) (* ORIG_REF_NAME = "axi_chip2chip_v4_2" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2
   (s_aclk,
    s_aresetn,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wuser,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_bvalid,
    s_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_rvalid,
    s_axi_rready,
    axi_c2c_m2s_intr_in,
    axi_c2c_s2m_intr_out,
    m_aclk,
    m_aresetn,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wuser,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_bvalid,
    m_axi_bready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_rvalid,
    m_axi_rready,
    axi_c2c_s2m_intr_in,
    axi_c2c_m2s_intr_out,
    idelay_ref_clk,
    axi_c2c_phy_clk,
    axi_c2c_selio_tx_clk_out,
    axi_c2c_selio_tx_data_out,
    axi_c2c_selio_rx_clk_in,
    axi_c2c_selio_rx_data_in,
    axi_c2c_selio_tx_diff_clk_out_p,
    axi_c2c_selio_tx_diff_clk_out_n,
    axi_c2c_selio_tx_diff_data_out_p,
    axi_c2c_selio_tx_diff_data_out_n,
    axi_c2c_selio_rx_diff_clk_in_p,
    axi_c2c_selio_rx_diff_clk_in_n,
    axi_c2c_selio_rx_diff_data_in_p,
    axi_c2c_selio_rx_diff_data_in_n,
    axi_c2c_aurora_channel_up,
    axi_c2c_aurora_tx_tready,
    axi_c2c_aurora_tx_tdata,
    axi_c2c_aurora_tx_tvalid,
    axi_c2c_aurora_rx_tdata,
    axi_c2c_aurora_rx_tvalid,
    aurora_do_cc,
    aurora_pma_init_in,
    aurora_init_clk,
    aurora_pma_init_out,
    aurora_mmcm_not_locked,
    aurora_reset_pb,
    axi_c2c_config_error_out,
    axi_c2c_link_status_out,
    axi_c2c_multi_bit_error_out,
    axi_c2c_link_error_out,
    m_aclk_out,
    s_axi_lite_aclk,
    s_axi_lite_awaddr,
    s_axi_lite_awprot,
    s_axi_lite_awvalid,
    s_axi_lite_awready,
    s_axi_lite_wdata,
    s_axi_lite_wstrb,
    s_axi_lite_wvalid,
    s_axi_lite_wready,
    s_axi_lite_bresp,
    s_axi_lite_bvalid,
    s_axi_lite_bready,
    s_axi_lite_araddr,
    s_axi_lite_arprot,
    s_axi_lite_arvalid,
    s_axi_lite_arready,
    s_axi_lite_rdata,
    s_axi_lite_rresp,
    s_axi_lite_rvalid,
    s_axi_lite_rready,
    m_axi_lite_aclk,
    m_axi_lite_awaddr,
    m_axi_lite_awprot,
    m_axi_lite_awvalid,
    m_axi_lite_awready,
    m_axi_lite_wdata,
    m_axi_lite_wstrb,
    m_axi_lite_wvalid,
    m_axi_lite_wready,
    m_axi_lite_bresp,
    m_axi_lite_bvalid,
    m_axi_lite_bready,
    m_axi_lite_araddr,
    m_axi_lite_arprot,
    m_axi_lite_arvalid,
    m_axi_lite_arready,
    m_axi_lite_rdata,
    m_axi_lite_rresp,
    m_axi_lite_rvalid,
    m_axi_lite_rready);
  input s_aclk;
  input s_aresetn;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wuser;
  input [31:0]s_axi_wdata;
  input [3:0]s_axi_wstrb;
  input s_axi_wlast;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output s_axi_bvalid;
  input s_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [31:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output s_axi_rvalid;
  input s_axi_rready;
  input [3:0]axi_c2c_m2s_intr_in;
  output [3:0]axi_c2c_s2m_intr_out;
  input m_aclk;
  input m_aresetn;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wuser;
  output [31:0]m_axi_wdata;
  output [3:0]m_axi_wstrb;
  output m_axi_wlast;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input m_axi_bvalid;
  output m_axi_bready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [31:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input m_axi_rvalid;
  output m_axi_rready;
  input [3:0]axi_c2c_s2m_intr_in;
  output [3:0]axi_c2c_m2s_intr_out;
  input idelay_ref_clk;
  input axi_c2c_phy_clk;
  output axi_c2c_selio_tx_clk_out;
  output [8:0]axi_c2c_selio_tx_data_out;
  input axi_c2c_selio_rx_clk_in;
  input [8:0]axi_c2c_selio_rx_data_in;
  output axi_c2c_selio_tx_diff_clk_out_p;
  output axi_c2c_selio_tx_diff_clk_out_n;
  output [8:0]axi_c2c_selio_tx_diff_data_out_p;
  output [8:0]axi_c2c_selio_tx_diff_data_out_n;
  input axi_c2c_selio_rx_diff_clk_in_p;
  input axi_c2c_selio_rx_diff_clk_in_n;
  input [8:0]axi_c2c_selio_rx_diff_data_in_p;
  input [8:0]axi_c2c_selio_rx_diff_data_in_n;
  input axi_c2c_aurora_channel_up;
  input axi_c2c_aurora_tx_tready;
  output [63:0]axi_c2c_aurora_tx_tdata;
  output axi_c2c_aurora_tx_tvalid;
  input [63:0]axi_c2c_aurora_rx_tdata;
  input axi_c2c_aurora_rx_tvalid;
  output aurora_do_cc;
  input aurora_pma_init_in;
  input aurora_init_clk;
  output aurora_pma_init_out;
  input aurora_mmcm_not_locked;
  output aurora_reset_pb;
  output axi_c2c_config_error_out;
  output axi_c2c_link_status_out;
  output axi_c2c_multi_bit_error_out;
  output axi_c2c_link_error_out;
  output m_aclk_out;
  input s_axi_lite_aclk;
  input [31:0]s_axi_lite_awaddr;
  input [1:0]s_axi_lite_awprot;
  input s_axi_lite_awvalid;
  output s_axi_lite_awready;
  input [31:0]s_axi_lite_wdata;
  input [3:0]s_axi_lite_wstrb;
  input s_axi_lite_wvalid;
  output s_axi_lite_wready;
  output [1:0]s_axi_lite_bresp;
  output s_axi_lite_bvalid;
  input s_axi_lite_bready;
  input [31:0]s_axi_lite_araddr;
  input [1:0]s_axi_lite_arprot;
  input s_axi_lite_arvalid;
  output s_axi_lite_arready;
  output [31:0]s_axi_lite_rdata;
  output [1:0]s_axi_lite_rresp;
  output s_axi_lite_rvalid;
  input s_axi_lite_rready;
  input m_axi_lite_aclk;
  output [31:0]m_axi_lite_awaddr;
  output [1:0]m_axi_lite_awprot;
  output m_axi_lite_awvalid;
  input m_axi_lite_awready;
  output [31:0]m_axi_lite_wdata;
  output [3:0]m_axi_lite_wstrb;
  output m_axi_lite_wvalid;
  input m_axi_lite_wready;
  input [1:0]m_axi_lite_bresp;
  input m_axi_lite_bvalid;
  output m_axi_lite_bready;
  output [31:0]m_axi_lite_araddr;
  output [1:0]m_axi_lite_arprot;
  output m_axi_lite_arvalid;
  input m_axi_lite_arready;
  input [31:0]m_axi_lite_rdata;
  input [1:0]m_axi_lite_rresp;
  input m_axi_lite_rvalid;
  output m_axi_lite_rready;

  wire \<const0> ;
  wire aurora_init_clk;
  wire aurora_mmcm_not_locked;
  wire aurora_pma_init_in;
  wire axi_c2c_aurora_channel_up;
  wire [63:0]axi_c2c_aurora_rx_tdata;
  wire axi_c2c_aurora_rx_tvalid;
  wire axi_c2c_aurora_tx_tready;
  wire axi_c2c_config_error_out;
  wire axi_c2c_link_status_out;
  wire [3:0]axi_c2c_m2s_intr_out;
  wire axi_c2c_multi_bit_error_out;
  wire axi_c2c_phy_clk;
  wire [3:0]axi_c2c_s2m_intr_in;
(* IBUF_LOW_PWR *)   wire axi_c2c_selio_rx_clk_in;
(* IBUF_LOW_PWR *)   wire [8:0]axi_c2c_selio_rx_data_in;
  wire axi_c2c_selio_rx_diff_clk_in_n;
  wire axi_c2c_selio_rx_diff_clk_in_p;
  wire [8:0]axi_c2c_selio_rx_diff_data_in_n;
  wire [8:0]axi_c2c_selio_rx_diff_data_in_p;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire axi_c2c_selio_tx_clk_out;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire [8:0]axi_c2c_selio_tx_data_out;
  wire \axi_chip2chip_ch0_ctrl_inst/send_ch01_out ;
  wire \axi_chip2chip_ch0_ctrl_inst/send_intr6_out ;
(* async_reg = "true" *) (* DONT_TOUCH *)   wire \axi_chip2chip_phy_init_inst/aurora_rst_out_cdc_to ;
(* async_reg = "true" *) (* DONT_TOUCH *)   wire \axi_chip2chip_phy_init_inst/aurora_rst_out_r1 ;
(* async_reg = "true" *) (* DONT_TOUCH *)   wire \axi_chip2chip_phy_init_inst/aurora_rst_out_r2 ;
  wire idelay_ref_clk;
  wire m_aclk;
  wire m_aresetn;
  wire [31:0]m_axi_araddr;
  wire [1:0]m_axi_arburst;
  wire [0:0]m_axi_arid;
  wire [7:0]m_axi_arlen;
  wire m_axi_arready;
  wire [1:0]\^m_axi_arsize ;
  wire m_axi_arvalid;
  wire [31:0]m_axi_awaddr;
  wire [1:0]m_axi_awburst;
  wire [0:0]m_axi_awid;
  wire [7:0]m_axi_awlen;
  wire m_axi_awready;
  wire [1:0]\^m_axi_awsize ;
  wire m_axi_awvalid;
  wire [0:0]m_axi_bid;
  wire m_axi_bready;
  wire [1:0]m_axi_bresp;
  wire m_axi_bvalid;
  wire [31:0]m_axi_rdata;
  wire [0:0]m_axi_rid;
  wire m_axi_rlast;
  wire m_axi_rready;
  wire [1:0]m_axi_rresp;
  wire m_axi_rvalid;
  wire [31:0]m_axi_wdata;
  wire m_axi_wlast;
  wire m_axi_wready;
  wire [3:0]m_axi_wstrb;
  wire [0:0]m_axi_wuser;
  wire m_axi_wvalid;
  wire mmcm_idelay_reset;
  wire \n_11_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_129_slave_fpga_gen.axi_chip2chip_slave_inst ;
  wire \n_13_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_14_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_15_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_16_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_17_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_18_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_19_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_20_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_21_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_22_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_23_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_24_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_25_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_26_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_27_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_28_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_29_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_30_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_31_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_32_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire \n_33_slave_fpga_gen.axi_chip2chip_slave_phy_inst ;
  wire rx_phy_ready;
  wire rx_user_clk;
  wire rx_user_reset;
  wire tx_ch0_valid;
  wire [2:1]tx_phy_ctrl;
  wire [0:0]tx_phy_ctrl__0;
  wire tx_phy_ready;
  wire [17:0]tx_user_data;

  assign aurora_do_cc = \<const0> ;
  assign aurora_pma_init_out = \<const0> ;
  assign aurora_reset_pb = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[63] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[62] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[61] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[60] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[59] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[58] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[57] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[56] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[55] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[54] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[53] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[52] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[51] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[50] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[49] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[48] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[47] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[46] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[45] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[44] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[43] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[42] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[41] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[40] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[39] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[38] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[37] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[36] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[35] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[34] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[33] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[32] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[31] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[30] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[29] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[28] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[27] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[26] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[25] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[24] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[23] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[22] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[21] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[20] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[19] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[18] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[17] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[16] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[15] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[14] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[13] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[12] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[11] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[10] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[9] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[8] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[7] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[6] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[5] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[4] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[3] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[2] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[1] = \<const0> ;
  assign axi_c2c_aurora_tx_tdata[0] = \<const0> ;
  assign axi_c2c_aurora_tx_tvalid = \<const0> ;
  assign axi_c2c_link_error_out = \<const0> ;
  assign axi_c2c_s2m_intr_out[3] = \<const0> ;
  assign axi_c2c_s2m_intr_out[2] = \<const0> ;
  assign axi_c2c_s2m_intr_out[1] = \<const0> ;
  assign axi_c2c_s2m_intr_out[0] = \<const0> ;
  assign axi_c2c_selio_tx_diff_clk_out_n = \<const0> ;
  assign axi_c2c_selio_tx_diff_clk_out_p = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[8] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[7] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[6] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[5] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[4] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[3] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[2] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[1] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_n[0] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[8] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[7] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[6] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[5] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[4] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[3] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[2] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[1] = \<const0> ;
  assign axi_c2c_selio_tx_diff_data_out_p[0] = \<const0> ;
  assign m_aclk_out = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1:0] = \^m_axi_arsize [1:0];
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1:0] = \^m_axi_awsize [1:0];
  assign m_axi_lite_araddr[31] = \<const0> ;
  assign m_axi_lite_araddr[30] = \<const0> ;
  assign m_axi_lite_araddr[29] = \<const0> ;
  assign m_axi_lite_araddr[28] = \<const0> ;
  assign m_axi_lite_araddr[27] = \<const0> ;
  assign m_axi_lite_araddr[26] = \<const0> ;
  assign m_axi_lite_araddr[25] = \<const0> ;
  assign m_axi_lite_araddr[24] = \<const0> ;
  assign m_axi_lite_araddr[23] = \<const0> ;
  assign m_axi_lite_araddr[22] = \<const0> ;
  assign m_axi_lite_araddr[21] = \<const0> ;
  assign m_axi_lite_araddr[20] = \<const0> ;
  assign m_axi_lite_araddr[19] = \<const0> ;
  assign m_axi_lite_araddr[18] = \<const0> ;
  assign m_axi_lite_araddr[17] = \<const0> ;
  assign m_axi_lite_araddr[16] = \<const0> ;
  assign m_axi_lite_araddr[15] = \<const0> ;
  assign m_axi_lite_araddr[14] = \<const0> ;
  assign m_axi_lite_araddr[13] = \<const0> ;
  assign m_axi_lite_araddr[12] = \<const0> ;
  assign m_axi_lite_araddr[11] = \<const0> ;
  assign m_axi_lite_araddr[10] = \<const0> ;
  assign m_axi_lite_araddr[9] = \<const0> ;
  assign m_axi_lite_araddr[8] = \<const0> ;
  assign m_axi_lite_araddr[7] = \<const0> ;
  assign m_axi_lite_araddr[6] = \<const0> ;
  assign m_axi_lite_araddr[5] = \<const0> ;
  assign m_axi_lite_araddr[4] = \<const0> ;
  assign m_axi_lite_araddr[3] = \<const0> ;
  assign m_axi_lite_araddr[2] = \<const0> ;
  assign m_axi_lite_araddr[1] = \<const0> ;
  assign m_axi_lite_araddr[0] = \<const0> ;
  assign m_axi_lite_arprot[1] = \<const0> ;
  assign m_axi_lite_arprot[0] = \<const0> ;
  assign m_axi_lite_arvalid = \<const0> ;
  assign m_axi_lite_awaddr[31] = \<const0> ;
  assign m_axi_lite_awaddr[30] = \<const0> ;
  assign m_axi_lite_awaddr[29] = \<const0> ;
  assign m_axi_lite_awaddr[28] = \<const0> ;
  assign m_axi_lite_awaddr[27] = \<const0> ;
  assign m_axi_lite_awaddr[26] = \<const0> ;
  assign m_axi_lite_awaddr[25] = \<const0> ;
  assign m_axi_lite_awaddr[24] = \<const0> ;
  assign m_axi_lite_awaddr[23] = \<const0> ;
  assign m_axi_lite_awaddr[22] = \<const0> ;
  assign m_axi_lite_awaddr[21] = \<const0> ;
  assign m_axi_lite_awaddr[20] = \<const0> ;
  assign m_axi_lite_awaddr[19] = \<const0> ;
  assign m_axi_lite_awaddr[18] = \<const0> ;
  assign m_axi_lite_awaddr[17] = \<const0> ;
  assign m_axi_lite_awaddr[16] = \<const0> ;
  assign m_axi_lite_awaddr[15] = \<const0> ;
  assign m_axi_lite_awaddr[14] = \<const0> ;
  assign m_axi_lite_awaddr[13] = \<const0> ;
  assign m_axi_lite_awaddr[12] = \<const0> ;
  assign m_axi_lite_awaddr[11] = \<const0> ;
  assign m_axi_lite_awaddr[10] = \<const0> ;
  assign m_axi_lite_awaddr[9] = \<const0> ;
  assign m_axi_lite_awaddr[8] = \<const0> ;
  assign m_axi_lite_awaddr[7] = \<const0> ;
  assign m_axi_lite_awaddr[6] = \<const0> ;
  assign m_axi_lite_awaddr[5] = \<const0> ;
  assign m_axi_lite_awaddr[4] = \<const0> ;
  assign m_axi_lite_awaddr[3] = \<const0> ;
  assign m_axi_lite_awaddr[2] = \<const0> ;
  assign m_axi_lite_awaddr[1] = \<const0> ;
  assign m_axi_lite_awaddr[0] = \<const0> ;
  assign m_axi_lite_awprot[1] = \<const0> ;
  assign m_axi_lite_awprot[0] = \<const0> ;
  assign m_axi_lite_awvalid = \<const0> ;
  assign m_axi_lite_bready = \<const0> ;
  assign m_axi_lite_rready = \<const0> ;
  assign m_axi_lite_wdata[31] = \<const0> ;
  assign m_axi_lite_wdata[30] = \<const0> ;
  assign m_axi_lite_wdata[29] = \<const0> ;
  assign m_axi_lite_wdata[28] = \<const0> ;
  assign m_axi_lite_wdata[27] = \<const0> ;
  assign m_axi_lite_wdata[26] = \<const0> ;
  assign m_axi_lite_wdata[25] = \<const0> ;
  assign m_axi_lite_wdata[24] = \<const0> ;
  assign m_axi_lite_wdata[23] = \<const0> ;
  assign m_axi_lite_wdata[22] = \<const0> ;
  assign m_axi_lite_wdata[21] = \<const0> ;
  assign m_axi_lite_wdata[20] = \<const0> ;
  assign m_axi_lite_wdata[19] = \<const0> ;
  assign m_axi_lite_wdata[18] = \<const0> ;
  assign m_axi_lite_wdata[17] = \<const0> ;
  assign m_axi_lite_wdata[16] = \<const0> ;
  assign m_axi_lite_wdata[15] = \<const0> ;
  assign m_axi_lite_wdata[14] = \<const0> ;
  assign m_axi_lite_wdata[13] = \<const0> ;
  assign m_axi_lite_wdata[12] = \<const0> ;
  assign m_axi_lite_wdata[11] = \<const0> ;
  assign m_axi_lite_wdata[10] = \<const0> ;
  assign m_axi_lite_wdata[9] = \<const0> ;
  assign m_axi_lite_wdata[8] = \<const0> ;
  assign m_axi_lite_wdata[7] = \<const0> ;
  assign m_axi_lite_wdata[6] = \<const0> ;
  assign m_axi_lite_wdata[5] = \<const0> ;
  assign m_axi_lite_wdata[4] = \<const0> ;
  assign m_axi_lite_wdata[3] = \<const0> ;
  assign m_axi_lite_wdata[2] = \<const0> ;
  assign m_axi_lite_wdata[1] = \<const0> ;
  assign m_axi_lite_wdata[0] = \<const0> ;
  assign m_axi_lite_wstrb[3] = \<const0> ;
  assign m_axi_lite_wstrb[2] = \<const0> ;
  assign m_axi_lite_wstrb[1] = \<const0> ;
  assign m_axi_lite_wstrb[0] = \<const0> ;
  assign m_axi_lite_wvalid = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_lite_arready = \<const0> ;
  assign s_axi_lite_awready = \<const0> ;
  assign s_axi_lite_bresp[1] = \<const0> ;
  assign s_axi_lite_bresp[0] = \<const0> ;
  assign s_axi_lite_bvalid = \<const0> ;
  assign s_axi_lite_rdata[31] = \<const0> ;
  assign s_axi_lite_rdata[30] = \<const0> ;
  assign s_axi_lite_rdata[29] = \<const0> ;
  assign s_axi_lite_rdata[28] = \<const0> ;
  assign s_axi_lite_rdata[27] = \<const0> ;
  assign s_axi_lite_rdata[26] = \<const0> ;
  assign s_axi_lite_rdata[25] = \<const0> ;
  assign s_axi_lite_rdata[24] = \<const0> ;
  assign s_axi_lite_rdata[23] = \<const0> ;
  assign s_axi_lite_rdata[22] = \<const0> ;
  assign s_axi_lite_rdata[21] = \<const0> ;
  assign s_axi_lite_rdata[20] = \<const0> ;
  assign s_axi_lite_rdata[19] = \<const0> ;
  assign s_axi_lite_rdata[18] = \<const0> ;
  assign s_axi_lite_rdata[17] = \<const0> ;
  assign s_axi_lite_rdata[16] = \<const0> ;
  assign s_axi_lite_rdata[15] = \<const0> ;
  assign s_axi_lite_rdata[14] = \<const0> ;
  assign s_axi_lite_rdata[13] = \<const0> ;
  assign s_axi_lite_rdata[12] = \<const0> ;
  assign s_axi_lite_rdata[11] = \<const0> ;
  assign s_axi_lite_rdata[10] = \<const0> ;
  assign s_axi_lite_rdata[9] = \<const0> ;
  assign s_axi_lite_rdata[8] = \<const0> ;
  assign s_axi_lite_rdata[7] = \<const0> ;
  assign s_axi_lite_rdata[6] = \<const0> ;
  assign s_axi_lite_rdata[5] = \<const0> ;
  assign s_axi_lite_rdata[4] = \<const0> ;
  assign s_axi_lite_rdata[3] = \<const0> ;
  assign s_axi_lite_rdata[2] = \<const0> ;
  assign s_axi_lite_rdata[1] = \<const0> ;
  assign s_axi_lite_rdata[0] = \<const0> ;
  assign s_axi_lite_rresp[1] = \<const0> ;
  assign s_axi_lite_rresp[0] = \<const0> ;
  assign s_axi_lite_rvalid = \<const0> ;
  assign s_axi_lite_wready = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
GND GND
       (.G(\<const0> ));
control_to_core_slave_axi_axi_chip2chip_v4_2_slave \slave_fpga_gen.axi_chip2chip_slave_inst 
       (.AR(mmcm_idelay_reset),
        .E(\n_11_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .I1({m_axi_bresp,m_axi_bid}),
        .I2(\n_14_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .I3(\n_15_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .I4(tx_phy_ctrl__0),
        .I5(\n_13_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .O1({m_axi_araddr,m_axi_arburst,\^m_axi_arsize ,m_axi_arlen,m_axi_arid}),
        .O2({m_axi_wdata,m_axi_wstrb,m_axi_wlast,m_axi_wuser}),
        .O3(\n_129_slave_fpga_gen.axi_chip2chip_slave_inst ),
        .O4(tx_user_data),
        .Q({\n_16_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_17_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_18_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_19_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_20_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_21_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_22_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_23_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_24_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_25_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_26_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_27_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_28_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_29_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_30_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_31_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_32_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_33_slave_fpga_gen.axi_chip2chip_slave_phy_inst }),
        .axi_c2c_m2s_intr_out(axi_c2c_m2s_intr_out),
        .axi_c2c_s2m_intr_in(axi_c2c_s2m_intr_in),
        .clk_ph_out(rx_user_clk),
        .din({m_axi_rdata,m_axi_rresp,m_axi_rlast,m_axi_rid}),
        .dout({m_axi_awaddr,m_axi_awburst,\^m_axi_awsize ,m_axi_awlen,m_axi_awid}),
        .m_aclk(m_aclk),
        .m_aresetn(m_aresetn),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .m_axi_bready(m_axi_bready),
        .m_axi_bvalid(m_axi_bvalid),
        .m_axi_rready(m_axi_rready),
        .m_axi_rvalid(m_axi_rvalid),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .rx_phy_ready(rx_phy_ready),
        .rx_user_reset(rx_user_reset),
        .send_ch01_out(\axi_chip2chip_ch0_ctrl_inst/send_ch01_out ),
        .send_intr6_out(\axi_chip2chip_ch0_ctrl_inst/send_intr6_out ),
        .tx_ch0_valid(tx_ch0_valid),
        .tx_phy_ctrl(tx_phy_ctrl),
        .tx_phy_ready(tx_phy_ready));
control_to_core_slave_axi_axi_chip2chip_v4_2_phy_if \slave_fpga_gen.axi_chip2chip_slave_phy_inst 
       (.E(\n_11_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .I1(\n_129_slave_fpga_gen.axi_chip2chip_slave_inst ),
        .I4(tx_phy_ctrl__0),
        .O1(\n_13_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .O2(\n_14_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .O3(\n_15_slave_fpga_gen.axi_chip2chip_slave_phy_inst ),
        .O4({axi_c2c_link_status_out,axi_c2c_multi_bit_error_out,axi_c2c_config_error_out}),
        .Q({\n_16_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_17_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_18_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_19_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_20_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_21_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_22_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_23_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_24_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_25_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_26_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_27_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_28_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_29_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_30_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_31_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_32_slave_fpga_gen.axi_chip2chip_slave_phy_inst ,\n_33_slave_fpga_gen.axi_chip2chip_slave_phy_inst }),
        .aurora_rst_out_cdc_to(\axi_chip2chip_phy_init_inst/aurora_rst_out_cdc_to ),
        .aurora_rst_out_r1(\axi_chip2chip_phy_init_inst/aurora_rst_out_r1 ),
        .aurora_rst_out_r2(\axi_chip2chip_phy_init_inst/aurora_rst_out_r2 ),
        .axi_c2c_selio_rx_clk_in(axi_c2c_selio_rx_clk_in),
        .axi_c2c_selio_rx_data_in(axi_c2c_selio_rx_data_in),
        .axi_c2c_selio_tx_clk_out(axi_c2c_selio_tx_clk_out),
        .axi_c2c_selio_tx_data_out(axi_c2c_selio_tx_data_out),
        .clk_ph_out(rx_user_clk),
        .data_in(tx_user_data),
        .idelay_ref_clk(idelay_ref_clk),
        .m_aclk(m_aclk),
        .m_aresetn(m_aresetn),
        .reset(mmcm_idelay_reset),
        .rx_phy_ready(rx_phy_ready),
        .rx_user_reset(rx_user_reset),
        .send_ch01_out(\axi_chip2chip_ch0_ctrl_inst/send_ch01_out ),
        .send_intr6_out(\axi_chip2chip_ch0_ctrl_inst/send_intr6_out ),
        .tx_ch0_valid(tx_ch0_valid),
        .tx_phy_ctrl(tx_phy_ctrl),
        .tx_phy_ready(tx_phy_ready));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_async_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo
   (dout,
    fifo_full,
    aw_ch_fc,
    m_axi_awvalid,
    br_fifo_reset,
    clk_ph_out,
    m_aclk,
    din,
    aw_ch_data_valid,
    Q,
    m_axi_awready);
  output [44:0]dout;
  output fifo_full;
  output aw_ch_fc;
  output m_axi_awvalid;
  input br_fifo_reset;
  input clk_ph_out;
  input m_aclk;
  input [47:0]din;
  input aw_ch_data_valid;
  input [0:0]Q;
  input m_axi_awready;

  wire [0:0]Q;
  wire aw_ch_data_valid;
  wire aw_ch_fc;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [47:0]din;
  wire [44:0]dout;
  wire fifo_empty;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire n_0_U0;
  wire n_0_U0_i_2__1;
  wire n_1_U0;
  wire n_2_U0;
  wire pack_data_we;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [7:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [7:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [7:0]NLW_U0_wr_data_count_UNCONNECTED;

(* C_ADD_NGC_CONSTRAINT = "0" *) 
   (* C_APPLICATION_TYPE_AXIS = "0" *) 
   (* C_APPLICATION_TYPE_RACH = "0" *) 
   (* C_APPLICATION_TYPE_RDCH = "0" *) 
   (* C_APPLICATION_TYPE_WACH = "0" *) 
   (* C_APPLICATION_TYPE_WDCH = "0" *) 
   (* C_APPLICATION_TYPE_WRCH = "0" *) 
   (* C_AXIS_TDATA_WIDTH = "64" *) 
   (* C_AXIS_TDEST_WIDTH = "4" *) 
   (* C_AXIS_TID_WIDTH = "8" *) 
   (* C_AXIS_TKEEP_WIDTH = "4" *) 
   (* C_AXIS_TSTRB_WIDTH = "4" *) 
   (* C_AXIS_TUSER_WIDTH = "4" *) 
   (* C_AXIS_TYPE = "0" *) 
   (* C_AXI_ADDR_WIDTH = "32" *) 
   (* C_AXI_ARUSER_WIDTH = "1" *) 
   (* C_AXI_AWUSER_WIDTH = "1" *) 
   (* C_AXI_BUSER_WIDTH = "1" *) 
   (* C_AXI_DATA_WIDTH = "64" *) 
   (* C_AXI_ID_WIDTH = "4" *) 
   (* C_AXI_LEN_WIDTH = "4" *) 
   (* C_AXI_LOCK_WIDTH = "4" *) 
   (* C_AXI_RUSER_WIDTH = "1" *) 
   (* C_AXI_TYPE = "0" *) 
   (* C_AXI_WUSER_WIDTH = "1" *) 
   (* C_COMMON_CLOCK = "0" *) 
   (* C_COUNT_TYPE = "0" *) 
   (* C_DATA_COUNT_WIDTH = "8" *) 
   (* C_DEFAULT_VALUE = "BlankString" *) 
   (* C_DIN_WIDTH = "48" *) 
   (* C_DIN_WIDTH_AXIS = "1" *) 
   (* C_DIN_WIDTH_RACH = "32" *) 
   (* C_DIN_WIDTH_RDCH = "64" *) 
   (* C_DIN_WIDTH_WACH = "32" *) 
   (* C_DIN_WIDTH_WDCH = "64" *) 
   (* C_DIN_WIDTH_WRCH = "2" *) 
   (* C_DOUT_RST_VAL = "0" *) 
   (* C_DOUT_WIDTH = "48" *) 
   (* C_ENABLE_RLOCS = "0" *) 
   (* C_ENABLE_RST_SYNC = "1" *) 
   (* C_ERROR_INJECTION_TYPE = "0" *) 
   (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
   (* C_FAMILY = "virtex7" *) 
   (* C_FULL_FLAGS_RST_VAL = "1" *) 
   (* C_HAS_ALMOST_EMPTY = "0" *) 
   (* C_HAS_ALMOST_FULL = "0" *) 
   (* C_HAS_AXIS_TDATA = "0" *) 
   (* C_HAS_AXIS_TDEST = "0" *) 
   (* C_HAS_AXIS_TID = "0" *) 
   (* C_HAS_AXIS_TKEEP = "0" *) 
   (* C_HAS_AXIS_TLAST = "0" *) 
   (* C_HAS_AXIS_TREADY = "1" *) 
   (* C_HAS_AXIS_TSTRB = "0" *) 
   (* C_HAS_AXIS_TUSER = "0" *) 
   (* C_HAS_AXI_ARUSER = "0" *) 
   (* C_HAS_AXI_AWUSER = "0" *) 
   (* C_HAS_AXI_BUSER = "0" *) 
   (* C_HAS_AXI_ID = "0" *) 
   (* C_HAS_AXI_RD_CHANNEL = "0" *) 
   (* C_HAS_AXI_RUSER = "0" *) 
   (* C_HAS_AXI_WR_CHANNEL = "0" *) 
   (* C_HAS_AXI_WUSER = "0" *) 
   (* C_HAS_BACKUP = "0" *) 
   (* C_HAS_DATA_COUNT = "0" *) 
   (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
   (* C_HAS_DATA_COUNTS_RACH = "0" *) 
   (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WACH = "0" *) 
   (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
   (* C_HAS_INT_CLK = "0" *) 
   (* C_HAS_MASTER_CE = "0" *) 
   (* C_HAS_MEMINIT_FILE = "0" *) 
   (* C_HAS_OVERFLOW = "0" *) 
   (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
   (* C_HAS_PROG_FLAGS_RACH = "0" *) 
   (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WACH = "0" *) 
   (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
   (* C_HAS_RD_DATA_COUNT = "0" *) 
   (* C_HAS_RD_RST = "0" *) 
   (* C_HAS_RST = "1" *) 
   (* C_HAS_SLAVE_CE = "0" *) 
   (* C_HAS_SRST = "0" *) 
   (* C_HAS_UNDERFLOW = "0" *) 
   (* C_HAS_VALID = "0" *) 
   (* C_HAS_WR_ACK = "0" *) 
   (* C_HAS_WR_DATA_COUNT = "0" *) 
   (* C_HAS_WR_RST = "0" *) 
   (* C_IMPLEMENTATION_TYPE = "2" *) 
   (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
   (* C_INIT_WR_PNTR_VAL = "0" *) 
   (* C_INTERFACE_TYPE = "0" *) 
   (* C_MEMORY_TYPE = "1" *) 
   (* C_MIF_FILE_NAME = "BlankString" *) 
   (* C_MSGON_VAL = "1" *) 
   (* C_OPTIMIZATION_MODE = "0" *) 
   (* C_OVERFLOW_LOW = "0" *) 
   (* C_POWER_SAVING_MODE = "0" *) 
   (* C_PRELOAD_LATENCY = "0" *) 
   (* C_PRELOAD_REGS = "1" *) 
   (* C_PRIM_FIFO_TYPE = "512x72" *) 
   (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
   (* C_PROG_EMPTY_TYPE = "0" *) 
   (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
   (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL = "128" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
   (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) 
   (* C_PROG_FULL_TYPE = "1" *) 
   (* C_PROG_FULL_TYPE_AXIS = "0" *) 
   (* C_PROG_FULL_TYPE_RACH = "0" *) 
   (* C_PROG_FULL_TYPE_RDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WACH = "0" *) 
   (* C_PROG_FULL_TYPE_WDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WRCH = "0" *) 
   (* C_RACH_TYPE = "0" *) 
   (* C_RDCH_TYPE = "0" *) 
   (* C_RD_DATA_COUNT_WIDTH = "8" *) 
   (* C_RD_DEPTH = "256" *) 
   (* C_RD_FREQ = "1" *) 
   (* C_RD_PNTR_WIDTH = "8" *) 
   (* C_REG_SLICE_MODE_AXIS = "0" *) 
   (* C_REG_SLICE_MODE_RACH = "0" *) 
   (* C_REG_SLICE_MODE_RDCH = "0" *) 
   (* C_REG_SLICE_MODE_WACH = "0" *) 
   (* C_REG_SLICE_MODE_WDCH = "0" *) 
   (* C_REG_SLICE_MODE_WRCH = "0" *) 
   (* C_SYNCHRONIZER_STAGE = "6" *) 
   (* C_UNDERFLOW_LOW = "0" *) 
   (* C_USE_COMMON_OVERFLOW = "0" *) 
   (* C_USE_COMMON_UNDERFLOW = "0" *) 
   (* C_USE_DEFAULT_SETTINGS = "0" *) 
   (* C_USE_DOUT_RST = "1" *) 
   (* C_USE_ECC = "0" *) 
   (* C_USE_ECC_AXIS = "0" *) 
   (* C_USE_ECC_RACH = "0" *) 
   (* C_USE_ECC_RDCH = "0" *) 
   (* C_USE_ECC_WACH = "0" *) 
   (* C_USE_ECC_WDCH = "0" *) 
   (* C_USE_ECC_WRCH = "0" *) 
   (* C_USE_EMBEDDED_REG = "0" *) 
   (* C_USE_FIFO16_FLAGS = "0" *) 
   (* C_USE_FWFT_DATA_COUNT = "0" *) 
   (* C_USE_PIPELINE_REG = "0" *) 
   (* C_VALID_LOW = "0" *) 
   (* C_WACH_TYPE = "0" *) 
   (* C_WDCH_TYPE = "0" *) 
   (* C_WRCH_TYPE = "0" *) 
   (* C_WR_ACK_LOW = "0" *) 
   (* C_WR_DATA_COUNT_WIDTH = "8" *) 
   (* C_WR_DEPTH = "256" *) 
   (* C_WR_DEPTH_AXIS = "1024" *) 
   (* C_WR_DEPTH_RACH = "16" *) 
   (* C_WR_DEPTH_RDCH = "1024" *) 
   (* C_WR_DEPTH_WACH = "16" *) 
   (* C_WR_DEPTH_WDCH = "1024" *) 
   (* C_WR_DEPTH_WRCH = "16" *) 
   (* C_WR_FREQ = "1" *) 
   (* C_WR_PNTR_WIDTH = "8" *) 
   (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
   (* C_WR_PNTR_WIDTH_RACH = "4" *) 
   (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WACH = "4" *) 
   (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
   (* C_WR_RESPONSE_LATENCY = "1" *) 
   (* DONT_TOUCH *) 
   control_to_core_slave_axi_fifo_generator_v12_0__2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[7:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout({n_0_U0,n_1_U0,n_2_U0,dout}),
        .empty(fifo_empty),
        .full(fifo_full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[3:0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[3:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[3:0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[3:0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[3:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[3:0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[3:0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[63:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[3:0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[7:0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(aw_ch_fc),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(m_aclk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(n_0_U0_i_2__1),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(br_fifo_reset),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(clk_ph_out),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[7:0]),
        .wr_en(pack_data_we),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
LUT3 #(
    .INIT(8'h40)) 
     U0_i_1
       (.I0(fifo_full),
        .I1(aw_ch_data_valid),
        .I2(Q),
        .O(pack_data_we));
(* SOFT_HLUTNM = "soft_lutpair23" *) 
   LUT2 #(
    .INIT(4'h2)) 
     U0_i_2__1
       (.I0(m_axi_awready),
        .I1(fifo_empty),
        .O(n_0_U0_i_2__1));
(* SOFT_HLUTNM = "soft_lutpair23" *) 
   LUT1 #(
    .INIT(2'h1)) 
     m_axi_awvalid_INST_0
       (.I0(fifo_empty),
        .O(m_axi_awvalid));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_async_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo_76
   (O1,
    fifo_full,
    ar_ch_fc,
    m_axi_arvalid,
    br_fifo_reset,
    clk_ph_out,
    m_aclk,
    din,
    ar_ch_data_valid,
    Q,
    m_axi_arready);
  output [44:0]O1;
  output fifo_full;
  output ar_ch_fc;
  output m_axi_arvalid;
  input br_fifo_reset;
  input clk_ph_out;
  input m_aclk;
  input [47:0]din;
  input ar_ch_data_valid;
  input [0:0]Q;
  input m_axi_arready;

  wire [44:0]O1;
  wire [0:0]Q;
  wire ar_ch_data_valid;
  wire ar_ch_fc;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [47:0]din;
  wire fifo_empty;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire n_0_U0;
  wire n_0_U0_i_2__2;
  wire n_1_U0;
  wire n_2_U0;
  wire pack_data_we;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [7:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [7:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [7:0]NLW_U0_wr_data_count_UNCONNECTED;

(* C_ADD_NGC_CONSTRAINT = "0" *) 
   (* C_APPLICATION_TYPE_AXIS = "0" *) 
   (* C_APPLICATION_TYPE_RACH = "0" *) 
   (* C_APPLICATION_TYPE_RDCH = "0" *) 
   (* C_APPLICATION_TYPE_WACH = "0" *) 
   (* C_APPLICATION_TYPE_WDCH = "0" *) 
   (* C_APPLICATION_TYPE_WRCH = "0" *) 
   (* C_AXIS_TDATA_WIDTH = "64" *) 
   (* C_AXIS_TDEST_WIDTH = "4" *) 
   (* C_AXIS_TID_WIDTH = "8" *) 
   (* C_AXIS_TKEEP_WIDTH = "4" *) 
   (* C_AXIS_TSTRB_WIDTH = "4" *) 
   (* C_AXIS_TUSER_WIDTH = "4" *) 
   (* C_AXIS_TYPE = "0" *) 
   (* C_AXI_ADDR_WIDTH = "32" *) 
   (* C_AXI_ARUSER_WIDTH = "1" *) 
   (* C_AXI_AWUSER_WIDTH = "1" *) 
   (* C_AXI_BUSER_WIDTH = "1" *) 
   (* C_AXI_DATA_WIDTH = "64" *) 
   (* C_AXI_ID_WIDTH = "4" *) 
   (* C_AXI_LEN_WIDTH = "4" *) 
   (* C_AXI_LOCK_WIDTH = "4" *) 
   (* C_AXI_RUSER_WIDTH = "1" *) 
   (* C_AXI_TYPE = "0" *) 
   (* C_AXI_WUSER_WIDTH = "1" *) 
   (* C_COMMON_CLOCK = "0" *) 
   (* C_COUNT_TYPE = "0" *) 
   (* C_DATA_COUNT_WIDTH = "8" *) 
   (* C_DEFAULT_VALUE = "BlankString" *) 
   (* C_DIN_WIDTH = "48" *) 
   (* C_DIN_WIDTH_AXIS = "1" *) 
   (* C_DIN_WIDTH_RACH = "32" *) 
   (* C_DIN_WIDTH_RDCH = "64" *) 
   (* C_DIN_WIDTH_WACH = "32" *) 
   (* C_DIN_WIDTH_WDCH = "64" *) 
   (* C_DIN_WIDTH_WRCH = "2" *) 
   (* C_DOUT_RST_VAL = "0" *) 
   (* C_DOUT_WIDTH = "48" *) 
   (* C_ENABLE_RLOCS = "0" *) 
   (* C_ENABLE_RST_SYNC = "1" *) 
   (* C_ERROR_INJECTION_TYPE = "0" *) 
   (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
   (* C_FAMILY = "virtex7" *) 
   (* C_FULL_FLAGS_RST_VAL = "1" *) 
   (* C_HAS_ALMOST_EMPTY = "0" *) 
   (* C_HAS_ALMOST_FULL = "0" *) 
   (* C_HAS_AXIS_TDATA = "0" *) 
   (* C_HAS_AXIS_TDEST = "0" *) 
   (* C_HAS_AXIS_TID = "0" *) 
   (* C_HAS_AXIS_TKEEP = "0" *) 
   (* C_HAS_AXIS_TLAST = "0" *) 
   (* C_HAS_AXIS_TREADY = "1" *) 
   (* C_HAS_AXIS_TSTRB = "0" *) 
   (* C_HAS_AXIS_TUSER = "0" *) 
   (* C_HAS_AXI_ARUSER = "0" *) 
   (* C_HAS_AXI_AWUSER = "0" *) 
   (* C_HAS_AXI_BUSER = "0" *) 
   (* C_HAS_AXI_ID = "0" *) 
   (* C_HAS_AXI_RD_CHANNEL = "0" *) 
   (* C_HAS_AXI_RUSER = "0" *) 
   (* C_HAS_AXI_WR_CHANNEL = "0" *) 
   (* C_HAS_AXI_WUSER = "0" *) 
   (* C_HAS_BACKUP = "0" *) 
   (* C_HAS_DATA_COUNT = "0" *) 
   (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
   (* C_HAS_DATA_COUNTS_RACH = "0" *) 
   (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WACH = "0" *) 
   (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
   (* C_HAS_INT_CLK = "0" *) 
   (* C_HAS_MASTER_CE = "0" *) 
   (* C_HAS_MEMINIT_FILE = "0" *) 
   (* C_HAS_OVERFLOW = "0" *) 
   (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
   (* C_HAS_PROG_FLAGS_RACH = "0" *) 
   (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WACH = "0" *) 
   (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
   (* C_HAS_RD_DATA_COUNT = "0" *) 
   (* C_HAS_RD_RST = "0" *) 
   (* C_HAS_RST = "1" *) 
   (* C_HAS_SLAVE_CE = "0" *) 
   (* C_HAS_SRST = "0" *) 
   (* C_HAS_UNDERFLOW = "0" *) 
   (* C_HAS_VALID = "0" *) 
   (* C_HAS_WR_ACK = "0" *) 
   (* C_HAS_WR_DATA_COUNT = "0" *) 
   (* C_HAS_WR_RST = "0" *) 
   (* C_IMPLEMENTATION_TYPE = "2" *) 
   (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
   (* C_INIT_WR_PNTR_VAL = "0" *) 
   (* C_INTERFACE_TYPE = "0" *) 
   (* C_MEMORY_TYPE = "1" *) 
   (* C_MIF_FILE_NAME = "BlankString" *) 
   (* C_MSGON_VAL = "1" *) 
   (* C_OPTIMIZATION_MODE = "0" *) 
   (* C_OVERFLOW_LOW = "0" *) 
   (* C_POWER_SAVING_MODE = "0" *) 
   (* C_PRELOAD_LATENCY = "0" *) 
   (* C_PRELOAD_REGS = "1" *) 
   (* C_PRIM_FIFO_TYPE = "512x72" *) 
   (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
   (* C_PROG_EMPTY_TYPE = "0" *) 
   (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
   (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL = "128" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
   (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) 
   (* C_PROG_FULL_TYPE = "1" *) 
   (* C_PROG_FULL_TYPE_AXIS = "0" *) 
   (* C_PROG_FULL_TYPE_RACH = "0" *) 
   (* C_PROG_FULL_TYPE_RDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WACH = "0" *) 
   (* C_PROG_FULL_TYPE_WDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WRCH = "0" *) 
   (* C_RACH_TYPE = "0" *) 
   (* C_RDCH_TYPE = "0" *) 
   (* C_RD_DATA_COUNT_WIDTH = "8" *) 
   (* C_RD_DEPTH = "256" *) 
   (* C_RD_FREQ = "1" *) 
   (* C_RD_PNTR_WIDTH = "8" *) 
   (* C_REG_SLICE_MODE_AXIS = "0" *) 
   (* C_REG_SLICE_MODE_RACH = "0" *) 
   (* C_REG_SLICE_MODE_RDCH = "0" *) 
   (* C_REG_SLICE_MODE_WACH = "0" *) 
   (* C_REG_SLICE_MODE_WDCH = "0" *) 
   (* C_REG_SLICE_MODE_WRCH = "0" *) 
   (* C_SYNCHRONIZER_STAGE = "6" *) 
   (* C_UNDERFLOW_LOW = "0" *) 
   (* C_USE_COMMON_OVERFLOW = "0" *) 
   (* C_USE_COMMON_UNDERFLOW = "0" *) 
   (* C_USE_DEFAULT_SETTINGS = "0" *) 
   (* C_USE_DOUT_RST = "1" *) 
   (* C_USE_ECC = "0" *) 
   (* C_USE_ECC_AXIS = "0" *) 
   (* C_USE_ECC_RACH = "0" *) 
   (* C_USE_ECC_RDCH = "0" *) 
   (* C_USE_ECC_WACH = "0" *) 
   (* C_USE_ECC_WDCH = "0" *) 
   (* C_USE_ECC_WRCH = "0" *) 
   (* C_USE_EMBEDDED_REG = "0" *) 
   (* C_USE_FIFO16_FLAGS = "0" *) 
   (* C_USE_FWFT_DATA_COUNT = "0" *) 
   (* C_USE_PIPELINE_REG = "0" *) 
   (* C_VALID_LOW = "0" *) 
   (* C_WACH_TYPE = "0" *) 
   (* C_WDCH_TYPE = "0" *) 
   (* C_WRCH_TYPE = "0" *) 
   (* C_WR_ACK_LOW = "0" *) 
   (* C_WR_DATA_COUNT_WIDTH = "8" *) 
   (* C_WR_DEPTH = "256" *) 
   (* C_WR_DEPTH_AXIS = "1024" *) 
   (* C_WR_DEPTH_RACH = "16" *) 
   (* C_WR_DEPTH_RDCH = "1024" *) 
   (* C_WR_DEPTH_WACH = "16" *) 
   (* C_WR_DEPTH_WDCH = "1024" *) 
   (* C_WR_DEPTH_WRCH = "16" *) 
   (* C_WR_FREQ = "1" *) 
   (* C_WR_PNTR_WIDTH = "8" *) 
   (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
   (* C_WR_PNTR_WIDTH_RACH = "4" *) 
   (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WACH = "4" *) 
   (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
   (* C_WR_RESPONSE_LATENCY = "1" *) 
   (* DONT_TOUCH *) 
   control_to_core_slave_axi_fifo_generator_v12_0 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[7:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout({n_0_U0,n_1_U0,n_2_U0,O1}),
        .empty(fifo_empty),
        .full(fifo_full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[3:0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[3:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[3:0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[3:0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[3:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[3:0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[3:0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[63:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[3:0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[7:0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(ar_ch_fc),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(m_aclk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(n_0_U0_i_2__2),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(br_fifo_reset),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(clk_ph_out),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[7:0]),
        .wr_en(pack_data_we),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
LUT3 #(
    .INIT(8'h40)) 
     U0_i_1__0
       (.I0(fifo_full),
        .I1(ar_ch_data_valid),
        .I2(Q),
        .O(pack_data_we));
(* SOFT_HLUTNM = "soft_lutpair11" *) 
   LUT2 #(
    .INIT(4'h2)) 
     U0_i_2__2
       (.I0(m_axi_arready),
        .I1(fifo_empty),
        .O(n_0_U0_i_2__2));
(* SOFT_HLUTNM = "soft_lutpair11" *) 
   LUT1 #(
    .INIT(2'h1)) 
     m_axi_arvalid_INST_0
       (.I0(fifo_empty),
        .O(m_axi_arvalid));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_async_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo__parameterized0
   (O2,
    fifo_full,
    wd_ch_fc,
    m_axi_wvalid,
    br_fifo_reset,
    clk_ph_out,
    m_aclk,
    din,
    wd_ch_data_valid,
    Q,
    m_axi_wready);
  output [37:0]O2;
  output fifo_full;
  output wd_ch_fc;
  output m_axi_wvalid;
  input br_fifo_reset;
  input clk_ph_out;
  input m_aclk;
  input [39:0]din;
  input wd_ch_data_valid;
  input [0:0]Q;
  input m_axi_wready;

  wire [37:0]O2;
  wire [0:0]Q;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [39:0]din;
  wire fifo_empty;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire n_0_U0;
  wire n_0_U0_i_2__3;
  wire n_1_U0;
  wire pack_data_we;
  wire wd_ch_data_valid;
  wire wd_ch_fc;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [8:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [8:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [8:0]NLW_U0_wr_data_count_UNCONNECTED;

(* C_ADD_NGC_CONSTRAINT = "0" *) 
   (* C_APPLICATION_TYPE_AXIS = "0" *) 
   (* C_APPLICATION_TYPE_RACH = "0" *) 
   (* C_APPLICATION_TYPE_RDCH = "0" *) 
   (* C_APPLICATION_TYPE_WACH = "0" *) 
   (* C_APPLICATION_TYPE_WDCH = "0" *) 
   (* C_APPLICATION_TYPE_WRCH = "0" *) 
   (* C_AXIS_TDATA_WIDTH = "64" *) 
   (* C_AXIS_TDEST_WIDTH = "4" *) 
   (* C_AXIS_TID_WIDTH = "8" *) 
   (* C_AXIS_TKEEP_WIDTH = "4" *) 
   (* C_AXIS_TSTRB_WIDTH = "4" *) 
   (* C_AXIS_TUSER_WIDTH = "4" *) 
   (* C_AXIS_TYPE = "0" *) 
   (* C_AXI_ADDR_WIDTH = "32" *) 
   (* C_AXI_ARUSER_WIDTH = "1" *) 
   (* C_AXI_AWUSER_WIDTH = "1" *) 
   (* C_AXI_BUSER_WIDTH = "1" *) 
   (* C_AXI_DATA_WIDTH = "64" *) 
   (* C_AXI_ID_WIDTH = "4" *) 
   (* C_AXI_LEN_WIDTH = "4" *) 
   (* C_AXI_LOCK_WIDTH = "4" *) 
   (* C_AXI_RUSER_WIDTH = "1" *) 
   (* C_AXI_TYPE = "0" *) 
   (* C_AXI_WUSER_WIDTH = "1" *) 
   (* C_COMMON_CLOCK = "0" *) 
   (* C_COUNT_TYPE = "0" *) 
   (* C_DATA_COUNT_WIDTH = "9" *) 
   (* C_DEFAULT_VALUE = "BlankString" *) 
   (* C_DIN_WIDTH = "40" *) 
   (* C_DIN_WIDTH_AXIS = "1" *) 
   (* C_DIN_WIDTH_RACH = "32" *) 
   (* C_DIN_WIDTH_RDCH = "64" *) 
   (* C_DIN_WIDTH_WACH = "32" *) 
   (* C_DIN_WIDTH_WDCH = "64" *) 
   (* C_DIN_WIDTH_WRCH = "2" *) 
   (* C_DOUT_RST_VAL = "0" *) 
   (* C_DOUT_WIDTH = "40" *) 
   (* C_ENABLE_RLOCS = "0" *) 
   (* C_ENABLE_RST_SYNC = "1" *) 
   (* C_ERROR_INJECTION_TYPE = "0" *) 
   (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
   (* C_FAMILY = "virtex7" *) 
   (* C_FULL_FLAGS_RST_VAL = "1" *) 
   (* C_HAS_ALMOST_EMPTY = "0" *) 
   (* C_HAS_ALMOST_FULL = "0" *) 
   (* C_HAS_AXIS_TDATA = "0" *) 
   (* C_HAS_AXIS_TDEST = "0" *) 
   (* C_HAS_AXIS_TID = "0" *) 
   (* C_HAS_AXIS_TKEEP = "0" *) 
   (* C_HAS_AXIS_TLAST = "0" *) 
   (* C_HAS_AXIS_TREADY = "1" *) 
   (* C_HAS_AXIS_TSTRB = "0" *) 
   (* C_HAS_AXIS_TUSER = "0" *) 
   (* C_HAS_AXI_ARUSER = "0" *) 
   (* C_HAS_AXI_AWUSER = "0" *) 
   (* C_HAS_AXI_BUSER = "0" *) 
   (* C_HAS_AXI_ID = "0" *) 
   (* C_HAS_AXI_RD_CHANNEL = "0" *) 
   (* C_HAS_AXI_RUSER = "0" *) 
   (* C_HAS_AXI_WR_CHANNEL = "0" *) 
   (* C_HAS_AXI_WUSER = "0" *) 
   (* C_HAS_BACKUP = "0" *) 
   (* C_HAS_DATA_COUNT = "0" *) 
   (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
   (* C_HAS_DATA_COUNTS_RACH = "0" *) 
   (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WACH = "0" *) 
   (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
   (* C_HAS_INT_CLK = "0" *) 
   (* C_HAS_MASTER_CE = "0" *) 
   (* C_HAS_MEMINIT_FILE = "0" *) 
   (* C_HAS_OVERFLOW = "0" *) 
   (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
   (* C_HAS_PROG_FLAGS_RACH = "0" *) 
   (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WACH = "0" *) 
   (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
   (* C_HAS_RD_DATA_COUNT = "0" *) 
   (* C_HAS_RD_RST = "0" *) 
   (* C_HAS_RST = "1" *) 
   (* C_HAS_SLAVE_CE = "0" *) 
   (* C_HAS_SRST = "0" *) 
   (* C_HAS_UNDERFLOW = "0" *) 
   (* C_HAS_VALID = "0" *) 
   (* C_HAS_WR_ACK = "0" *) 
   (* C_HAS_WR_DATA_COUNT = "0" *) 
   (* C_HAS_WR_RST = "0" *) 
   (* C_IMPLEMENTATION_TYPE = "2" *) 
   (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
   (* C_INIT_WR_PNTR_VAL = "0" *) 
   (* C_INTERFACE_TYPE = "0" *) 
   (* C_MEMORY_TYPE = "1" *) 
   (* C_MIF_FILE_NAME = "BlankString" *) 
   (* C_MSGON_VAL = "1" *) 
   (* C_OPTIMIZATION_MODE = "0" *) 
   (* C_OVERFLOW_LOW = "0" *) 
   (* C_POWER_SAVING_MODE = "0" *) 
   (* C_PRELOAD_LATENCY = "0" *) 
   (* C_PRELOAD_REGS = "1" *) 
   (* C_PRIM_FIFO_TYPE = "512x72" *) 
   (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
   (* C_PROG_EMPTY_TYPE = "0" *) 
   (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
   (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL = "384" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
   (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) 
   (* C_PROG_FULL_TYPE = "1" *) 
   (* C_PROG_FULL_TYPE_AXIS = "0" *) 
   (* C_PROG_FULL_TYPE_RACH = "0" *) 
   (* C_PROG_FULL_TYPE_RDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WACH = "0" *) 
   (* C_PROG_FULL_TYPE_WDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WRCH = "0" *) 
   (* C_RACH_TYPE = "0" *) 
   (* C_RDCH_TYPE = "0" *) 
   (* C_RD_DATA_COUNT_WIDTH = "9" *) 
   (* C_RD_DEPTH = "512" *) 
   (* C_RD_FREQ = "1" *) 
   (* C_RD_PNTR_WIDTH = "9" *) 
   (* C_REG_SLICE_MODE_AXIS = "0" *) 
   (* C_REG_SLICE_MODE_RACH = "0" *) 
   (* C_REG_SLICE_MODE_RDCH = "0" *) 
   (* C_REG_SLICE_MODE_WACH = "0" *) 
   (* C_REG_SLICE_MODE_WDCH = "0" *) 
   (* C_REG_SLICE_MODE_WRCH = "0" *) 
   (* C_SYNCHRONIZER_STAGE = "6" *) 
   (* C_UNDERFLOW_LOW = "0" *) 
   (* C_USE_COMMON_OVERFLOW = "0" *) 
   (* C_USE_COMMON_UNDERFLOW = "0" *) 
   (* C_USE_DEFAULT_SETTINGS = "0" *) 
   (* C_USE_DOUT_RST = "1" *) 
   (* C_USE_ECC = "0" *) 
   (* C_USE_ECC_AXIS = "0" *) 
   (* C_USE_ECC_RACH = "0" *) 
   (* C_USE_ECC_RDCH = "0" *) 
   (* C_USE_ECC_WACH = "0" *) 
   (* C_USE_ECC_WDCH = "0" *) 
   (* C_USE_ECC_WRCH = "0" *) 
   (* C_USE_EMBEDDED_REG = "0" *) 
   (* C_USE_FIFO16_FLAGS = "0" *) 
   (* C_USE_FWFT_DATA_COUNT = "0" *) 
   (* C_USE_PIPELINE_REG = "0" *) 
   (* C_VALID_LOW = "0" *) 
   (* C_WACH_TYPE = "0" *) 
   (* C_WDCH_TYPE = "0" *) 
   (* C_WRCH_TYPE = "0" *) 
   (* C_WR_ACK_LOW = "0" *) 
   (* C_WR_DATA_COUNT_WIDTH = "9" *) 
   (* C_WR_DEPTH = "512" *) 
   (* C_WR_DEPTH_AXIS = "1024" *) 
   (* C_WR_DEPTH_RACH = "16" *) 
   (* C_WR_DEPTH_RDCH = "1024" *) 
   (* C_WR_DEPTH_WACH = "16" *) 
   (* C_WR_DEPTH_WDCH = "1024" *) 
   (* C_WR_DEPTH_WRCH = "16" *) 
   (* C_WR_FREQ = "1" *) 
   (* C_WR_PNTR_WIDTH = "9" *) 
   (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
   (* C_WR_PNTR_WIDTH_RACH = "4" *) 
   (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WACH = "4" *) 
   (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
   (* C_WR_RESPONSE_LATENCY = "1" *) 
   (* DONT_TOUCH *) 
   control_to_core_slave_axi_fifo_generator_v12_0__parameterized0 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[8:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout({n_0_U0,n_1_U0,O2}),
        .empty(fifo_empty),
        .full(fifo_full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[3:0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[3:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[3:0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[3:0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[3:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[3:0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[3:0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[63:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[3:0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[7:0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(wd_ch_fc),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(m_aclk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[8:0]),
        .rd_en(n_0_U0_i_2__3),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(br_fifo_reset),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(clk_ph_out),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[8:0]),
        .wr_en(pack_data_we),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
LUT3 #(
    .INIT(8'h40)) 
     U0_i_1__1
       (.I0(fifo_full),
        .I1(wd_ch_data_valid),
        .I2(Q),
        .O(pack_data_we));
(* SOFT_HLUTNM = "soft_lutpair67" *) 
   LUT2 #(
    .INIT(4'h2)) 
     U0_i_2__3
       (.I0(m_axi_wready),
        .I1(fifo_empty),
        .O(n_0_U0_i_2__3));
(* SOFT_HLUTNM = "soft_lutpair67" *) 
   LUT1 #(
    .INIT(2'h1)) 
     m_axi_wvalid_INST_0
       (.I0(fifo_empty),
        .O(m_axi_wvalid));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_async_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo__parameterized1
   (fifo_empty,
    O1,
    O2,
    O3,
    O4,
    O5,
    O6,
    p_12_in,
    D,
    m_axi_rready,
    br_fifo_reset,
    m_aclk,
    clk_ph_out,
    din,
    unpack_data_re,
    Q,
    I1,
    tx_phy_ready,
    I2,
    I3,
    I4,
    O7,
    I5,
    I6,
    I7,
    I8,
    I9,
    m_axi_rvalid);
  output fifo_empty;
  output O1;
  output O2;
  output O3;
  output O4;
  output O5;
  output O6;
  output p_12_in;
  output [2:0]D;
  output m_axi_rready;
  input br_fifo_reset;
  input m_aclk;
  input clk_ph_out;
  input [35:0]din;
  input unpack_data_re;
  input [3:0]Q;
  input [1:0]I1;
  input tx_phy_ready;
  input [0:0]I2;
  input I3;
  input I4;
  input [2:0]O7;
  input I5;
  input I6;
  input I7;
  input I8;
  input I9;
  input m_axi_rvalid;

  wire [2:0]D;
  wire [1:0]I1;
  wire [0:0]I2;
  wire I3;
  wire I4;
  wire I5;
  wire I6;
  wire I7;
  wire I8;
  wire I9;
  wire O1;
  wire O2;
  wire O3;
  wire O4;
  wire O5;
  wire O6;
  wire [2:0]O7;
  wire [3:0]Q;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [35:0]din;
  wire fifo_empty;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_rready;
  wire m_axi_rvalid;
  wire n_0_U0_i_1__2;
  wire \n_0_tdm_data_out[10]_i_3 ;
  wire \n_0_tdm_data_out[11]_i_3 ;
  wire \n_0_tdm_data_out[12]_i_3 ;
  wire \n_0_tdm_data_out[13]_i_3 ;
  wire \n_0_tdm_data_out[14]_i_3 ;
  wire \n_0_tdm_data_out[6]_i_2 ;
  wire \n_0_tdm_data_out[7]_i_2 ;
  wire \n_0_tdm_data_out[8]_i_2 ;
  wire \n_0_tdm_data_out[9]_i_3 ;
  wire n_71_U0;
  wire p_12_in;
  wire tx_phy_ready;
  wire [35:0]unpack_data_in;
  wire unpack_data_re;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [8:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [8:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [8:0]NLW_U0_wr_data_count_UNCONNECTED;

(* C_ADD_NGC_CONSTRAINT = "0" *) 
   (* C_APPLICATION_TYPE_AXIS = "0" *) 
   (* C_APPLICATION_TYPE_RACH = "0" *) 
   (* C_APPLICATION_TYPE_RDCH = "0" *) 
   (* C_APPLICATION_TYPE_WACH = "0" *) 
   (* C_APPLICATION_TYPE_WDCH = "0" *) 
   (* C_APPLICATION_TYPE_WRCH = "0" *) 
   (* C_AXIS_TDATA_WIDTH = "64" *) 
   (* C_AXIS_TDEST_WIDTH = "4" *) 
   (* C_AXIS_TID_WIDTH = "8" *) 
   (* C_AXIS_TKEEP_WIDTH = "4" *) 
   (* C_AXIS_TSTRB_WIDTH = "4" *) 
   (* C_AXIS_TUSER_WIDTH = "4" *) 
   (* C_AXIS_TYPE = "0" *) 
   (* C_AXI_ADDR_WIDTH = "32" *) 
   (* C_AXI_ARUSER_WIDTH = "1" *) 
   (* C_AXI_AWUSER_WIDTH = "1" *) 
   (* C_AXI_BUSER_WIDTH = "1" *) 
   (* C_AXI_DATA_WIDTH = "64" *) 
   (* C_AXI_ID_WIDTH = "4" *) 
   (* C_AXI_LEN_WIDTH = "4" *) 
   (* C_AXI_LOCK_WIDTH = "4" *) 
   (* C_AXI_RUSER_WIDTH = "1" *) 
   (* C_AXI_TYPE = "0" *) 
   (* C_AXI_WUSER_WIDTH = "1" *) 
   (* C_COMMON_CLOCK = "0" *) 
   (* C_COUNT_TYPE = "0" *) 
   (* C_DATA_COUNT_WIDTH = "9" *) 
   (* C_DEFAULT_VALUE = "BlankString" *) 
   (* C_DIN_WIDTH = "36" *) 
   (* C_DIN_WIDTH_AXIS = "1" *) 
   (* C_DIN_WIDTH_RACH = "32" *) 
   (* C_DIN_WIDTH_RDCH = "64" *) 
   (* C_DIN_WIDTH_WACH = "32" *) 
   (* C_DIN_WIDTH_WDCH = "64" *) 
   (* C_DIN_WIDTH_WRCH = "2" *) 
   (* C_DOUT_RST_VAL = "0" *) 
   (* C_DOUT_WIDTH = "36" *) 
   (* C_ENABLE_RLOCS = "0" *) 
   (* C_ENABLE_RST_SYNC = "1" *) 
   (* C_ERROR_INJECTION_TYPE = "0" *) 
   (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
   (* C_FAMILY = "virtex7" *) 
   (* C_FULL_FLAGS_RST_VAL = "1" *) 
   (* C_HAS_ALMOST_EMPTY = "0" *) 
   (* C_HAS_ALMOST_FULL = "0" *) 
   (* C_HAS_AXIS_TDATA = "0" *) 
   (* C_HAS_AXIS_TDEST = "0" *) 
   (* C_HAS_AXIS_TID = "0" *) 
   (* C_HAS_AXIS_TKEEP = "0" *) 
   (* C_HAS_AXIS_TLAST = "0" *) 
   (* C_HAS_AXIS_TREADY = "1" *) 
   (* C_HAS_AXIS_TSTRB = "0" *) 
   (* C_HAS_AXIS_TUSER = "0" *) 
   (* C_HAS_AXI_ARUSER = "0" *) 
   (* C_HAS_AXI_AWUSER = "0" *) 
   (* C_HAS_AXI_BUSER = "0" *) 
   (* C_HAS_AXI_ID = "0" *) 
   (* C_HAS_AXI_RD_CHANNEL = "0" *) 
   (* C_HAS_AXI_RUSER = "0" *) 
   (* C_HAS_AXI_WR_CHANNEL = "0" *) 
   (* C_HAS_AXI_WUSER = "0" *) 
   (* C_HAS_BACKUP = "0" *) 
   (* C_HAS_DATA_COUNT = "0" *) 
   (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
   (* C_HAS_DATA_COUNTS_RACH = "0" *) 
   (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WACH = "0" *) 
   (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
   (* C_HAS_INT_CLK = "0" *) 
   (* C_HAS_MASTER_CE = "0" *) 
   (* C_HAS_MEMINIT_FILE = "0" *) 
   (* C_HAS_OVERFLOW = "0" *) 
   (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
   (* C_HAS_PROG_FLAGS_RACH = "0" *) 
   (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WACH = "0" *) 
   (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
   (* C_HAS_RD_DATA_COUNT = "0" *) 
   (* C_HAS_RD_RST = "0" *) 
   (* C_HAS_RST = "1" *) 
   (* C_HAS_SLAVE_CE = "0" *) 
   (* C_HAS_SRST = "0" *) 
   (* C_HAS_UNDERFLOW = "0" *) 
   (* C_HAS_VALID = "0" *) 
   (* C_HAS_WR_ACK = "0" *) 
   (* C_HAS_WR_DATA_COUNT = "0" *) 
   (* C_HAS_WR_RST = "0" *) 
   (* C_IMPLEMENTATION_TYPE = "2" *) 
   (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
   (* C_INIT_WR_PNTR_VAL = "0" *) 
   (* C_INTERFACE_TYPE = "0" *) 
   (* C_MEMORY_TYPE = "1" *) 
   (* C_MIF_FILE_NAME = "BlankString" *) 
   (* C_MSGON_VAL = "1" *) 
   (* C_OPTIMIZATION_MODE = "0" *) 
   (* C_OVERFLOW_LOW = "0" *) 
   (* C_POWER_SAVING_MODE = "0" *) 
   (* C_PRELOAD_LATENCY = "0" *) 
   (* C_PRELOAD_REGS = "1" *) 
   (* C_PRIM_FIFO_TYPE = "512x72" *) 
   (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
   (* C_PROG_EMPTY_TYPE = "0" *) 
   (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
   (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL = "384" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
   (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) 
   (* C_PROG_FULL_TYPE = "1" *) 
   (* C_PROG_FULL_TYPE_AXIS = "0" *) 
   (* C_PROG_FULL_TYPE_RACH = "0" *) 
   (* C_PROG_FULL_TYPE_RDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WACH = "0" *) 
   (* C_PROG_FULL_TYPE_WDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WRCH = "0" *) 
   (* C_RACH_TYPE = "0" *) 
   (* C_RDCH_TYPE = "0" *) 
   (* C_RD_DATA_COUNT_WIDTH = "9" *) 
   (* C_RD_DEPTH = "512" *) 
   (* C_RD_FREQ = "1" *) 
   (* C_RD_PNTR_WIDTH = "9" *) 
   (* C_REG_SLICE_MODE_AXIS = "0" *) 
   (* C_REG_SLICE_MODE_RACH = "0" *) 
   (* C_REG_SLICE_MODE_RDCH = "0" *) 
   (* C_REG_SLICE_MODE_WACH = "0" *) 
   (* C_REG_SLICE_MODE_WDCH = "0" *) 
   (* C_REG_SLICE_MODE_WRCH = "0" *) 
   (* C_SYNCHRONIZER_STAGE = "6" *) 
   (* C_UNDERFLOW_LOW = "0" *) 
   (* C_USE_COMMON_OVERFLOW = "0" *) 
   (* C_USE_COMMON_UNDERFLOW = "0" *) 
   (* C_USE_DEFAULT_SETTINGS = "0" *) 
   (* C_USE_DOUT_RST = "1" *) 
   (* C_USE_ECC = "0" *) 
   (* C_USE_ECC_AXIS = "0" *) 
   (* C_USE_ECC_RACH = "0" *) 
   (* C_USE_ECC_RDCH = "0" *) 
   (* C_USE_ECC_WACH = "0" *) 
   (* C_USE_ECC_WDCH = "0" *) 
   (* C_USE_ECC_WRCH = "0" *) 
   (* C_USE_EMBEDDED_REG = "0" *) 
   (* C_USE_FIFO16_FLAGS = "0" *) 
   (* C_USE_FWFT_DATA_COUNT = "0" *) 
   (* C_USE_PIPELINE_REG = "0" *) 
   (* C_VALID_LOW = "0" *) 
   (* C_WACH_TYPE = "0" *) 
   (* C_WDCH_TYPE = "0" *) 
   (* C_WRCH_TYPE = "0" *) 
   (* C_WR_ACK_LOW = "0" *) 
   (* C_WR_DATA_COUNT_WIDTH = "9" *) 
   (* C_WR_DEPTH = "512" *) 
   (* C_WR_DEPTH_AXIS = "1024" *) 
   (* C_WR_DEPTH_RACH = "16" *) 
   (* C_WR_DEPTH_RDCH = "1024" *) 
   (* C_WR_DEPTH_WACH = "16" *) 
   (* C_WR_DEPTH_WDCH = "1024" *) 
   (* C_WR_DEPTH_WRCH = "16" *) 
   (* C_WR_FREQ = "1" *) 
   (* C_WR_PNTR_WIDTH = "9" *) 
   (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
   (* C_WR_PNTR_WIDTH_RACH = "4" *) 
   (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WACH = "4" *) 
   (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
   (* C_WR_RESPONSE_LATENCY = "1" *) 
   (* DONT_TOUCH *) 
   control_to_core_slave_axi_fifo_generator_v12_0__parameterized1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[8:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(unpack_data_in),
        .empty(fifo_empty),
        .full(fifo_full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[3:0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[3:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[3:0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[3:0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[3:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[3:0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[3:0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[63:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[3:0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[7:0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(n_71_U0),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(clk_ph_out),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[8:0]),
        .rd_en(unpack_data_re),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(br_fifo_reset),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(m_aclk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[8:0]),
        .wr_en(n_0_U0_i_1__2),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
(* SOFT_HLUTNM = "soft_lutpair55" *) 
   LUT2 #(
    .INIT(4'h2)) 
     U0_i_1__2
       (.I0(m_axi_rvalid),
        .I1(fifo_full),
        .O(n_0_U0_i_1__2));
(* SOFT_HLUTNM = "soft_lutpair55" *) 
   LUT1 #(
    .INIT(2'h1)) 
     m_axi_rready_INST_0
       (.I0(fifo_full),
        .O(m_axi_rready));
LUT3 #(
    .INIT(8'h04)) 
     \slot_select[1]_i_2 
       (.I0(fifo_empty),
        .I1(tx_phy_ready),
        .I2(I2),
        .O(p_12_in));
(* SOFT_HLUTNM = "soft_lutpair48" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFCC808080)) 
     \tdm_data_out[10]_i_2 
       (.I0(Q[3]),
        .I1(I1[1]),
        .I2(unpack_data_in[31]),
        .I3(Q[0]),
        .I4(unpack_data_in[4]),
        .I5(\n_0_tdm_data_out[10]_i_3 ),
        .O(O2));
(* SOFT_HLUTNM = "soft_lutpair53" *) 
   LUT5 #(
    .INIT(32'hF8008800)) 
     \tdm_data_out[10]_i_3 
       (.I0(unpack_data_in[13]),
        .I1(Q[1]),
        .I2(unpack_data_in[22]),
        .I3(I1[1]),
        .I4(Q[2]),
        .O(\n_0_tdm_data_out[10]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair49" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFCC808080)) 
     \tdm_data_out[11]_i_2 
       (.I0(Q[3]),
        .I1(I1[1]),
        .I2(unpack_data_in[32]),
        .I3(Q[0]),
        .I4(unpack_data_in[5]),
        .I5(\n_0_tdm_data_out[11]_i_3 ),
        .O(O3));
(* SOFT_HLUTNM = "soft_lutpair53" *) 
   LUT5 #(
    .INIT(32'hF8008800)) 
     \tdm_data_out[11]_i_3 
       (.I0(unpack_data_in[14]),
        .I1(Q[1]),
        .I2(unpack_data_in[23]),
        .I3(I1[1]),
        .I4(Q[2]),
        .O(\n_0_tdm_data_out[11]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair51" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFCC808080)) 
     \tdm_data_out[12]_i_2 
       (.I0(Q[3]),
        .I1(I1[1]),
        .I2(unpack_data_in[33]),
        .I3(Q[0]),
        .I4(unpack_data_in[6]),
        .I5(\n_0_tdm_data_out[12]_i_3 ),
        .O(O4));
(* SOFT_HLUTNM = "soft_lutpair52" *) 
   LUT5 #(
    .INIT(32'hF8008800)) 
     \tdm_data_out[12]_i_3 
       (.I0(unpack_data_in[15]),
        .I1(Q[1]),
        .I2(unpack_data_in[24]),
        .I3(I1[1]),
        .I4(Q[2]),
        .O(\n_0_tdm_data_out[12]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair51" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFCC808080)) 
     \tdm_data_out[13]_i_2 
       (.I0(Q[3]),
        .I1(I1[1]),
        .I2(unpack_data_in[34]),
        .I3(Q[0]),
        .I4(unpack_data_in[7]),
        .I5(\n_0_tdm_data_out[13]_i_3 ),
        .O(O5));
(* SOFT_HLUTNM = "soft_lutpair54" *) 
   LUT5 #(
    .INIT(32'hF8008800)) 
     \tdm_data_out[13]_i_3 
       (.I0(unpack_data_in[16]),
        .I1(Q[1]),
        .I2(unpack_data_in[25]),
        .I3(I1[1]),
        .I4(Q[2]),
        .O(\n_0_tdm_data_out[13]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair49" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFCC808080)) 
     \tdm_data_out[14]_i_2 
       (.I0(Q[3]),
        .I1(I1[1]),
        .I2(unpack_data_in[35]),
        .I3(Q[0]),
        .I4(unpack_data_in[8]),
        .I5(\n_0_tdm_data_out[14]_i_3 ),
        .O(O6));
(* SOFT_HLUTNM = "soft_lutpair54" *) 
   LUT5 #(
    .INIT(32'hF8008800)) 
     \tdm_data_out[14]_i_3 
       (.I0(unpack_data_in[17]),
        .I1(Q[1]),
        .I2(unpack_data_in[26]),
        .I3(I1[1]),
        .I4(Q[2]),
        .O(\n_0_tdm_data_out[14]_i_3 ));
LUT6 #(
    .INIT(64'hFFFFFEEEFEEEFEEE)) 
     \tdm_data_out[6]_i_1 
       (.I0(\n_0_tdm_data_out[6]_i_2 ),
        .I1(I6),
        .I2(unpack_data_in[18]),
        .I3(I4),
        .I4(I1[0]),
        .I5(O7[0]),
        .O(D[0]));
(* SOFT_HLUTNM = "soft_lutpair50" *) 
   LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
     \tdm_data_out[6]_i_2 
       (.I0(unpack_data_in[0]),
        .I1(I7),
        .I2(I8),
        .I3(unpack_data_in[9]),
        .I4(I9),
        .I5(unpack_data_in[27]),
        .O(\n_0_tdm_data_out[6]_i_2 ));
LUT6 #(
    .INIT(64'hFFFFFEEEFEEEFEEE)) 
     \tdm_data_out[7]_i_1 
       (.I0(\n_0_tdm_data_out[7]_i_2 ),
        .I1(I3),
        .I2(unpack_data_in[19]),
        .I3(I4),
        .I4(I1[0]),
        .I5(O7[1]),
        .O(D[1]));
(* SOFT_HLUTNM = "soft_lutpair50" *) 
   LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
     \tdm_data_out[7]_i_2 
       (.I0(unpack_data_in[1]),
        .I1(I7),
        .I2(I8),
        .I3(unpack_data_in[10]),
        .I4(I9),
        .I5(unpack_data_in[28]),
        .O(\n_0_tdm_data_out[7]_i_2 ));
LUT6 #(
    .INIT(64'hFFFFFEEEFEEEFEEE)) 
     \tdm_data_out[8]_i_1 
       (.I0(\n_0_tdm_data_out[8]_i_2 ),
        .I1(I5),
        .I2(unpack_data_in[20]),
        .I3(I4),
        .I4(I1[0]),
        .I5(O7[2]),
        .O(D[2]));
LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
     \tdm_data_out[8]_i_2 
       (.I0(unpack_data_in[2]),
        .I1(I7),
        .I2(I8),
        .I3(unpack_data_in[11]),
        .I4(I9),
        .I5(unpack_data_in[29]),
        .O(\n_0_tdm_data_out[8]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair48" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFCC808080)) 
     \tdm_data_out[9]_i_2 
       (.I0(Q[3]),
        .I1(I1[1]),
        .I2(unpack_data_in[30]),
        .I3(Q[0]),
        .I4(unpack_data_in[3]),
        .I5(\n_0_tdm_data_out[9]_i_3 ),
        .O(O1));
(* SOFT_HLUTNM = "soft_lutpair52" *) 
   LUT5 #(
    .INIT(32'hF8008800)) 
     \tdm_data_out[9]_i_3 
       (.I0(unpack_data_in[12]),
        .I1(Q[1]),
        .I2(unpack_data_in[21]),
        .I3(I1[1]),
        .I4(Q[2]),
        .O(\n_0_tdm_data_out[9]_i_3 ));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_async_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo__parameterized2
   (dout,
    fifo_empty,
    int_ch1_ready5,
    m_axi_bready,
    br_fifo_reset,
    m_aclk,
    clk_ph_out,
    I1,
    fifo_re,
    tx_phy_ready,
    Q,
    m_axi_bvalid);
  output [2:0]dout;
  output fifo_empty;
  output int_ch1_ready5;
  output m_axi_bready;
  input br_fifo_reset;
  input m_aclk;
  input clk_ph_out;
  input [2:0]I1;
  input fifo_re;
  input tx_phy_ready;
  input [0:0]Q;
  input m_axi_bvalid;

  wire [2:0]I1;
  wire [0:0]Q;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [2:0]dout;
  wire fifo_empty;
  wire fifo_full;
  wire fifo_re;
  wire int_ch1_ready5;
  wire m_aclk;
  wire m_axi_bready;
  wire m_axi_bvalid;
  wire n_0_U0_i_1__3;
  wire n_35_U0;
  wire tx_phy_ready;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [7:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [7:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [3:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [7:0]NLW_U0_wr_data_count_UNCONNECTED;

(* C_ADD_NGC_CONSTRAINT = "0" *) 
   (* C_APPLICATION_TYPE_AXIS = "0" *) 
   (* C_APPLICATION_TYPE_RACH = "0" *) 
   (* C_APPLICATION_TYPE_RDCH = "0" *) 
   (* C_APPLICATION_TYPE_WACH = "0" *) 
   (* C_APPLICATION_TYPE_WDCH = "0" *) 
   (* C_APPLICATION_TYPE_WRCH = "0" *) 
   (* C_AXIS_TDATA_WIDTH = "64" *) 
   (* C_AXIS_TDEST_WIDTH = "4" *) 
   (* C_AXIS_TID_WIDTH = "8" *) 
   (* C_AXIS_TKEEP_WIDTH = "4" *) 
   (* C_AXIS_TSTRB_WIDTH = "4" *) 
   (* C_AXIS_TUSER_WIDTH = "4" *) 
   (* C_AXIS_TYPE = "0" *) 
   (* C_AXI_ADDR_WIDTH = "32" *) 
   (* C_AXI_ARUSER_WIDTH = "1" *) 
   (* C_AXI_AWUSER_WIDTH = "1" *) 
   (* C_AXI_BUSER_WIDTH = "1" *) 
   (* C_AXI_DATA_WIDTH = "64" *) 
   (* C_AXI_ID_WIDTH = "4" *) 
   (* C_AXI_LEN_WIDTH = "4" *) 
   (* C_AXI_LOCK_WIDTH = "4" *) 
   (* C_AXI_RUSER_WIDTH = "1" *) 
   (* C_AXI_TYPE = "0" *) 
   (* C_AXI_WUSER_WIDTH = "1" *) 
   (* C_COMMON_CLOCK = "0" *) 
   (* C_COUNT_TYPE = "0" *) 
   (* C_DATA_COUNT_WIDTH = "8" *) 
   (* C_DEFAULT_VALUE = "BlankString" *) 
   (* C_DIN_WIDTH = "3" *) 
   (* C_DIN_WIDTH_AXIS = "1" *) 
   (* C_DIN_WIDTH_RACH = "32" *) 
   (* C_DIN_WIDTH_RDCH = "64" *) 
   (* C_DIN_WIDTH_WACH = "32" *) 
   (* C_DIN_WIDTH_WDCH = "64" *) 
   (* C_DIN_WIDTH_WRCH = "2" *) 
   (* C_DOUT_RST_VAL = "0" *) 
   (* C_DOUT_WIDTH = "3" *) 
   (* C_ENABLE_RLOCS = "0" *) 
   (* C_ENABLE_RST_SYNC = "1" *) 
   (* C_ERROR_INJECTION_TYPE = "0" *) 
   (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
   (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
   (* C_FAMILY = "virtex7" *) 
   (* C_FULL_FLAGS_RST_VAL = "1" *) 
   (* C_HAS_ALMOST_EMPTY = "0" *) 
   (* C_HAS_ALMOST_FULL = "0" *) 
   (* C_HAS_AXIS_TDATA = "0" *) 
   (* C_HAS_AXIS_TDEST = "0" *) 
   (* C_HAS_AXIS_TID = "0" *) 
   (* C_HAS_AXIS_TKEEP = "0" *) 
   (* C_HAS_AXIS_TLAST = "0" *) 
   (* C_HAS_AXIS_TREADY = "1" *) 
   (* C_HAS_AXIS_TSTRB = "0" *) 
   (* C_HAS_AXIS_TUSER = "0" *) 
   (* C_HAS_AXI_ARUSER = "0" *) 
   (* C_HAS_AXI_AWUSER = "0" *) 
   (* C_HAS_AXI_BUSER = "0" *) 
   (* C_HAS_AXI_ID = "0" *) 
   (* C_HAS_AXI_RD_CHANNEL = "0" *) 
   (* C_HAS_AXI_RUSER = "0" *) 
   (* C_HAS_AXI_WR_CHANNEL = "0" *) 
   (* C_HAS_AXI_WUSER = "0" *) 
   (* C_HAS_BACKUP = "0" *) 
   (* C_HAS_DATA_COUNT = "0" *) 
   (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
   (* C_HAS_DATA_COUNTS_RACH = "0" *) 
   (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WACH = "0" *) 
   (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
   (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
   (* C_HAS_INT_CLK = "0" *) 
   (* C_HAS_MASTER_CE = "0" *) 
   (* C_HAS_MEMINIT_FILE = "0" *) 
   (* C_HAS_OVERFLOW = "0" *) 
   (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
   (* C_HAS_PROG_FLAGS_RACH = "0" *) 
   (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WACH = "0" *) 
   (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
   (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
   (* C_HAS_RD_DATA_COUNT = "0" *) 
   (* C_HAS_RD_RST = "0" *) 
   (* C_HAS_RST = "1" *) 
   (* C_HAS_SLAVE_CE = "0" *) 
   (* C_HAS_SRST = "0" *) 
   (* C_HAS_UNDERFLOW = "0" *) 
   (* C_HAS_VALID = "0" *) 
   (* C_HAS_WR_ACK = "0" *) 
   (* C_HAS_WR_DATA_COUNT = "0" *) 
   (* C_HAS_WR_RST = "0" *) 
   (* C_IMPLEMENTATION_TYPE = "2" *) 
   (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
   (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
   (* C_INIT_WR_PNTR_VAL = "0" *) 
   (* C_INTERFACE_TYPE = "0" *) 
   (* C_MEMORY_TYPE = "2" *) 
   (* C_MIF_FILE_NAME = "BlankString" *) 
   (* C_MSGON_VAL = "1" *) 
   (* C_OPTIMIZATION_MODE = "0" *) 
   (* C_OVERFLOW_LOW = "0" *) 
   (* C_POWER_SAVING_MODE = "0" *) 
   (* C_PRELOAD_LATENCY = "0" *) 
   (* C_PRELOAD_REGS = "1" *) 
   (* C_PRIM_FIFO_TYPE = "512x72" *) 
   (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) 
   (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
   (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
   (* C_PROG_EMPTY_TYPE = "0" *) 
   (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
   (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
   (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL = "128" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
   (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
   (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) 
   (* C_PROG_FULL_TYPE = "1" *) 
   (* C_PROG_FULL_TYPE_AXIS = "0" *) 
   (* C_PROG_FULL_TYPE_RACH = "0" *) 
   (* C_PROG_FULL_TYPE_RDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WACH = "0" *) 
   (* C_PROG_FULL_TYPE_WDCH = "0" *) 
   (* C_PROG_FULL_TYPE_WRCH = "0" *) 
   (* C_RACH_TYPE = "0" *) 
   (* C_RDCH_TYPE = "0" *) 
   (* C_RD_DATA_COUNT_WIDTH = "8" *) 
   (* C_RD_DEPTH = "256" *) 
   (* C_RD_FREQ = "1" *) 
   (* C_RD_PNTR_WIDTH = "8" *) 
   (* C_REG_SLICE_MODE_AXIS = "0" *) 
   (* C_REG_SLICE_MODE_RACH = "0" *) 
   (* C_REG_SLICE_MODE_RDCH = "0" *) 
   (* C_REG_SLICE_MODE_WACH = "0" *) 
   (* C_REG_SLICE_MODE_WDCH = "0" *) 
   (* C_REG_SLICE_MODE_WRCH = "0" *) 
   (* C_SYNCHRONIZER_STAGE = "6" *) 
   (* C_UNDERFLOW_LOW = "0" *) 
   (* C_USE_COMMON_OVERFLOW = "0" *) 
   (* C_USE_COMMON_UNDERFLOW = "0" *) 
   (* C_USE_DEFAULT_SETTINGS = "0" *) 
   (* C_USE_DOUT_RST = "1" *) 
   (* C_USE_ECC = "0" *) 
   (* C_USE_ECC_AXIS = "0" *) 
   (* C_USE_ECC_RACH = "0" *) 
   (* C_USE_ECC_RDCH = "0" *) 
   (* C_USE_ECC_WACH = "0" *) 
   (* C_USE_ECC_WDCH = "0" *) 
   (* C_USE_ECC_WRCH = "0" *) 
   (* C_USE_EMBEDDED_REG = "0" *) 
   (* C_USE_FIFO16_FLAGS = "0" *) 
   (* C_USE_FWFT_DATA_COUNT = "0" *) 
   (* C_USE_PIPELINE_REG = "0" *) 
   (* C_VALID_LOW = "0" *) 
   (* C_WACH_TYPE = "0" *) 
   (* C_WDCH_TYPE = "0" *) 
   (* C_WRCH_TYPE = "0" *) 
   (* C_WR_ACK_LOW = "0" *) 
   (* C_WR_DATA_COUNT_WIDTH = "8" *) 
   (* C_WR_DEPTH = "256" *) 
   (* C_WR_DEPTH_AXIS = "1024" *) 
   (* C_WR_DEPTH_RACH = "16" *) 
   (* C_WR_DEPTH_RDCH = "1024" *) 
   (* C_WR_DEPTH_WACH = "16" *) 
   (* C_WR_DEPTH_WDCH = "1024" *) 
   (* C_WR_DEPTH_WRCH = "16" *) 
   (* C_WR_FREQ = "1" *) 
   (* C_WR_PNTR_WIDTH = "8" *) 
   (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
   (* C_WR_PNTR_WIDTH_RACH = "4" *) 
   (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WACH = "4" *) 
   (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
   (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
   (* C_WR_RESPONSE_LATENCY = "1" *) 
   (* DONT_TOUCH *) 
   control_to_core_slave_axi_fifo_generator_v12_0__parameterized2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[7:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(I1),
        .dout(dout),
        .empty(fifo_empty),
        .full(fifo_full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[3:0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[3:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[3:0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[3:0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[3:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[3:0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid({1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[3:0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[63:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[3:0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[7:0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(n_35_U0),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(clk_ph_out),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[7:0]),
        .rd_en(fifo_re),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(br_fifo_reset),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[3:0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[3:0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tid({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(m_aclk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[7:0]),
        .wr_en(n_0_U0_i_1__3),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
(* SOFT_HLUTNM = "soft_lutpair36" *) 
   LUT2 #(
    .INIT(4'h2)) 
     U0_i_1__3
       (.I0(m_axi_bvalid),
        .I1(fifo_full),
        .O(n_0_U0_i_1__3));
(* SOFT_HLUTNM = "soft_lutpair36" *) 
   LUT1 #(
    .INIT(2'h1)) 
     m_axi_bready_INST_0
       (.I0(fifo_full),
        .O(m_axi_bready));
LUT3 #(
    .INIT(8'h04)) 
     \slot_select[2]_i_3 
       (.I0(fifo_empty),
        .I1(tx_phy_ready),
        .I2(Q),
        .O(int_ch1_ready5));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_awr_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo
   (O1,
    fifo_full,
    ar_ch_fc,
    m_axi_arvalid,
    br_fifo_reset,
    clk_ph_out,
    m_aclk,
    Q,
    ar_ch_data_valid,
    m_axi_arready,
    E,
    rx_user_reset);
  output [44:0]O1;
  output fifo_full;
  output ar_ch_fc;
  output m_axi_arvalid;
  input br_fifo_reset;
  input clk_ph_out;
  input m_aclk;
  input [11:0]Q;
  input ar_ch_data_valid;
  input m_axi_arready;
  input [0:0]E;
  input rx_user_reset;

  wire [0:0]E;
  wire [44:0]O1;
  wire [11:0]Q;
  wire ar_ch_data_valid;
  wire ar_ch_fc;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire p_0_in;
  wire [35:0]pack_data_out;
  wire rx_user_reset;

control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo_76 axi_chip2chip_async_fifo_inst
       (.O1(O1),
        .Q(p_0_in),
        .ar_ch_data_valid(ar_ch_data_valid),
        .ar_ch_fc(ar_ch_fc),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .din({Q,pack_data_out}),
        .fifo_full(fifo_full),
        .m_aclk(m_aclk),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid));
control_to_core_slave_axi_axi_chip2chip_v4_2_packer_77 axi_chip2chip_packer_inst
       (.E(E),
        .O1(p_0_in),
        .Q(Q),
        .clk_ph_out(clk_ph_out),
        .din(pack_data_out),
        .rx_user_reset(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_awr_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo_0
   (dout,
    fifo_full,
    aw_ch_fc,
    m_axi_awvalid,
    br_fifo_reset,
    clk_ph_out,
    m_aclk,
    Q,
    aw_ch_data_valid,
    m_axi_awready,
    E,
    rx_user_reset);
  output [44:0]dout;
  output fifo_full;
  output aw_ch_fc;
  output m_axi_awvalid;
  input br_fifo_reset;
  input clk_ph_out;
  input m_aclk;
  input [11:0]Q;
  input aw_ch_data_valid;
  input m_axi_awready;
  input [0:0]E;
  input rx_user_reset;

  wire [0:0]E;
  wire [11:0]Q;
  wire aw_ch_data_valid;
  wire aw_ch_fc;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [44:0]dout;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire p_0_in;
  wire [35:0]pack_data_out;
  wire rx_user_reset;

control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo axi_chip2chip_async_fifo_inst
       (.Q(p_0_in),
        .aw_ch_data_valid(aw_ch_data_valid),
        .aw_ch_fc(aw_ch_fc),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .din({Q,pack_data_out}),
        .dout(dout),
        .fifo_full(fifo_full),
        .m_aclk(m_aclk),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid));
control_to_core_slave_axi_axi_chip2chip_v4_2_packer axi_chip2chip_packer_inst
       (.E(E),
        .O1(p_0_in),
        .Q(Q),
        .clk_ph_out(clk_ph_out),
        .din(pack_data_out),
        .rx_user_reset(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_awr_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo__parameterized0
   (O2,
    fifo_full,
    wd_ch_fc,
    m_axi_wvalid,
    br_fifo_reset,
    clk_ph_out,
    m_aclk,
    D,
    wd_ch_data_valid,
    m_axi_wready,
    E,
    rx_user_reset);
  output [37:0]O2;
  output fifo_full;
  output wd_ch_fc;
  output m_axi_wvalid;
  input br_fifo_reset;
  input clk_ph_out;
  input m_aclk;
  input [9:0]D;
  input wd_ch_data_valid;
  input m_axi_wready;
  input [0:0]E;
  input rx_user_reset;

  wire [9:0]D;
  wire [0:0]E;
  wire [37:0]O2;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire fifo_full;
  wire m_aclk;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire p_0_in;
  wire [29:0]pack_data_out;
  wire rx_user_reset;
  wire wd_ch_data_valid;
  wire wd_ch_fc;

control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo__parameterized0 axi_chip2chip_async_fifo_inst
       (.O2(O2),
        .Q(p_0_in),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .din({D,pack_data_out}),
        .fifo_full(fifo_full),
        .m_aclk(m_aclk),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .wd_ch_data_valid(wd_ch_data_valid),
        .wd_ch_fc(wd_ch_fc));
control_to_core_slave_axi_axi_chip2chip_v4_2_packer__parameterized0 axi_chip2chip_packer_inst
       (.D(D),
        .E(E),
        .Q(p_0_in),
        .clk_ph_out(clk_ph_out),
        .din(pack_data_out),
        .rx_user_reset(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_awr_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo__parameterized1
   (fifo_empty,
    Q,
    O1,
    O2,
    O3,
    O4,
    O5,
    O6,
    p_12_in,
    D,
    m_axi_rready,
    br_fifo_reset,
    m_aclk,
    clk_ph_out,
    din,
    rd_ch_data_ready,
    I1,
    tx_phy_ready,
    I2,
    I3,
    I4,
    O7,
    I5,
    I6,
    I7,
    I8,
    I9,
    m_axi_rvalid,
    rx_user_reset,
    E);
  output fifo_empty;
  output [3:0]Q;
  output O1;
  output O2;
  output O3;
  output O4;
  output O5;
  output O6;
  output p_12_in;
  output [2:0]D;
  output m_axi_rready;
  input br_fifo_reset;
  input m_aclk;
  input clk_ph_out;
  input [35:0]din;
  input rd_ch_data_ready;
  input [1:0]I1;
  input tx_phy_ready;
  input [0:0]I2;
  input I3;
  input I4;
  input [2:0]O7;
  input I5;
  input I6;
  input I7;
  input I8;
  input I9;
  input m_axi_rvalid;
  input rx_user_reset;
  input [0:0]E;

  wire [2:0]D;
  wire [0:0]E;
  wire [1:0]I1;
  wire [0:0]I2;
  wire I3;
  wire I4;
  wire I5;
  wire I6;
  wire I7;
  wire I8;
  wire I9;
  wire O1;
  wire O2;
  wire O3;
  wire O4;
  wire O5;
  wire O6;
  wire [2:0]O7;
  wire [3:0]Q;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [35:0]din;
  wire fifo_empty;
  wire m_aclk;
  wire m_axi_rready;
  wire m_axi_rvalid;
  wire p_12_in;
  wire rd_ch_data_ready;
  wire rx_user_reset;
  wire tx_phy_ready;
  wire unpack_data_re;

control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo__parameterized1 axi_chip2chip_async_fifo_inst
       (.D(D),
        .I1(I1),
        .I2(I2),
        .I3(I3),
        .I4(I4),
        .I5(I5),
        .I6(I6),
        .I7(I7),
        .I8(I8),
        .I9(I9),
        .O1(O1),
        .O2(O2),
        .O3(O3),
        .O4(O4),
        .O5(O5),
        .O6(O6),
        .O7(O7),
        .Q(Q),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .din(din),
        .fifo_empty(fifo_empty),
        .m_aclk(m_aclk),
        .m_axi_rready(m_axi_rready),
        .m_axi_rvalid(m_axi_rvalid),
        .p_12_in(p_12_in),
        .tx_phy_ready(tx_phy_ready),
        .unpack_data_re(unpack_data_re));
control_to_core_slave_axi_axi_chip2chip_v4_2_unpacker__parameterized1 axi_chip2chip_unpacker_inst
       (.E(E),
        .Q(Q),
        .clk_ph_out(clk_ph_out),
        .fifo_empty(fifo_empty),
        .rd_ch_data_ready(rd_ch_data_ready),
        .rx_user_reset(rx_user_reset),
        .unpack_data_re(unpack_data_re));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_b_fifo" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_b_fifo
   (dout,
    fifo_empty,
    int_ch1_ready5,
    m_axi_bready,
    br_fifo_reset,
    m_aclk,
    clk_ph_out,
    I1,
    fifo_re,
    tx_phy_ready,
    Q,
    m_axi_bvalid);
  output [2:0]dout;
  output fifo_empty;
  output int_ch1_ready5;
  output m_axi_bready;
  input br_fifo_reset;
  input m_aclk;
  input clk_ph_out;
  input [2:0]I1;
  input fifo_re;
  input tx_phy_ready;
  input [0:0]Q;
  input m_axi_bvalid;

  wire [2:0]I1;
  wire [0:0]Q;
  wire br_fifo_reset;
  wire clk_ph_out;
  wire [2:0]dout;
  wire fifo_empty;
  wire fifo_re;
  wire int_ch1_ready5;
  wire m_aclk;
  wire m_axi_bready;
  wire m_axi_bvalid;
  wire tx_phy_ready;

control_to_core_slave_axi_axi_chip2chip_v4_2_async_fifo__parameterized2 axi_chip2chip_async_fifo_inst
       (.I1(I1),
        .Q(Q),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .dout(dout),
        .fifo_empty(fifo_empty),
        .fifo_re(fifo_re),
        .int_ch1_ready5(int_ch1_ready5),
        .m_aclk(m_aclk),
        .m_axi_bready(m_axi_bready),
        .m_axi_bvalid(m_axi_bvalid),
        .tx_phy_ready(tx_phy_ready));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_ch0_ctrl" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_ch0_ctrl
   (send_ch0,
    O1,
    D,
    O2,
    O3,
    O4,
    AR,
    O5,
    axi_c2c_m2s_intr_out,
    O6,
    O7,
    calib_pattern,
    send_intr6_out,
    clk_ph_out,
    send_ch01_out,
    rx_user_reset,
    I2,
    Q,
    I1,
    ar_ch_fc,
    I3,
    wd_ch_fc,
    I4,
    I5,
    I6,
    I7,
    aw_ch_fc,
    dout,
    m_aresetn,
    rx_intr_data,
    I8,
    m_aclk,
    tx_ch0_ready,
    axi_c2c_s2m_intr_in,
    E,
    tx_phy_ctrl,
    I9,
    I10);
  output send_ch0;
  output O1;
  output [13:0]D;
  output O2;
  output O3;
  output O4;
  output [0:0]AR;
  output [0:0]O5;
  output [3:0]axi_c2c_m2s_intr_out;
  output O6;
  output [2:0]O7;
  output [0:0]calib_pattern;
  input send_intr6_out;
  input clk_ph_out;
  input send_ch01_out;
  input rx_user_reset;
  input I2;
  input [3:0]Q;
  input I1;
  input ar_ch_fc;
  input I3;
  input wd_ch_fc;
  input I4;
  input I5;
  input I6;
  input I7;
  input aw_ch_fc;
  input [2:0]dout;
  input m_aresetn;
  input rx_intr_data;
  input [3:0]I8;
  input m_aclk;
  input tx_ch0_ready;
  input [3:0]axi_c2c_s2m_intr_in;
  input [0:0]E;
  input [1:0]tx_phy_ctrl;
  input [0:0]I9;
  input I10;

  wire [0:0]AR;
  wire [13:0]D;
  wire [0:0]E;
  wire I1;
  wire I10;
  wire I2;
  wire I3;
  wire I4;
  wire I5;
  wire I6;
  wire I7;
  wire [3:0]I8;
  wire [0:0]I9;
  wire O1;
  wire O2;
  wire O3;
  wire O4;
  wire [0:0]O5;
  wire O6;
  wire [2:0]O7;
  wire [3:0]Q;
  wire ar_ch_fc;
  wire aw_ch_fc;
  wire [3:0]axi_c2c_m2s_intr_out;
  wire [3:0]axi_c2c_s2m_intr_in;
  wire [0:0]calib_pattern;
  wire clk_ph_out;
  wire [2:0]dout;
  wire [3:0]intr_data;
  wire m_aclk;
  wire m_aresetn;
  wire \n_0_FSM_sequential_calib_intr_gen.cal_nibble[0]_i_1 ;
  wire \n_0_FSM_sequential_calib_intr_gen.cal_nibble[1]_i_1 ;
  wire \n_0_FSM_sequential_calib_intr_gen.cal_nibble[2]_i_1 ;
(* RTL_KEEP = "yes" *)   wire \n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ;
(* RTL_KEEP = "yes" *)   wire \n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ;
(* RTL_KEEP = "yes" *)   wire \n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ;
  wire n_0_axi_chip2chip_sync_cell_intr_out_inst;
  wire \n_0_calib_intr_gen.send_intr_reg ;
  wire \n_0_calib_intr_gen.tx_ch0_data[10]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[11]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[4]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[5]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[6]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[7]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[8]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data[9]_i_1 ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[10] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[11] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[3] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[4] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[5] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[6] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[7] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[8] ;
  wire \n_0_calib_intr_gen.tx_ch0_data_reg[9] ;
  wire \n_0_calib_intr_gen.tx_ch0_valid_i_1 ;
  wire n_1_axi_chip2chip_sync_cell_intr_out_inst;
  wire n_2_axi_chip2chip_sync_cell_intr_out_inst;
  wire n_3_axi_chip2chip_sync_cell_intr_out_inst;
  wire n_4_axi_chip2chip_sync_cell_intr_in_inst;
  wire [3:0]p_1_in;
  wire rx_intr_data;
  wire rx_user_reset;
  wire send_calib;
  wire send_ch0;
  wire send_ch01_out;
  wire send_intr6_out;
  wire [3:0]sync_flop_5;
  wire tx_ch0_ready;
  wire [1:0]tx_phy_ctrl;
  wire wd_ch_fc;

LUT6 #(
    .INIT(64'hFFFFFFFFFF0002FF)) 
     \FSM_sequential_calib_intr_gen.cal_nibble[0]_i_1 
       (.I0(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(tx_phy_ctrl[1]),
        .I4(tx_phy_ctrl[0]),
        .I5(I10),
        .O(\n_0_FSM_sequential_calib_intr_gen.cal_nibble[0]_i_1 ));
LUT6 #(
    .INIT(64'h00000000FFFF2000)) 
     \FSM_sequential_calib_intr_gen.cal_nibble[1]_i_1 
       (.I0(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I3(tx_phy_ctrl[1]),
        .I4(tx_phy_ctrl[0]),
        .I5(I10),
        .O(\n_0_FSM_sequential_calib_intr_gen.cal_nibble[1]_i_1 ));
LUT6 #(
    .INIT(64'h00000000000000B0)) 
     \FSM_sequential_calib_intr_gen.cal_nibble[2]_i_1 
       (.I0(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(tx_phy_ctrl[1]),
        .I3(tx_phy_ctrl[0]),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I5(I10),
        .O(\n_0_FSM_sequential_calib_intr_gen.cal_nibble[2]_i_1 ));
(* KEEP = "yes" *) 
   FDRE \FSM_sequential_calib_intr_gen.cal_nibble_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_FSM_sequential_calib_intr_gen.cal_nibble[0]_i_1 ),
        .Q(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .R(1'b0));
(* KEEP = "yes" *) 
   FDRE \FSM_sequential_calib_intr_gen.cal_nibble_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_FSM_sequential_calib_intr_gen.cal_nibble[1]_i_1 ),
        .Q(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .R(1'b0));
(* KEEP = "yes" *) 
   FDRE \FSM_sequential_calib_intr_gen.cal_nibble_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_FSM_sequential_calib_intr_gen.cal_nibble[2]_i_1 ),
        .Q(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .R(1'b0));
control_to_core_slave_axi_axi_chip2chip_v4_2_sync_cell axi_chip2chip_sync_cell_intr_in_inst
       (.I1(\n_0_calib_intr_gen.send_intr_reg ),
        .I2(I2),
        .I3(O1),
        .O1(sync_flop_5),
        .O2(n_4_axi_chip2chip_sync_cell_intr_in_inst),
        .Q(p_1_in),
        .axi_c2c_s2m_intr_in(axi_c2c_s2m_intr_in),
        .clk_ph_out(clk_ph_out),
        .rx_user_reset(rx_user_reset));
control_to_core_slave_axi_axi_chip2chip_v4_2_sync_cell_41 axi_chip2chip_sync_cell_intr_out_inst
       (.O1({n_0_axi_chip2chip_sync_cell_intr_out_inst,n_1_axi_chip2chip_sync_cell_intr_out_inst,n_2_axi_chip2chip_sync_cell_intr_out_inst,n_3_axi_chip2chip_sync_cell_intr_out_inst}),
        .Q(intr_data),
        .m_aclk(m_aclk));
FDRE \calib_intr_gen.intr_flop_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(n_4_axi_chip2chip_sync_cell_intr_in_inst),
        .Q(O1),
        .R(1'b0));
FDRE \calib_intr_gen.send_calib_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2),
        .Q(send_calib),
        .R(rx_user_reset));
FDRE \calib_intr_gen.send_ch0_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(send_ch01_out),
        .Q(send_ch0),
        .R(1'b0));
FDRE \calib_intr_gen.send_intr_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(send_intr6_out),
        .Q(\n_0_calib_intr_gen.send_intr_reg ),
        .R(1'b0));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[10]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[10] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[10]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[11]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[11] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[11]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[4]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[4] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[4]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[5]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[5] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[5]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[6]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[6] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[6]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[7]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[7] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[7]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[8]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[8] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[8]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000004)) 
     \calib_intr_gen.tx_ch0_data[9]_i_1 
       (.I0(O6),
        .I1(O1),
        .I2(tx_phy_ctrl[0]),
        .I3(I9),
        .I4(tx_phy_ctrl[1]),
        .I5(\n_0_calib_intr_gen.tx_ch0_data_reg[9] ),
        .O(\n_0_calib_intr_gen.tx_ch0_data[9]_i_1 ));
FDRE \calib_intr_gen.tx_ch0_data_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(p_1_in[0]),
        .Q(O7[0]),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[10]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[10] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[11]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[11] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(p_1_in[1]),
        .Q(O7[1]),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(p_1_in[2]),
        .Q(O7[2]),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(p_1_in[3]),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[3] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[4]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[4] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[5]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[5] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[6]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[6] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[7]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[7] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[8]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[8] ),
        .R(rx_user_reset));
FDRE \calib_intr_gen.tx_ch0_data_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_data[9]_i_1 ),
        .Q(\n_0_calib_intr_gen.tx_ch0_data_reg[9] ),
        .R(rx_user_reset));
LUT5 #(
    .INIT(32'h0000002E)) 
     \calib_intr_gen.tx_ch0_valid_i_1 
       (.I0(O1),
        .I1(O6),
        .I2(tx_ch0_ready),
        .I3(I2),
        .I4(rx_user_reset),
        .O(\n_0_calib_intr_gen.tx_ch0_valid_i_1 ));
FDRE \calib_intr_gen.tx_ch0_valid_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_calib_intr_gen.tx_ch0_valid_i_1 ),
        .Q(O6),
        .R(1'b0));
FDRE \intr_data_reg[0] 
       (.C(clk_ph_out),
        .CE(rx_intr_data),
        .D(I8[0]),
        .Q(intr_data[0]),
        .R(rx_user_reset));
FDRE \intr_data_reg[1] 
       (.C(clk_ph_out),
        .CE(rx_intr_data),
        .D(I8[1]),
        .Q(intr_data[1]),
        .R(rx_user_reset));
FDRE \intr_data_reg[2] 
       (.C(clk_ph_out),
        .CE(rx_intr_data),
        .D(I8[2]),
        .Q(intr_data[2]),
        .R(rx_user_reset));
FDRE \intr_data_reg[3] 
       (.C(clk_ph_out),
        .CE(rx_intr_data),
        .D(I8[3]),
        .Q(intr_data[3]),
        .R(rx_user_reset));
LUT1 #(
    .INIT(2'h1)) 
     \intr_out[3]_i_1 
       (.I0(m_aresetn),
        .O(AR));
FDCE \intr_out_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(AR),
        .D(n_3_axi_chip2chip_sync_cell_intr_out_inst),
        .Q(axi_c2c_m2s_intr_out[0]));
FDCE \intr_out_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(AR),
        .D(n_2_axi_chip2chip_sync_cell_intr_out_inst),
        .Q(axi_c2c_m2s_intr_out[1]));
FDCE \intr_out_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(AR),
        .D(n_1_axi_chip2chip_sync_cell_intr_out_inst),
        .Q(axi_c2c_m2s_intr_out[2]));
FDCE \intr_out_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(AR),
        .D(n_0_axi_chip2chip_sync_cell_intr_out_inst),
        .Q(axi_c2c_m2s_intr_out[3]));
LUT2 #(
    .INIT(4'h2)) 
     \slot_select[0]_i_1 
       (.I0(send_ch0),
        .I1(send_calib),
        .O(O5));
FDRE \sync_intr_in_d1_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_5[0]),
        .Q(p_1_in[0]),
        .R(1'b0));
FDRE \sync_intr_in_d1_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_5[1]),
        .Q(p_1_in[1]),
        .R(1'b0));
FDRE \sync_intr_in_d1_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_5[2]),
        .Q(p_1_in[2]),
        .R(1'b0));
FDRE \sync_intr_in_d1_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_5[3]),
        .Q(p_1_in[3]),
        .R(1'b0));
LUT5 #(
    .INIT(32'hFFFFFF59)) 
     \tdm_data_out[0]_i_1 
       (.I0(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(D[0]));
LUT6 #(
    .INIT(64'hFFFFBBFBBBFBBBFB)) 
     \tdm_data_out[10]_i_1 
       (.I0(I7),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_calib_intr_gen.tx_ch0_data_reg[4] ),
        .I5(Q[0]),
        .O(D[6]));
LUT6 #(
    .INIT(64'hFFFFBAEEBAEEBAEE)) 
     \tdm_data_out[11]_i_1 
       (.I0(I1),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_calib_intr_gen.tx_ch0_data_reg[5] ),
        .I5(Q[0]),
        .O(D[7]));
LUT6 #(
    .INIT(64'hFFFFBBEBBBEBBBEB)) 
     \tdm_data_out[12]_i_1 
       (.I0(I3),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I4(\n_0_calib_intr_gen.tx_ch0_data_reg[6] ),
        .I5(Q[0]),
        .O(D[8]));
LUT6 #(
    .INIT(64'hFFFFBBBABBBABBBA)) 
     \tdm_data_out[13]_i_1 
       (.I0(I4),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I4(\n_0_calib_intr_gen.tx_ch0_data_reg[7] ),
        .I5(Q[0]),
        .O(D[9]));
LUT6 #(
    .INIT(64'hFFFFBBFBBBFBBBFB)) 
     \tdm_data_out[14]_i_1 
       (.I0(I6),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_calib_intr_gen.tx_ch0_data_reg[8] ),
        .I5(Q[0]),
        .O(D[10]));
LUT5 #(
    .INIT(32'h8F8FF888)) 
     \tdm_data_out[15]_i_1 
       (.I0(\n_0_calib_intr_gen.tx_ch0_data_reg[9] ),
        .I1(Q[0]),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .O(D[11]));
LUT5 #(
    .INIT(32'h8F88F8FF)) 
     \tdm_data_out[16]_i_1 
       (.I0(\n_0_calib_intr_gen.tx_ch0_data_reg[10] ),
        .I1(Q[0]),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .O(D[12]));
LUT5 #(
    .INIT(32'h8888FFF8)) 
     \tdm_data_out[17]_i_1 
       (.I0(\n_0_calib_intr_gen.tx_ch0_data_reg[11] ),
        .I1(Q[0]),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .O(D[13]));
LUT5 #(
    .INIT(32'hFFFFFF54)) 
     \tdm_data_out[1]_i_1 
       (.I0(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(Q[2]),
        .I4(Q[3]),
        .O(D[1]));
LUT5 #(
    .INIT(32'h4F44FFFF)) 
     \tdm_data_out[2]_i_1 
       (.I0(send_calib),
        .I1(aw_ch_fc),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .O(D[2]));
LUT5 #(
    .INIT(32'h4F4FF444)) 
     \tdm_data_out[3]_i_1 
       (.I0(send_calib),
        .I1(ar_ch_fc),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .O(D[3]));
LUT5 #(
    .INIT(32'h4F44F4FF)) 
     \tdm_data_out[4]_i_1 
       (.I0(send_calib),
        .I1(wd_ch_fc),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .O(D[4]));
LUT3 #(
    .INIT(8'h54)) 
     \tdm_data_out[5]_i_2 
       (.I0(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .O(calib_pattern));
LUT5 #(
    .INIT(32'h8F88FFFF)) 
     \tdm_data_out[6]_i_3 
       (.I0(Q[2]),
        .I1(dout[0]),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .O(O4));
LUT5 #(
    .INIT(32'h8F8FF888)) 
     \tdm_data_out[7]_i_3 
       (.I0(Q[2]),
        .I1(dout[1]),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .O(O2));
LUT5 #(
    .INIT(32'h8F88F8FF)) 
     \tdm_data_out[8]_i_3 
       (.I0(dout[2]),
        .I1(Q[2]),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I4(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .O(O3));
LUT6 #(
    .INIT(64'hFFFFBBBABBBABBBA)) 
     \tdm_data_out[9]_i_1 
       (.I0(I5),
        .I1(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[0] ),
        .I2(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[2] ),
        .I3(\n_0_FSM_sequential_calib_intr_gen.cal_nibble_reg[1] ),
        .I4(\n_0_calib_intr_gen.tx_ch0_data_reg[3] ),
        .I5(Q[0]),
        .O(D[5]));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_clk_gen" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_clk_gen
   (O1,
    clk_ph_out,
    m_aresetn,
    axi_c2c_selio_rx_clk_in,
    reset);
  output O1;
  output clk_ph_out;
  input m_aresetn;
  input axi_c2c_selio_rx_clk_in;
  input reset;

  wire O1;
(* IBUF_LOW_PWR *)   wire axi_c2c_selio_rx_clk_in;
  wire clk_in_ibufg;
  wire clk_locked;
  wire clk_out;
  wire clk_ph_out;
  wire clkfbout;
  wire clkfbout_bufg;
  wire m_aresetn;
  wire reset;
  wire NLW_mmcm_adv_inst_CLKFBOUTB_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKFBSTOPPED_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKINSTOPPED_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT0B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT1_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT1B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT2_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT2B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT3_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT3B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT4_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT5_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT6_UNCONNECTED;
  wire NLW_mmcm_adv_inst_DRDY_UNCONNECTED;
  wire NLW_mmcm_adv_inst_PSDONE_UNCONNECTED;
  wire [15:0]NLW_mmcm_adv_inst_DO_UNCONNECTED;

(* box_type = "PRIMITIVE" *) 
   BUFG bufg_inst
       (.I(clk_out),
        .O(clk_ph_out));
(* box_type = "PRIMITIVE" *) 
   BUFG fb_bufg_inst
       (.I(clkfbout),
        .O(clkfbout_bufg));
(* box_type = "PRIMITIVE" *) 
   MMCME2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT_F(2.000000),
    .CLKFBOUT_PHASE(0.000000),
    .CLKFBOUT_USE_FINE_PS("FALSE"),
    .CLKIN1_PERIOD(2.500000),
    .CLKIN2_PERIOD(0.000000),
    .CLKOUT0_DIVIDE_F(2.000000),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(90.000000),
    .CLKOUT0_USE_FINE_PS("FALSE"),
    .CLKOUT1_DIVIDE(1),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT1_USE_FINE_PS("FALSE"),
    .CLKOUT2_DIVIDE(1),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT2_USE_FINE_PS("FALSE"),
    .CLKOUT3_DIVIDE(1),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT3_USE_FINE_PS("FALSE"),
    .CLKOUT4_CASCADE("FALSE"),
    .CLKOUT4_DIVIDE(1),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT4_USE_FINE_PS("FALSE"),
    .CLKOUT5_DIVIDE(1),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .CLKOUT5_USE_FINE_PS("FALSE"),
    .CLKOUT6_DIVIDE(1),
    .CLKOUT6_DUTY_CYCLE(0.500000),
    .CLKOUT6_PHASE(0.000000),
    .CLKOUT6_USE_FINE_PS("FALSE"),
    .COMPENSATION("ZHOLD"),
    .DIVCLK_DIVIDE(1),
    .IS_CLKINSEL_INVERTED(1'b0),
    .IS_PSEN_INVERTED(1'b0),
    .IS_PSINCDEC_INVERTED(1'b0),
    .IS_PWRDWN_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .REF_JITTER1(0.010000),
    .REF_JITTER2(0.010000),
    .SS_EN("FALSE"),
    .SS_MODE("CENTER_HIGH"),
    .SS_MOD_PERIOD(10000),
    .STARTUP_WAIT("FALSE")) 
     mmcm_adv_inst
       (.CLKFBIN(clkfbout_bufg),
        .CLKFBOUT(clkfbout),
        .CLKFBOUTB(NLW_mmcm_adv_inst_CLKFBOUTB_UNCONNECTED),
        .CLKFBSTOPPED(NLW_mmcm_adv_inst_CLKFBSTOPPED_UNCONNECTED),
        .CLKIN1(clk_in_ibufg),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKINSTOPPED(NLW_mmcm_adv_inst_CLKINSTOPPED_UNCONNECTED),
        .CLKOUT0(clk_out),
        .CLKOUT0B(NLW_mmcm_adv_inst_CLKOUT0B_UNCONNECTED),
        .CLKOUT1(NLW_mmcm_adv_inst_CLKOUT1_UNCONNECTED),
        .CLKOUT1B(NLW_mmcm_adv_inst_CLKOUT1B_UNCONNECTED),
        .CLKOUT2(NLW_mmcm_adv_inst_CLKOUT2_UNCONNECTED),
        .CLKOUT2B(NLW_mmcm_adv_inst_CLKOUT2B_UNCONNECTED),
        .CLKOUT3(NLW_mmcm_adv_inst_CLKOUT3_UNCONNECTED),
        .CLKOUT3B(NLW_mmcm_adv_inst_CLKOUT3B_UNCONNECTED),
        .CLKOUT4(NLW_mmcm_adv_inst_CLKOUT4_UNCONNECTED),
        .CLKOUT5(NLW_mmcm_adv_inst_CLKOUT5_UNCONNECTED),
        .CLKOUT6(NLW_mmcm_adv_inst_CLKOUT6_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_mmcm_adv_inst_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_mmcm_adv_inst_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(clk_locked),
        .PSCLK(1'b0),
        .PSDONE(NLW_mmcm_adv_inst_PSDONE_UNCONNECTED),
        .PSEN(1'b0),
        .PSINCDEC(1'b0),
        .PWRDWN(1'b0),
        .RST(reset));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* XILINX_LEGACY_PRIM = "IBUFG" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_clk_gen.ibufg_clk_inst 
       (.I(axi_c2c_selio_rx_clk_in),
        .O(clk_in_ibufg));
LUT2 #(
    .INIT(4'h7)) 
     \sync_reset_flop[7]_i_1 
       (.I0(m_aresetn),
        .I1(clk_locked),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_decoder" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_decoder
   (aw_ch_data_valid,
    ar_ch_data_valid,
    wd_ch_data_valid,
    E,
    O1,
    O2,
    O3,
    O4,
    rx_intr_data,
    rx_user_reset,
    clk_ph_out,
    Q,
    rx_user_data_valid_flop,
    rx_phy_ready,
    fifo_full,
    fifo_full_0,
    fifo_full_1);
  output aw_ch_data_valid;
  output ar_ch_data_valid;
  output wd_ch_data_valid;
  output [0:0]E;
  output [0:0]O1;
  output [0:0]O2;
  output [11:0]O3;
  output [1:0]O4;
  output rx_intr_data;
  input rx_user_reset;
  input clk_ph_out;
  input [17:0]Q;
  input rx_user_data_valid_flop;
  input rx_phy_ready;
  input fifo_full;
  input fifo_full_0;
  input fifo_full_1;

  wire [0:0]E;
  wire [0:0]O1;
  wire [0:0]O2;
  wire [11:0]O3;
  wire [1:0]O4;
  wire [17:0]Q;
  wire ar_ch_data_valid;
  wire aw_ch_data_valid;
  wire ch0_valid0;
  wire ch1_valid0;
  wire ch2_valid0;
  wire ch3_valid0;
  wire clk_ph_out;
  wire fifo_full;
  wire fifo_full_0;
  wire fifo_full_1;
  wire \n_0_data_out_reg[12] ;
  wire \n_0_intr_data[3]_i_2 ;
  wire rx_ch0_valid;
  wire rx_intr_data;
  wire rx_phy_ready;
  wire rx_user_data_valid_flop;
  wire rx_user_reset;
  wire wd_ch_data_valid;

LUT5 #(
    .INIT(32'h10000000)) 
     ch0_valid_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(rx_user_data_valid_flop),
        .I3(rx_phy_ready),
        .I4(Q[4]),
        .O(ch0_valid0));
FDRE ch0_valid_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(ch0_valid0),
        .Q(rx_ch0_valid),
        .R(rx_user_reset));
LUT5 #(
    .INIT(32'h20000000)) 
     ch1_valid_i_1
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rx_user_data_valid_flop),
        .I3(rx_phy_ready),
        .I4(Q[4]),
        .O(ch1_valid0));
FDRE ch1_valid_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(ch1_valid0),
        .Q(aw_ch_data_valid),
        .R(rx_user_reset));
LUT5 #(
    .INIT(32'h20000000)) 
     ch2_valid_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(rx_user_data_valid_flop),
        .I3(rx_phy_ready),
        .I4(Q[4]),
        .O(ch2_valid0));
FDRE ch2_valid_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(ch2_valid0),
        .Q(ar_ch_data_valid),
        .R(rx_user_reset));
LUT5 #(
    .INIT(32'h80000000)) 
     ch3_valid_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(rx_user_data_valid_flop),
        .I3(rx_phy_ready),
        .I4(Q[4]),
        .O(ch3_valid0));
FDRE ch3_valid_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(ch3_valid0),
        .Q(wd_ch_data_valid),
        .R(rx_user_reset));
FDRE \ctrl_info_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[2]),
        .Q(O4[0]),
        .R(rx_user_reset));
FDRE \ctrl_info_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[3]),
        .Q(O4[1]),
        .R(rx_user_reset));
FDRE \data_out_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[5]),
        .Q(O3[0]),
        .R(rx_user_reset));
FDRE \data_out_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[15]),
        .Q(O3[10]),
        .R(rx_user_reset));
FDRE \data_out_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[16]),
        .Q(O3[11]),
        .R(rx_user_reset));
FDRE \data_out_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[17]),
        .Q(\n_0_data_out_reg[12] ),
        .R(rx_user_reset));
FDRE \data_out_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[6]),
        .Q(O3[1]),
        .R(rx_user_reset));
FDRE \data_out_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[7]),
        .Q(O3[2]),
        .R(rx_user_reset));
FDRE \data_out_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[8]),
        .Q(O3[3]),
        .R(rx_user_reset));
FDRE \data_out_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[9]),
        .Q(O3[4]),
        .R(rx_user_reset));
FDRE \data_out_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[10]),
        .Q(O3[5]),
        .R(rx_user_reset));
FDRE \data_out_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[11]),
        .Q(O3[6]),
        .R(rx_user_reset));
FDRE \data_out_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[12]),
        .Q(O3[7]),
        .R(rx_user_reset));
FDRE \data_out_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[13]),
        .Q(O3[8]),
        .R(rx_user_reset));
FDRE \data_out_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[14]),
        .Q(O3[9]),
        .R(rx_user_reset));
LUT2 #(
    .INIT(4'h8)) 
     \intr_data[3]_i_1 
       (.I0(\n_0_intr_data[3]_i_2 ),
        .I1(O3[10]),
        .O(rx_intr_data));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \intr_data[3]_i_2 
       (.I0(\n_0_data_out_reg[12] ),
        .I1(O3[11]),
        .I2(O3[8]),
        .I3(O3[9]),
        .I4(rx_ch0_valid),
        .I5(O3[7]),
        .O(\n_0_intr_data[3]_i_2 ));
LUT2 #(
    .INIT(4'h2)) 
     \mux_by_4.pack_reg0[11]_i_1 
       (.I0(aw_ch_data_valid),
        .I1(fifo_full),
        .O(E));
LUT2 #(
    .INIT(4'h2)) 
     \mux_by_4.pack_reg0[11]_i_1__0 
       (.I0(ar_ch_data_valid),
        .I1(fifo_full_0),
        .O(O1));
LUT2 #(
    .INIT(4'h2)) 
     \mux_by_4.pack_reg0[9]_i_1 
       (.I0(wd_ch_data_valid),
        .I1(fifo_full_1),
        .O(O2));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_packer" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_packer
   (din,
    O1,
    E,
    Q,
    clk_ph_out,
    rx_user_reset);
  output [35:0]din;
  output [0:0]O1;
  input [0:0]E;
  input [11:0]Q;
  input clk_ph_out;
  input rx_user_reset;

  wire [0:0]E;
  wire [0:0]O1;
  wire [11:0]Q;
  wire clk_ph_out;
  wire [35:0]din;
  wire \n_0_mux_by_4.data_count_reg[0] ;
  wire \n_0_mux_by_4.data_count_reg[1] ;
  wire \n_0_mux_by_4.data_count_reg[2] ;
  wire rx_user_reset;

FDSE \mux_by_4.data_count_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(O1),
        .Q(\n_0_mux_by_4.data_count_reg[0] ),
        .S(rx_user_reset));
FDRE \mux_by_4.data_count_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[0] ),
        .Q(\n_0_mux_by_4.data_count_reg[1] ),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[1] ),
        .Q(\n_0_mux_by_4.data_count_reg[2] ),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[2] ),
        .Q(O1),
        .R(rx_user_reset));
FDRE \mux_by_4.pack_reg0_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[0]),
        .Q(din[24]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[10] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[10]),
        .Q(din[34]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[11] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[11]),
        .Q(din[35]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[1]),
        .Q(din[25]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[2]),
        .Q(din[26]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[3]),
        .Q(din[27]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[4]),
        .Q(din[28]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[5]),
        .Q(din[29]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[6]),
        .Q(din[30]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[7]),
        .Q(din[31]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[8]),
        .Q(din[32]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[9]),
        .Q(din[33]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[24]),
        .Q(din[12]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[10] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[34]),
        .Q(din[22]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[11] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[35]),
        .Q(din[23]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[25]),
        .Q(din[13]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[26]),
        .Q(din[14]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[27]),
        .Q(din[15]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[28]),
        .Q(din[16]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[29]),
        .Q(din[17]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[30]),
        .Q(din[18]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[31]),
        .Q(din[19]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[32]),
        .Q(din[20]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[33]),
        .Q(din[21]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[12]),
        .Q(din[0]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[10] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[22]),
        .Q(din[10]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[11] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[23]),
        .Q(din[11]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[13]),
        .Q(din[1]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[14]),
        .Q(din[2]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[15]),
        .Q(din[3]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[16]),
        .Q(din[4]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[17]),
        .Q(din[5]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[18]),
        .Q(din[6]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[19]),
        .Q(din[7]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[20]),
        .Q(din[8]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[21]),
        .Q(din[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_packer" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_packer_77
   (din,
    O1,
    E,
    Q,
    clk_ph_out,
    rx_user_reset);
  output [35:0]din;
  output [0:0]O1;
  input [0:0]E;
  input [11:0]Q;
  input clk_ph_out;
  input rx_user_reset;

  wire [0:0]E;
  wire [0:0]O1;
  wire [11:0]Q;
  wire clk_ph_out;
  wire [35:0]din;
  wire \n_0_mux_by_4.data_count_reg[0] ;
  wire \n_0_mux_by_4.data_count_reg[1] ;
  wire \n_0_mux_by_4.data_count_reg[2] ;
  wire rx_user_reset;

FDSE \mux_by_4.data_count_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(O1),
        .Q(\n_0_mux_by_4.data_count_reg[0] ),
        .S(rx_user_reset));
FDRE \mux_by_4.data_count_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[0] ),
        .Q(\n_0_mux_by_4.data_count_reg[1] ),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[1] ),
        .Q(\n_0_mux_by_4.data_count_reg[2] ),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[2] ),
        .Q(O1),
        .R(rx_user_reset));
FDRE \mux_by_4.pack_reg0_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[0]),
        .Q(din[24]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[10] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[10]),
        .Q(din[34]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[11] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[11]),
        .Q(din[35]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[1]),
        .Q(din[25]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[2]),
        .Q(din[26]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[3]),
        .Q(din[27]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[4]),
        .Q(din[28]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[5]),
        .Q(din[29]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[6]),
        .Q(din[30]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[7]),
        .Q(din[31]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[8]),
        .Q(din[32]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[9]),
        .Q(din[33]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[24]),
        .Q(din[12]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[10] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[34]),
        .Q(din[22]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[11] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[35]),
        .Q(din[23]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[25]),
        .Q(din[13]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[26]),
        .Q(din[14]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[27]),
        .Q(din[15]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[28]),
        .Q(din[16]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[29]),
        .Q(din[17]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[30]),
        .Q(din[18]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[31]),
        .Q(din[19]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[32]),
        .Q(din[20]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[33]),
        .Q(din[21]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[12]),
        .Q(din[0]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[10] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[22]),
        .Q(din[10]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[11] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[23]),
        .Q(din[11]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[13]),
        .Q(din[1]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[14]),
        .Q(din[2]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[15]),
        .Q(din[3]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[16]),
        .Q(din[4]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[17]),
        .Q(din[5]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[18]),
        .Q(din[6]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[19]),
        .Q(din[7]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[20]),
        .Q(din[8]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[21]),
        .Q(din[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_packer" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_packer__parameterized0
   (din,
    Q,
    E,
    D,
    clk_ph_out,
    rx_user_reset);
  output [29:0]din;
  output [0:0]Q;
  input [0:0]E;
  input [9:0]D;
  input clk_ph_out;
  input rx_user_reset;

  wire [9:0]D;
  wire [0:0]E;
  wire [0:0]Q;
  wire clk_ph_out;
  wire [29:0]din;
  wire \n_0_mux_by_4.data_count_reg[0] ;
  wire \n_0_mux_by_4.data_count_reg[1] ;
  wire \n_0_mux_by_4.data_count_reg[2] ;
  wire rx_user_reset;

FDSE \mux_by_4.data_count_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q),
        .Q(\n_0_mux_by_4.data_count_reg[0] ),
        .S(rx_user_reset));
FDRE \mux_by_4.data_count_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[0] ),
        .Q(\n_0_mux_by_4.data_count_reg[1] ),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[1] ),
        .Q(\n_0_mux_by_4.data_count_reg[2] ),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(\n_0_mux_by_4.data_count_reg[2] ),
        .Q(Q),
        .R(rx_user_reset));
FDRE \mux_by_4.pack_reg0_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[0]),
        .Q(din[20]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[1]),
        .Q(din[21]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[2]),
        .Q(din[22]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[3]),
        .Q(din[23]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[4]),
        .Q(din[24]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[5]),
        .Q(din[25]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[6]),
        .Q(din[26]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[7]),
        .Q(din[27]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[8]),
        .Q(din[28]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg0_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(D[9]),
        .Q(din[29]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[20]),
        .Q(din[10]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[21]),
        .Q(din[11]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[22]),
        .Q(din[12]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[23]),
        .Q(din[13]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[24]),
        .Q(din[14]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[25]),
        .Q(din[15]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[26]),
        .Q(din[16]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[27]),
        .Q(din[17]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[28]),
        .Q(din[18]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg1_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[29]),
        .Q(din[19]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[10]),
        .Q(din[0]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[11]),
        .Q(din[1]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[12]),
        .Q(din[2]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[13]),
        .Q(din[3]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[4] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[14]),
        .Q(din[4]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[5] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[15]),
        .Q(din[5]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[6] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[16]),
        .Q(din[6]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[7] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[17]),
        .Q(din[7]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[8] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[18]),
        .Q(din[8]),
        .R(1'b0));
FDRE \mux_by_4.pack_reg2_reg[9] 
       (.C(clk_ph_out),
        .CE(E),
        .D(din[19]),
        .Q(din[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_phy_calib" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_phy_calib
   (calib_error,
    calib_done,
    O1,
    O2,
    O3,
    O4,
    O5,
    O6,
    O7,
    O8,
    O9,
    O10,
    clk_ph_out,
    I1,
    Q,
    I2,
    S,
    calib_start);
  output calib_error;
  output calib_done;
  output O1;
  output O2;
  output [4:0]O3;
  output O4;
  output [17:0]O5;
  output O6;
  output O7;
  output O8;
  output O9;
  output [8:0]O10;
  input clk_ph_out;
  input I1;
  input [1:0]Q;
  input [17:0]I2;
  input [0:0]S;
  input calib_start;

  wire I1;
  wire [17:0]I2;
  wire O1;
  wire [8:0]O10;
  wire O2;
  wire [4:0]O3;
  wire O4;
  wire [17:0]O5;
  wire O6;
  wire O7;
  wire O8;
  wire O9;
  wire [1:0]Q;
  wire [0:0]S;
  wire calib_done;
  wire calib_error;
  wire calib_start;
  wire clk_ph_out;
  wire [2:0]count;
  wire [17:0]data_flip_sel;
  wire [17:0]data_flip_sel0;
  wire [17:0]data_stage0;
  wire [17:0]data_stage1;
  wire [17:0]data_stage2;
  wire [17:0]data_stage_sel0;
  wire [17:0]data_stage_sel00;
  wire [17:0]data_stage_sel1;
  wire [17:0]data_stage_sel10;
  wire [16:2]delay_load0;
  wire \deskew_enable_gen.f3_val_reg0 ;
  wire \deskew_enable_gen.p3_val_reg0 ;
  wire dout_p0_val;
  wire dout_p0_val0;
  wire f0_val0;
  wire f1_val0;
  wire f2_val0;
(* RTL_KEEP = "true" *)   wire [3:0]f3_val;
  wire flip_type;
  wire [4:0]grp_count;
  wire grp_flip;
  wire grp_p0_val;
  wire grp_p0_val0;
  wire grp_p1_val;
  wire grp_p1_val0;
  wire grp_p3_val;
  wire grp_p3_val0;
  wire [11:1]masked_data;
  wire [15:3]masked_dout;
  wire [7:7]masked_udata;
  wire [4:0]max_value_0;
  wire [4:0]max_value_1;
  wire min_flip_0;
  wire min_flip_1;
  wire [4:0]min_value_0;
  wire [4:0]min_value_1;
  wire \n_0_ddr_data_gen.data_dly_reg[0] ;
  wire \n_0_ddr_data_gen.data_dly_reg[10] ;
  wire \n_0_ddr_data_gen.data_dly_reg[12] ;
  wire \n_0_ddr_data_gen.data_dly_reg[14] ;
  wire \n_0_ddr_data_gen.data_dly_reg[16] ;
  wire \n_0_ddr_data_gen.data_dly_reg[2] ;
  wire \n_0_ddr_data_gen.data_dly_reg[4] ;
  wire \n_0_ddr_data_gen.data_dly_reg[6] ;
  wire \n_0_ddr_data_gen.data_dly_reg[8] ;
  wire \n_0_deskew_enable_gen.calib_done_i_1 ;
  wire \n_0_deskew_enable_gen.calib_error_i_1 ;
  wire \n_0_deskew_enable_gen.calib_error_i_3 ;
  wire \n_0_deskew_enable_gen.count[0]_i_1 ;
  wire \n_0_deskew_enable_gen.count[1]_i_1 ;
  wire \n_0_deskew_enable_gen.count[2]_i_1 ;
  wire \n_0_deskew_enable_gen.count[2]_i_2 ;
  wire \n_0_deskew_enable_gen.count[2]_i_3 ;
  wire \n_0_deskew_enable_gen.count[2]_i_4 ;
  wire \n_0_deskew_enable_gen.count[2]_i_5 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[11]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[3]_i_2 ;
  wire \n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ;
  wire \n_0_deskew_enable_gen.data_out[7]_i_2 ;
  wire \n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ;
  wire \n_0_deskew_enable_gen.data_stage_sel0[17]_i_3 ;
  wire \n_0_deskew_enable_gen.data_stage_sel0[17]_i_4 ;
  wire \n_0_deskew_enable_gen.data_stage_sel0[17]_i_5 ;
  wire \n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_load[0]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_load[12]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_load[16]_i_2 ;
  wire \n_0_deskew_enable_gen.delay_load[16]_i_3 ;
  wire \n_0_deskew_enable_gen.delay_load[16]_i_4 ;
  wire \n_0_deskew_enable_gen.delay_load[16]_i_5 ;
  wire \n_0_deskew_enable_gen.delay_load[16]_i_6 ;
  wire \n_0_deskew_enable_gen.delay_tap[0]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_tap[0]_i_2 ;
  wire \n_0_deskew_enable_gen.delay_tap[0]_i_3 ;
  wire \n_0_deskew_enable_gen.delay_tap[1]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_tap[1]_i_2 ;
  wire \n_0_deskew_enable_gen.delay_tap[1]_i_3 ;
  wire \n_0_deskew_enable_gen.delay_tap[1]_i_4 ;
  wire \n_0_deskew_enable_gen.delay_tap[2]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_tap[2]_i_2 ;
  wire \n_0_deskew_enable_gen.delay_tap[2]_i_3 ;
  wire \n_0_deskew_enable_gen.delay_tap[2]_i_4 ;
  wire \n_0_deskew_enable_gen.delay_tap[2]_i_5 ;
  wire \n_0_deskew_enable_gen.delay_tap[3]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_tap[3]_i_2 ;
  wire \n_0_deskew_enable_gen.delay_tap[3]_i_3 ;
  wire \n_0_deskew_enable_gen.delay_tap[3]_i_4 ;
  wire \n_0_deskew_enable_gen.delay_tap[3]_i_5 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_1 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_10 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_11 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_12 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_13 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_14 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_15 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_16 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_17 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_18 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_19 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_2 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_20 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_21 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_22 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_3 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_4 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_5 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_6 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_7 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_8 ;
  wire \n_0_deskew_enable_gen.delay_tap[4]_i_9 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_10 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_11 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_12 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_3 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_4 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_5 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_6 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_7 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_8 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_i_9 ;
  wire \n_0_deskew_enable_gen.dout_p0_val_reg_i_2 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.f0_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.f0_val_reg[0] ;
  wire \n_0_deskew_enable_gen.f0_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.f0_val_reg[2]_srl2 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_10 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_11 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_12 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_14 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_15 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_16 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.f1_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.f1_val_reg[0] ;
  wire \n_0_deskew_enable_gen.f1_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.f1_val_reg[1] ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_10 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_11 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_12 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_13 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_14 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_15 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.f2_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.f2_val_reg[0] ;
  wire \n_0_deskew_enable_gen.f2_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.f3_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.f3_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.flip_type_i_1 ;
  wire \n_0_deskew_enable_gen.flip_type_i_2 ;
  wire \n_0_deskew_enable_gen.grp_count[0]_i_1 ;
  wire \n_0_deskew_enable_gen.grp_count[1]_i_1 ;
  wire \n_0_deskew_enable_gen.grp_count[2]_i_1 ;
  wire \n_0_deskew_enable_gen.grp_count[3]_i_1 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_1 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_2 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_3 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_4 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_5 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_6 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_7 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_8 ;
  wire \n_0_deskew_enable_gen.grp_count[4]_i_9 ;
  wire \n_0_deskew_enable_gen.grp_flip_i_2 ;
  wire \n_0_deskew_enable_gen.grp_flip_i_3 ;
  wire \n_0_deskew_enable_gen.grp_flip_i_4 ;
  wire \n_0_deskew_enable_gen.grp_flip_i_5 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_10 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_3 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_4 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_5 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_6 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_7 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_8 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_i_9 ;
  wire \n_0_deskew_enable_gen.grp_p0_val_reg_i_2 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_i_3 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_i_4 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_i_5 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_i_6 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_i_7 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_i_8 ;
  wire \n_0_deskew_enable_gen.grp_p1_val_reg_i_2 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_10 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_11 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_13 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_15 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_17 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_18 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_3 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_4 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_5 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_6 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_7 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_i_8 ;
  wire \n_0_deskew_enable_gen.grp_p3_val_reg_i_2 ;
  wire \n_0_deskew_enable_gen.max_value_0[4]_i_1 ;
  wire \n_0_deskew_enable_gen.max_value_1[4]_i_1 ;
  wire \n_0_deskew_enable_gen.min_flip_0_i_1 ;
  wire \n_0_deskew_enable_gen.min_flip_0_i_2 ;
  wire \n_0_deskew_enable_gen.min_flip_1_i_1 ;
  wire \n_0_deskew_enable_gen.min_value_0[4]_i_1 ;
  wire \n_0_deskew_enable_gen.min_value_1[4]_i_1 ;
  wire \n_0_deskew_enable_gen.min_value_1[4]_i_3 ;
  wire \n_0_deskew_enable_gen.min_value_1[4]_i_4 ;
  wire \n_0_deskew_enable_gen.min_value_1[4]_i_5 ;
  wire \n_0_deskew_enable_gen.p0_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.p0_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.p0_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.p0_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.p0_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.p0_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.p0_val_reg[0] ;
  wire \n_0_deskew_enable_gen.p0_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.p0_val_reg[2]_srl2 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_11 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_14 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.p1_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.p1_val_reg[0] ;
  wire \n_0_deskew_enable_gen.p1_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.p1_val_reg[1] ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_10 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_11 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_12 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_13 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.p2_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.p2_val_reg[0] ;
  wire \n_0_deskew_enable_gen.p2_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_3 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_4 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_5 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_6 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_7 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_8 ;
  wire \n_0_deskew_enable_gen.p3_val[0]_i_9 ;
  wire \n_0_deskew_enable_gen.p3_val_reg[0]_i_2 ;
  wire \n_0_deskew_enable_gen.pat_count[0]_i_1 ;
  wire \n_0_deskew_enable_gen.pat_count[1]_i_1 ;
  wire \n_0_deskew_enable_gen.pat_count[2]_i_1 ;
  wire \n_0_deskew_enable_gen.pat_count[2]_i_2 ;
  wire \n_0_deskew_enable_gen.pat_count[2]_i_3 ;
  wire \n_0_deskew_enable_gen.state[0]_i_1 ;
  wire \n_0_deskew_enable_gen.state[10]_i_1 ;
  wire \n_0_deskew_enable_gen.state[10]_i_2 ;
  wire \n_0_deskew_enable_gen.state[10]_i_3 ;
  wire \n_0_deskew_enable_gen.state[11]_i_1 ;
  wire \n_0_deskew_enable_gen.state[11]_i_10 ;
  wire \n_0_deskew_enable_gen.state[11]_i_11 ;
  wire \n_0_deskew_enable_gen.state[11]_i_2 ;
  wire \n_0_deskew_enable_gen.state[11]_i_3 ;
  wire \n_0_deskew_enable_gen.state[11]_i_4 ;
  wire \n_0_deskew_enable_gen.state[11]_i_5 ;
  wire \n_0_deskew_enable_gen.state[11]_i_6 ;
  wire \n_0_deskew_enable_gen.state[11]_i_7 ;
  wire \n_0_deskew_enable_gen.state[11]_i_8 ;
  wire \n_0_deskew_enable_gen.state[11]_i_9 ;
  wire \n_0_deskew_enable_gen.state[1]_i_1 ;
  wire \n_0_deskew_enable_gen.state[1]_i_2 ;
  wire \n_0_deskew_enable_gen.state[1]_i_3 ;
  wire \n_0_deskew_enable_gen.state[2]_i_1 ;
  wire \n_0_deskew_enable_gen.state[2]_i_2 ;
  wire \n_0_deskew_enable_gen.state[3]_i_1 ;
  wire \n_0_deskew_enable_gen.state[3]_i_2 ;
  wire \n_0_deskew_enable_gen.state[3]_i_3 ;
  wire \n_0_deskew_enable_gen.state[3]_i_4 ;
  wire \n_0_deskew_enable_gen.state[4]_i_1 ;
  wire \n_0_deskew_enable_gen.state[5]_i_1 ;
  wire \n_0_deskew_enable_gen.state[5]_i_2 ;
  wire \n_0_deskew_enable_gen.state[6]_i_1 ;
  wire \n_0_deskew_enable_gen.state[6]_i_2 ;
  wire \n_0_deskew_enable_gen.state[6]_i_3 ;
  wire \n_0_deskew_enable_gen.state[6]_i_4 ;
  wire \n_0_deskew_enable_gen.state[7]_i_1 ;
  wire \n_0_deskew_enable_gen.state[8]_i_1 ;
  wire \n_0_deskew_enable_gen.state[8]_i_2 ;
  wire \n_0_deskew_enable_gen.state[9]_i_1 ;
  wire \n_0_deskew_enable_gen.step_count[0]_i_1 ;
  wire \n_0_deskew_enable_gen.step_count[0]_i_2 ;
  wire \n_0_deskew_enable_gen.step_count[0]_i_3 ;
  wire \n_0_deskew_enable_gen.step_count[1]_i_1 ;
  wire \n_0_deskew_enable_gen.step_count[1]_i_2 ;
  wire \n_0_deskew_enable_gen.step_count[1]_i_3 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_1 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_10 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_11 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_2 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_3 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_4 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_5 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_6 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_7 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_8 ;
  wire \n_0_deskew_enable_gen.step_count[2]_i_9 ;
  wire \n_0_sio_slav_calib_fsm.master_ack_i_2 ;
  wire \n_0_sio_slav_calib_fsm.master_ack_i_3 ;
  wire \n_0_sio_slav_calib_fsm.master_ack_i_4 ;
  wire \n_0_sio_slav_calib_fsm.master_init_i_2 ;
  wire \n_0_sio_slav_calib_fsm.master_init_i_3 ;
  wire \n_0_sio_slav_calib_fsm.master_init_i_4 ;
  wire \n_0_sio_slav_calib_fsm.master_nack_i_2 ;
  wire \n_0_sio_slav_calib_fsm.master_nack_i_3 ;
  wire \n_0_sio_slav_calib_fsm.master_nack_i_4 ;
  wire \n_1_deskew_enable_gen.dout_p0_val_reg_i_2 ;
  wire \n_1_deskew_enable_gen.f0_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.f1_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.f2_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.f3_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.grp_p0_val_reg_i_2 ;
  wire \n_1_deskew_enable_gen.grp_p1_val_reg_i_2 ;
  wire \n_1_deskew_enable_gen.grp_p3_val_reg_i_2 ;
  wire \n_1_deskew_enable_gen.p0_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.p1_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.p2_val_reg[0]_i_2 ;
  wire \n_1_deskew_enable_gen.p3_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.dout_p0_val_reg_i_2 ;
  wire \n_2_deskew_enable_gen.f0_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.f1_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.f2_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.f3_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.grp_p0_val_reg_i_2 ;
  wire \n_2_deskew_enable_gen.grp_p1_val_reg_i_2 ;
  wire \n_2_deskew_enable_gen.grp_p3_val_reg_i_2 ;
  wire \n_2_deskew_enable_gen.p0_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.p1_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.p2_val_reg[0]_i_2 ;
  wire \n_2_deskew_enable_gen.p3_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.dout_p0_val_reg_i_1 ;
  wire \n_3_deskew_enable_gen.dout_p0_val_reg_i_2 ;
  wire \n_3_deskew_enable_gen.f0_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.f0_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.f1_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.f1_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.f2_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.f2_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.f3_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.f3_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.grp_p0_val_reg_i_1 ;
  wire \n_3_deskew_enable_gen.grp_p0_val_reg_i_2 ;
  wire \n_3_deskew_enable_gen.grp_p1_val_reg_i_1 ;
  wire \n_3_deskew_enable_gen.grp_p1_val_reg_i_2 ;
  wire \n_3_deskew_enable_gen.grp_p3_val_reg_i_1 ;
  wire \n_3_deskew_enable_gen.grp_p3_val_reg_i_2 ;
  wire \n_3_deskew_enable_gen.p0_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.p0_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.p1_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.p1_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.p2_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.p2_val_reg[0]_i_2 ;
  wire \n_3_deskew_enable_gen.p3_val_reg[0]_i_1 ;
  wire \n_3_deskew_enable_gen.p3_val_reg[0]_i_2 ;
  wire next_calib_done;
  wire next_grp_flip;
  wire next_min_flip_1;
  wire [4:0]next_min_value_0;
  wire p0_val0;
  wire p1_val0;
  wire p2_val0;
(* RTL_KEEP = "true" *)   wire [3:0]p3_val;
  wire p_0_in4_in;
  wire p_0_in7_in;
  wire p_2_in5_in;
  wire p_2_in8_in;
  wire p_3_in;
  wire p_3_in9_in;
  wire [2:0]pat_count;
  wire [17:0]selected_data;
  wire [11:0]state;
  wire [2:0]step_count;
  wire [16:0]unalign_data;
  wire [3:2]\NLW_deskew_enable_gen.dout_p0_val_reg_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.dout_p0_val_reg_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.dout_p0_val_reg_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.f0_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f0_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f0_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.f1_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f1_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f1_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.f2_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f2_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f2_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.f3_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f3_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.f3_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.grp_p0_val_reg_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.grp_p0_val_reg_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.grp_p0_val_reg_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.grp_p1_val_reg_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.grp_p1_val_reg_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.grp_p1_val_reg_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.grp_p3_val_reg_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.grp_p3_val_reg_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.grp_p3_val_reg_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.p0_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p0_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p0_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.p1_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p1_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p1_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.p2_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p2_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p2_val_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_deskew_enable_gen.p3_val_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p3_val_reg[0]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_deskew_enable_gen.p3_val_reg[0]_i_2_O_UNCONNECTED ;

FDRE \ddr_data_gen.data_dly_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[0]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[0] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[10]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[10] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[11]),
        .Q(unalign_data[10]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[12]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[12] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[13]),
        .Q(unalign_data[12]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[14]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[14] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[15]),
        .Q(unalign_data[14]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[16]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[16] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[17]),
        .Q(unalign_data[16]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[1]),
        .Q(unalign_data[0]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[2]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[2] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[3]),
        .Q(unalign_data[2]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[4]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[4] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[5]),
        .Q(unalign_data[4]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[6]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[6] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[7]),
        .Q(unalign_data[6]),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[8]),
        .Q(\n_0_ddr_data_gen.data_dly_reg[8] ),
        .R(1'b0));
FDRE \ddr_data_gen.data_dly_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[9]),
        .Q(unalign_data[8]),
        .R(1'b0));
LUT5 #(
    .INIT(32'h08FF0800)) 
     \deskew_enable_gen.calib_done_i_1 
       (.I0(step_count[1]),
        .I1(step_count[2]),
        .I2(step_count[0]),
        .I3(next_calib_done),
        .I4(calib_done),
        .O(\n_0_deskew_enable_gen.calib_done_i_1 ));
FDRE \deskew_enable_gen.calib_done_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.calib_done_i_1 ),
        .Q(calib_done),
        .R(I1));
LUT5 #(
    .INIT(32'h80FF8000)) 
     \deskew_enable_gen.calib_error_i_1 
       (.I0(step_count[0]),
        .I1(step_count[1]),
        .I2(step_count[2]),
        .I3(next_calib_done),
        .I4(calib_error),
        .O(\n_0_deskew_enable_gen.calib_error_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair90" *) 
   LUT6 #(
    .INIT(64'h0000020000000000)) 
     \deskew_enable_gen.calib_error_i_2 
       (.I0(\n_0_deskew_enable_gen.state[11]_i_3 ),
        .I1(state[9]),
        .I2(state[8]),
        .I3(state[11]),
        .I4(state[10]),
        .I5(\n_0_deskew_enable_gen.calib_error_i_3 ),
        .O(next_calib_done));
(* SOFT_HLUTNM = "soft_lutpair125" *) 
   LUT4 #(
    .INIT(16'h0001)) 
     \deskew_enable_gen.calib_error_i_3 
       (.I0(state[4]),
        .I1(state[5]),
        .I2(state[6]),
        .I3(state[7]),
        .O(\n_0_deskew_enable_gen.calib_error_i_3 ));
FDRE \deskew_enable_gen.calib_error_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.calib_error_i_1 ),
        .Q(calib_error),
        .R(I1));
LUT3 #(
    .INIT(8'h34)) 
     \deskew_enable_gen.count[0]_i_1 
       (.I0(\n_0_deskew_enable_gen.count[2]_i_2 ),
        .I1(\n_0_deskew_enable_gen.count[2]_i_3 ),
        .I2(count[0]),
        .O(\n_0_deskew_enable_gen.count[0]_i_1 ));
LUT4 #(
    .INIT(16'h1F20)) 
     \deskew_enable_gen.count[1]_i_1 
       (.I0(count[0]),
        .I1(\n_0_deskew_enable_gen.count[2]_i_2 ),
        .I2(\n_0_deskew_enable_gen.count[2]_i_3 ),
        .I3(count[1]),
        .O(\n_0_deskew_enable_gen.count[1]_i_1 ));
LUT5 #(
    .INIT(32'h07FF0800)) 
     \deskew_enable_gen.count[2]_i_1 
       (.I0(count[0]),
        .I1(count[1]),
        .I2(\n_0_deskew_enable_gen.count[2]_i_2 ),
        .I3(\n_0_deskew_enable_gen.count[2]_i_3 ),
        .I4(count[2]),
        .O(\n_0_deskew_enable_gen.count[2]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair93" *) 
   LUT6 #(
    .INIT(64'h1000000011111111)) 
     \deskew_enable_gen.count[2]_i_2 
       (.I0(state[1]),
        .I1(state[3]),
        .I2(count[1]),
        .I3(count[0]),
        .I4(count[2]),
        .I5(\n_0_deskew_enable_gen.state[2]_i_2 ),
        .O(\n_0_deskew_enable_gen.count[2]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair111" *) 
   LUT6 #(
    .INIT(64'h0000000000000200)) 
     \deskew_enable_gen.count[2]_i_3 
       (.I0(\n_0_deskew_enable_gen.count[2]_i_4 ),
        .I1(state[6]),
        .I2(state[5]),
        .I3(\n_0_deskew_enable_gen.count[2]_i_5 ),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.count[2]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair72" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.count[2]_i_4 
       (.I0(state[9]),
        .I1(state[4]),
        .I2(state[0]),
        .I3(state[3]),
        .I4(state[2]),
        .I5(state[1]),
        .O(\n_0_deskew_enable_gen.count[2]_i_4 ));
LUT2 #(
    .INIT(4'h1)) 
     \deskew_enable_gen.count[2]_i_5 
       (.I0(state[7]),
        .I1(state[8]),
        .O(\n_0_deskew_enable_gen.count[2]_i_5 ));
FDRE \deskew_enable_gen.count_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.count[0]_i_1 ),
        .Q(count[0]),
        .R(I1));
FDRE \deskew_enable_gen.count_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.count[1]_i_1 ),
        .Q(count[1]),
        .R(I1));
FDRE \deskew_enable_gen.count_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.count[2]_i_1 ),
        .Q(count[2]),
        .R(I1));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAEAA)) 
     \deskew_enable_gen.data_flip_sel[0]_i_1 
       (.I0(data_flip_sel[0]),
        .I1(grp_flip),
        .I2(grp_count[2]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(data_flip_sel0[0]));
LUT5 #(
    .INIT(32'hABAAAAAA)) 
     \deskew_enable_gen.data_flip_sel[10]_i_1 
       (.I0(data_flip_sel[10]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I2(grp_count[0]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(grp_flip),
        .O(data_flip_sel0[10]));
LUT2 #(
    .INIT(4'hB)) 
     \deskew_enable_gen.data_flip_sel[10]_i_2 
       (.I0(grp_count[2]),
        .I1(grp_count[1]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ));
LUT2 #(
    .INIT(4'h1)) 
     \deskew_enable_gen.data_flip_sel[10]_i_3 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ));
LUT3 #(
    .INIT(8'hEA)) 
     \deskew_enable_gen.data_flip_sel[11]_i_1 
       (.I0(data_flip_sel[11]),
        .I1(grp_flip),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[11]_i_2 ),
        .O(data_flip_sel0[11]));
(* SOFT_HLUTNM = "soft_lutpair91" *) 
   LUT5 #(
    .INIT(32'h00010000)) 
     \deskew_enable_gen.data_flip_sel[11]_i_2 
       (.I0(grp_count[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[11]_i_2 ));
LUT5 #(
    .INIT(32'hAAAAEAAA)) 
     \deskew_enable_gen.data_flip_sel[12]_i_1 
       (.I0(data_flip_sel[12]),
        .I1(grp_flip),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .O(data_flip_sel0[12]));
(* SOFT_HLUTNM = "soft_lutpair127" *) 
   LUT3 #(
    .INIT(8'h10)) 
     \deskew_enable_gen.data_flip_sel[12]_i_2 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[0]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ));
LUT5 #(
    .INIT(32'hAAAAEAAA)) 
     \deskew_enable_gen.data_flip_sel[13]_i_1 
       (.I0(data_flip_sel[13]),
        .I1(grp_flip),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .O(data_flip_sel0[13]));
LUT3 #(
    .INIT(8'h10)) 
     \deskew_enable_gen.data_flip_sel[13]_i_2 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[0]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ));
LUT5 #(
    .INIT(32'hAAAEAAAA)) 
     \deskew_enable_gen.data_flip_sel[14]_i_1 
       (.I0(data_flip_sel[14]),
        .I1(grp_count[1]),
        .I2(grp_count[2]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I4(grp_flip),
        .O(data_flip_sel0[14]));
(* SOFT_HLUTNM = "soft_lutpair127" *) 
   LUT3 #(
    .INIT(8'hEF)) 
     \deskew_enable_gen.data_flip_sel[14]_i_2 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[0]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ));
LUT3 #(
    .INIT(8'hBA)) 
     \deskew_enable_gen.data_flip_sel[15]_i_1 
       (.I0(data_flip_sel[15]),
        .I1(O2),
        .I2(grp_flip),
        .O(data_flip_sel0[15]));
(* SOFT_HLUTNM = "soft_lutpair80" *) 
   LUT5 #(
    .INIT(32'hFFEFFFFF)) 
     \deskew_enable_gen.data_flip_sel[15]_i_2 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(grp_count[0]),
        .O(O2));
LUT3 #(
    .INIT(8'hBA)) 
     \deskew_enable_gen.data_flip_sel[16]_i_1 
       (.I0(data_flip_sel[16]),
        .I1(O8),
        .I2(grp_flip),
        .O(data_flip_sel0[16]));
(* SOFT_HLUTNM = "soft_lutpair108" *) 
   LUT5 #(
    .INIT(32'hFFFEFFF7)) 
     \deskew_enable_gen.data_flip_sel[16]_i_2 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(grp_count[2]),
        .O(O8));
LUT3 #(
    .INIT(8'hBA)) 
     \deskew_enable_gen.data_flip_sel[17]_i_1 
       (.I0(data_flip_sel[17]),
        .I1(O9),
        .I2(grp_flip),
        .O(data_flip_sel0[17]));
(* SOFT_HLUTNM = "soft_lutpair112" *) 
   LUT5 #(
    .INIT(32'hFFFEFFF7)) 
     \deskew_enable_gen.data_flip_sel[17]_i_2 
       (.I0(grp_count[0]),
        .I1(grp_count[1]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(grp_count[2]),
        .O(O9));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAEA)) 
     \deskew_enable_gen.data_flip_sel[1]_i_1 
       (.I0(data_flip_sel[1]),
        .I1(grp_flip),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(data_flip_sel0[1]));
LUT5 #(
    .INIT(32'hABAAAAAA)) 
     \deskew_enable_gen.data_flip_sel[2]_i_1 
       (.I0(data_flip_sel[2]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .I2(grp_count[2]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(grp_flip),
        .O(data_flip_sel0[2]));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.data_flip_sel[2]_i_2 
       (.I0(grp_count[0]),
        .I1(grp_count[1]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAE)) 
     \deskew_enable_gen.data_flip_sel[3]_i_1 
       (.I0(data_flip_sel[3]),
        .I1(grp_flip),
        .I2(grp_count[2]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[3]_i_2 ),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(data_flip_sel0[3]));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.data_flip_sel[3]_i_2 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[3]_i_2 ));
LUT5 #(
    .INIT(32'hABAAAAAA)) 
     \deskew_enable_gen.data_flip_sel[4]_i_1 
       (.I0(data_flip_sel[4]),
        .I1(grp_count[2]),
        .I2(grp_count[1]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(grp_flip),
        .O(data_flip_sel0[4]));
LUT5 #(
    .INIT(32'hABAAAAAA)) 
     \deskew_enable_gen.data_flip_sel[5]_i_1 
       (.I0(data_flip_sel[5]),
        .I1(grp_count[2]),
        .I2(grp_count[1]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I4(grp_flip),
        .O(data_flip_sel0[5]));
LUT5 #(
    .INIT(32'hAAABAAAA)) 
     \deskew_enable_gen.data_flip_sel[6]_i_1 
       (.I0(data_flip_sel[6]),
        .I1(grp_count[2]),
        .I2(grp_count[1]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I4(grp_flip),
        .O(data_flip_sel0[6]));
LUT3 #(
    .INIT(8'hBA)) 
     \deskew_enable_gen.data_flip_sel[7]_i_1 
       (.I0(data_flip_sel[7]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I2(grp_flip),
        .O(data_flip_sel0[7]));
(* SOFT_HLUTNM = "soft_lutpair82" *) 
   LUT5 #(
    .INIT(32'hFFFEFFFF)) 
     \deskew_enable_gen.data_flip_sel[7]_i_2 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[2]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .O(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ));
LUT6 #(
    .INIT(64'hAABAAAAAAAAAAAAA)) 
     \deskew_enable_gen.data_flip_sel[8]_i_1 
       (.I0(data_flip_sel[8]),
        .I1(grp_count[2]),
        .I2(grp_count[1]),
        .I3(grp_count[0]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I5(grp_flip),
        .O(data_flip_sel0[8]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAEAAAAA)) 
     \deskew_enable_gen.data_flip_sel[9]_i_1 
       (.I0(data_flip_sel[9]),
        .I1(grp_flip),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[2]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_flip_sel0[9]));
FDRE \deskew_enable_gen.data_flip_sel_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[0]),
        .Q(data_flip_sel[0]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[10]),
        .Q(data_flip_sel[10]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[11]),
        .Q(data_flip_sel[11]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[12]),
        .Q(data_flip_sel[12]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[13]),
        .Q(data_flip_sel[13]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[14]),
        .Q(data_flip_sel[14]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[15]),
        .Q(data_flip_sel[15]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[16]),
        .Q(data_flip_sel[16]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[17]),
        .Q(data_flip_sel[17]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[1]),
        .Q(data_flip_sel[1]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[2]),
        .Q(data_flip_sel[2]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[3]),
        .Q(data_flip_sel[3]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[4]),
        .Q(data_flip_sel[4]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[5]),
        .Q(data_flip_sel[5]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[6]),
        .Q(data_flip_sel[6]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[7]),
        .Q(data_flip_sel[7]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[8]),
        .Q(data_flip_sel[8]),
        .R(I1));
FDRE \deskew_enable_gen.data_flip_sel_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_flip_sel0[9]),
        .Q(data_flip_sel[9]),
        .R(I1));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[0]_i_1 
       (.I0(data_stage2[0]),
        .I1(data_stage0[0]),
        .I2(data_stage_sel1[0]),
        .I3(data_stage1[0]),
        .I4(data_stage_sel0[0]),
        .O(selected_data[0]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[10]_i_1 
       (.I0(data_stage2[10]),
        .I1(data_stage0[10]),
        .I2(data_stage_sel1[10]),
        .I3(data_stage1[10]),
        .I4(data_stage_sel0[10]),
        .O(selected_data[10]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[11]_i_1 
       (.I0(data_stage2[11]),
        .I1(data_stage0[11]),
        .I2(data_stage_sel1[11]),
        .I3(data_stage1[11]),
        .I4(data_stage_sel0[11]),
        .O(selected_data[11]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[12]_i_1 
       (.I0(data_stage2[12]),
        .I1(data_stage0[12]),
        .I2(data_stage_sel1[12]),
        .I3(data_stage1[12]),
        .I4(data_stage_sel0[12]),
        .O(selected_data[12]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[13]_i_1 
       (.I0(data_stage2[13]),
        .I1(data_stage0[13]),
        .I2(data_stage_sel1[13]),
        .I3(data_stage1[13]),
        .I4(data_stage_sel0[13]),
        .O(selected_data[13]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[14]_i_1 
       (.I0(data_stage2[14]),
        .I1(data_stage0[14]),
        .I2(data_stage_sel1[14]),
        .I3(data_stage1[14]),
        .I4(data_stage_sel0[14]),
        .O(selected_data[14]));
LUT5 #(
    .INIT(32'hCCB800B8)) 
     \deskew_enable_gen.data_out[15]_i_1 
       (.I0(data_stage0[15]),
        .I1(data_stage_sel1[15]),
        .I2(data_stage1[15]),
        .I3(data_stage_sel0[15]),
        .I4(data_stage2[15]),
        .O(selected_data[15]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[16]_i_1 
       (.I0(data_stage2[16]),
        .I1(data_stage0[16]),
        .I2(data_stage_sel1[16]),
        .I3(data_stage1[16]),
        .I4(data_stage_sel0[16]),
        .O(selected_data[16]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[17]_i_1 
       (.I0(data_stage2[17]),
        .I1(data_stage0[17]),
        .I2(data_stage_sel1[17]),
        .I3(data_stage1[17]),
        .I4(data_stage_sel0[17]),
        .O(selected_data[17]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[1]_i_1 
       (.I0(data_stage2[1]),
        .I1(data_stage0[1]),
        .I2(data_stage_sel1[1]),
        .I3(data_stage1[1]),
        .I4(data_stage_sel0[1]),
        .O(selected_data[1]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[2]_i_1 
       (.I0(data_stage2[2]),
        .I1(data_stage0[2]),
        .I2(data_stage_sel1[2]),
        .I3(data_stage1[2]),
        .I4(data_stage_sel0[2]),
        .O(selected_data[2]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[3]_i_1 
       (.I0(data_stage2[3]),
        .I1(data_stage0[3]),
        .I2(data_stage_sel1[3]),
        .I3(data_stage1[3]),
        .I4(data_stage_sel0[3]),
        .O(selected_data[3]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[4]_i_1 
       (.I0(data_stage2[4]),
        .I1(data_stage0[4]),
        .I2(data_stage_sel1[4]),
        .I3(data_stage1[4]),
        .I4(data_stage_sel0[4]),
        .O(selected_data[4]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[5]_i_1 
       (.I0(data_stage2[5]),
        .I1(data_stage0[5]),
        .I2(data_stage_sel1[5]),
        .I3(data_stage1[5]),
        .I4(data_stage_sel0[5]),
        .O(selected_data[5]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[6]_i_1 
       (.I0(data_stage2[6]),
        .I1(data_stage0[6]),
        .I2(data_stage_sel1[6]),
        .I3(data_stage1[6]),
        .I4(data_stage_sel0[6]),
        .O(selected_data[6]));
LUT5 #(
    .INIT(32'h44540054)) 
     \deskew_enable_gen.data_out[7]_i_1 
       (.I0(\n_0_deskew_enable_gen.data_out[7]_i_2 ),
        .I1(data_stage_sel1[7]),
        .I2(data_stage1[7]),
        .I3(data_stage_sel0[7]),
        .I4(data_stage2[7]),
        .O(selected_data[7]));
LUT5 #(
    .INIT(32'h00044404)) 
     \deskew_enable_gen.data_out[7]_i_2 
       (.I0(data_stage_sel0[7]),
        .I1(data_stage_sel1[7]),
        .I2(unalign_data[6]),
        .I3(data_flip_sel[7]),
        .I4(I2[6]),
        .O(\n_0_deskew_enable_gen.data_out[7]_i_2 ));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[8]_i_1 
       (.I0(data_stage2[8]),
        .I1(data_stage0[8]),
        .I2(data_stage_sel1[8]),
        .I3(data_stage1[8]),
        .I4(data_stage_sel0[8]),
        .O(selected_data[8]));
LUT5 #(
    .INIT(32'hA0A0CFC0)) 
     \deskew_enable_gen.data_out[9]_i_1 
       (.I0(data_stage2[9]),
        .I1(data_stage0[9]),
        .I2(data_stage_sel1[9]),
        .I3(data_stage1[9]),
        .I4(data_stage_sel0[9]),
        .O(selected_data[9]));
FDRE \deskew_enable_gen.data_out_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[0]),
        .Q(O5[0]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[10]),
        .Q(O5[10]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[11]),
        .Q(O5[11]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[12]),
        .Q(O5[12]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[13]),
        .Q(O5[13]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[14]),
        .Q(O5[14]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[15]),
        .Q(O5[15]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[16]),
        .Q(O5[16]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[17]),
        .Q(O5[17]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[1]),
        .Q(O5[1]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[2]),
        .Q(O5[2]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[3]),
        .Q(O5[3]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[4]),
        .Q(O5[4]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[5]),
        .Q(O5[5]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[6]),
        .Q(O5[6]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[7]),
        .Q(O5[7]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[8]),
        .Q(O5[8]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_out_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(selected_data[9]),
        .Q(O5[9]),
        .R(1'b0));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[0]_i_1 
       (.I0(unalign_data[0]),
        .I1(data_flip_sel[0]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[0] ),
        .O(data_stage0[0]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[10]_i_1 
       (.I0(unalign_data[10]),
        .I1(data_flip_sel[10]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[10] ),
        .O(data_stage0[10]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[11]_i_1 
       (.I0(I2[10]),
        .I1(data_flip_sel[11]),
        .I2(unalign_data[10]),
        .O(data_stage0[11]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[12]_i_1 
       (.I0(unalign_data[12]),
        .I1(data_flip_sel[12]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[12] ),
        .O(data_stage0[12]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[13]_i_1 
       (.I0(I2[12]),
        .I1(data_flip_sel[13]),
        .I2(unalign_data[12]),
        .O(data_stage0[13]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[14]_i_1 
       (.I0(unalign_data[14]),
        .I1(data_flip_sel[14]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[14] ),
        .O(data_stage0[14]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[15]_i_1 
       (.I0(I2[14]),
        .I1(data_flip_sel[15]),
        .I2(unalign_data[14]),
        .O(data_stage0[15]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[16]_i_1 
       (.I0(unalign_data[16]),
        .I1(data_flip_sel[16]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[16] ),
        .O(data_stage0[16]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[17]_i_1 
       (.I0(I2[16]),
        .I1(data_flip_sel[17]),
        .I2(unalign_data[16]),
        .O(data_stage0[17]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[1]_i_1 
       (.I0(I2[0]),
        .I1(data_flip_sel[1]),
        .I2(unalign_data[0]),
        .O(data_stage0[1]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[2]_i_1 
       (.I0(unalign_data[2]),
        .I1(data_flip_sel[2]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[2] ),
        .O(data_stage0[2]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[3]_i_1 
       (.I0(I2[2]),
        .I1(data_flip_sel[3]),
        .I2(unalign_data[2]),
        .O(data_stage0[3]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[4]_i_1 
       (.I0(unalign_data[4]),
        .I1(data_flip_sel[4]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[4] ),
        .O(data_stage0[4]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[5]_i_1 
       (.I0(I2[4]),
        .I1(data_flip_sel[5]),
        .I2(unalign_data[4]),
        .O(data_stage0[5]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[6]_i_1 
       (.I0(unalign_data[6]),
        .I1(data_flip_sel[6]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[6] ),
        .O(data_stage0[6]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[7]_i_1 
       (.I0(I2[6]),
        .I1(data_flip_sel[7]),
        .I2(unalign_data[6]),
        .O(data_stage0[7]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[8]_i_1 
       (.I0(unalign_data[8]),
        .I1(data_flip_sel[8]),
        .I2(\n_0_ddr_data_gen.data_dly_reg[8] ),
        .O(data_stage0[8]));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.data_stage1[9]_i_1 
       (.I0(I2[8]),
        .I1(data_flip_sel[9]),
        .I2(unalign_data[8]),
        .O(data_stage0[9]));
FDRE \deskew_enable_gen.data_stage1_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[0]),
        .Q(data_stage1[0]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[10]),
        .Q(data_stage1[10]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[11]),
        .Q(data_stage1[11]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[12]),
        .Q(data_stage1[12]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[13]),
        .Q(data_stage1[13]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[14]),
        .Q(data_stage1[14]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[15]),
        .Q(data_stage1[15]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[16]),
        .Q(data_stage1[16]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[17]),
        .Q(data_stage1[17]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[1]),
        .Q(data_stage1[1]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[2]),
        .Q(data_stage1[2]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[3]),
        .Q(data_stage1[3]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[4]),
        .Q(data_stage1[4]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[5]),
        .Q(data_stage1[5]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[6]),
        .Q(data_stage1[6]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[7]),
        .Q(data_stage1[7]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[8]),
        .Q(data_stage1[8]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage1_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage0[9]),
        .Q(data_stage1[9]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[0]),
        .Q(data_stage2[0]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[10]),
        .Q(data_stage2[10]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[11]),
        .Q(data_stage2[11]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[12]),
        .Q(data_stage2[12]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[13]),
        .Q(data_stage2[13]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[14]),
        .Q(data_stage2[14]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[15]),
        .Q(data_stage2[15]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[16]),
        .Q(data_stage2[16]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[17]),
        .Q(data_stage2[17]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[1]),
        .Q(data_stage2[1]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[2]),
        .Q(data_stage2[2]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[3]),
        .Q(data_stage2[3]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[4]),
        .Q(data_stage2[4]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[5]),
        .Q(data_stage2[5]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[6]),
        .Q(data_stage2[6]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[7]),
        .Q(data_stage2[7]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[8]),
        .Q(data_stage2[8]),
        .R(1'b0));
FDRE \deskew_enable_gen.data_stage2_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(data_stage1[9]),
        .Q(data_stage2[9]),
        .R(1'b0));
LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
     \deskew_enable_gen.data_stage_sel0[0]_i_1 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .I5(data_stage_sel0[0]),
        .O(data_stage_sel00[0]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAA8ABA8)) 
     \deskew_enable_gen.data_stage_sel0[10]_i_1 
       (.I0(data_stage_sel0[10]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(grp_count[2]),
        .O(data_stage_sel00[10]));
LUT6 #(
    .INIT(64'hFFFEFFFE00000100)) 
     \deskew_enable_gen.data_stage_sel0[11]_i_1 
       (.I0(grp_count[2]),
        .I1(grp_count[4]),
        .I2(grp_count[3]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(data_stage_sel0[11]),
        .O(data_stage_sel00[11]));
LUT6 #(
    .INIT(64'hFFFFFFF800000008)) 
     \deskew_enable_gen.data_stage_sel0[12]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(grp_count[2]),
        .I5(data_stage_sel0[12]),
        .O(data_stage_sel00[12]));
LUT6 #(
    .INIT(64'hFFFFFFF800000008)) 
     \deskew_enable_gen.data_stage_sel0[13]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(grp_count[2]),
        .I5(data_stage_sel0[13]),
        .O(data_stage_sel00[13]));
LUT6 #(
    .INIT(64'hAAABAAA8AAA8AAA8)) 
     \deskew_enable_gen.data_stage_sel0[14]_i_1 
       (.I0(data_stage_sel0[14]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel00[14]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAACA0)) 
     \deskew_enable_gen.data_stage_sel0[15]_i_1 
       (.I0(data_stage_sel0[15]),
        .I1(grp_count[0]),
        .I2(grp_count[2]),
        .I3(grp_count[1]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(data_stage_sel00[15]));
LUT6 #(
    .INIT(64'hAAABAAA8AAA8AAAC)) 
     \deskew_enable_gen.data_stage_sel0[16]_i_1 
       (.I0(data_stage_sel0[16]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(data_stage_sel00[16]));
LUT3 #(
    .INIT(8'h08)) 
     \deskew_enable_gen.data_stage_sel0[17]_i_1 
       (.I0(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_3 ),
        .I1(grp_p1_val),
        .I2(grp_p3_val),
        .O(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ));
LUT6 #(
    .INIT(64'hAAABAAA8AAA8AAAC)) 
     \deskew_enable_gen.data_stage_sel0[17]_i_2 
       (.I0(data_stage_sel0[17]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel00[17]));
LUT6 #(
    .INIT(64'h0000000000000080)) 
     \deskew_enable_gen.data_stage_sel0[17]_i_3 
       (.I0(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_4 ),
        .I1(\n_0_deskew_enable_gen.grp_count[4]_i_5 ),
        .I2(\n_0_deskew_enable_gen.count[2]_i_5 ),
        .I3(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_5 ),
        .I4(state[11]),
        .I5(grp_p0_val),
        .O(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair81" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.data_stage_sel0[17]_i_4 
       (.I0(state[4]),
        .I1(state[5]),
        .I2(state[6]),
        .I3(state[2]),
        .I4(state[1]),
        .I5(state[3]),
        .O(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_4 ));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.data_stage_sel0[17]_i_5 
       (.I0(state[9]),
        .I1(state[0]),
        .O(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_5 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
     \deskew_enable_gen.data_stage_sel0[1]_i_1 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .I5(data_stage_sel0[1]),
        .O(data_stage_sel00[1]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
     \deskew_enable_gen.data_stage_sel0[2]_i_1 
       (.I0(data_stage_sel0[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(grp_count[2]),
        .O(data_stage_sel00[2]));
LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
     \deskew_enable_gen.data_stage_sel0[3]_i_1 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .I5(data_stage_sel0[3]),
        .O(data_stage_sel00[3]));
LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
     \deskew_enable_gen.data_stage_sel0[4]_i_1 
       (.I0(data_stage_sel0[4]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel00[4]));
LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
     \deskew_enable_gen.data_stage_sel0[5]_i_1 
       (.I0(data_stage_sel0[5]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel00[5]));
LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
     \deskew_enable_gen.data_stage_sel0[6]_i_1 
       (.I0(data_stage_sel0[6]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel00[6]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAC)) 
     \deskew_enable_gen.data_stage_sel0[7]_i_1 
       (.I0(data_stage_sel0[7]),
        .I1(grp_count[0]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(data_stage_sel00[7]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAABA8A8)) 
     \deskew_enable_gen.data_stage_sel0[8]_i_1 
       (.I0(data_stage_sel0[8]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(data_stage_sel00[8]));
LUT6 #(
    .INIT(64'hFFFEFFFE00000100)) 
     \deskew_enable_gen.data_stage_sel0[9]_i_1 
       (.I0(grp_count[2]),
        .I1(grp_count[4]),
        .I2(grp_count[3]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(data_stage_sel0[9]),
        .O(data_stage_sel00[9]));
FDRE \deskew_enable_gen.data_stage_sel0_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[0]),
        .Q(data_stage_sel0[0]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[10] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[10]),
        .Q(data_stage_sel0[10]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[11] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[11]),
        .Q(data_stage_sel0[11]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[12] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[12]),
        .Q(data_stage_sel0[12]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[13] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[13]),
        .Q(data_stage_sel0[13]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[14] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[14]),
        .Q(data_stage_sel0[14]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[15] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[15]),
        .Q(data_stage_sel0[15]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[16] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[16]),
        .Q(data_stage_sel0[16]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[17] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[17]),
        .Q(data_stage_sel0[17]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[1]),
        .Q(data_stage_sel0[1]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[2]),
        .Q(data_stage_sel0[2]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[3]),
        .Q(data_stage_sel0[3]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[4]),
        .Q(data_stage_sel0[4]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[5] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[5]),
        .Q(data_stage_sel0[5]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[6] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[6]),
        .Q(data_stage_sel0[6]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[7] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[7]),
        .Q(data_stage_sel0[7]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[8] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[8]),
        .Q(data_stage_sel0[8]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel0_reg[9] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_1 ),
        .D(data_stage_sel00[9]),
        .Q(data_stage_sel0[9]),
        .R(I1));
LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
     \deskew_enable_gen.data_stage_sel1[0]_i_1 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .I5(data_stage_sel1[0]),
        .O(data_stage_sel10[0]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAA8ABA8)) 
     \deskew_enable_gen.data_stage_sel1[10]_i_1 
       (.I0(data_stage_sel1[10]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(grp_count[2]),
        .O(data_stage_sel10[10]));
LUT6 #(
    .INIT(64'hFFFEFFFE00000100)) 
     \deskew_enable_gen.data_stage_sel1[11]_i_1 
       (.I0(grp_count[2]),
        .I1(grp_count[4]),
        .I2(grp_count[3]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(data_stage_sel1[11]),
        .O(data_stage_sel10[11]));
LUT6 #(
    .INIT(64'hFFFFFFF800000008)) 
     \deskew_enable_gen.data_stage_sel1[12]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(grp_count[2]),
        .I5(data_stage_sel1[12]),
        .O(data_stage_sel10[12]));
LUT6 #(
    .INIT(64'hFFFFFFF800000008)) 
     \deskew_enable_gen.data_stage_sel1[13]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(grp_count[2]),
        .I5(data_stage_sel1[13]),
        .O(data_stage_sel10[13]));
LUT6 #(
    .INIT(64'hAAABAAA8AAA8AAA8)) 
     \deskew_enable_gen.data_stage_sel1[14]_i_1 
       (.I0(data_stage_sel1[14]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel10[14]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAACA0)) 
     \deskew_enable_gen.data_stage_sel1[15]_i_1 
       (.I0(data_stage_sel1[15]),
        .I1(grp_count[0]),
        .I2(grp_count[2]),
        .I3(grp_count[1]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(data_stage_sel10[15]));
LUT6 #(
    .INIT(64'hAAABAAA8AAA8AAAC)) 
     \deskew_enable_gen.data_stage_sel1[16]_i_1 
       (.I0(data_stage_sel1[16]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(data_stage_sel10[16]));
LUT3 #(
    .INIT(8'h28)) 
     \deskew_enable_gen.data_stage_sel1[17]_i_1 
       (.I0(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_3 ),
        .I1(grp_p1_val),
        .I2(grp_p3_val),
        .O(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ));
LUT6 #(
    .INIT(64'hAAABAAA8AAA8AAAC)) 
     \deskew_enable_gen.data_stage_sel1[17]_i_2 
       (.I0(data_stage_sel1[17]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel10[17]));
LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
     \deskew_enable_gen.data_stage_sel1[1]_i_1 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .I5(data_stage_sel1[1]),
        .O(data_stage_sel10[1]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
     \deskew_enable_gen.data_stage_sel1[2]_i_1 
       (.I0(data_stage_sel1[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(grp_count[2]),
        .O(data_stage_sel10[2]));
LUT6 #(
    .INIT(64'hFFFFFFFF00000001)) 
     \deskew_enable_gen.data_stage_sel1[3]_i_1 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .I5(data_stage_sel1[3]),
        .O(data_stage_sel10[3]));
LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
     \deskew_enable_gen.data_stage_sel1[4]_i_1 
       (.I0(data_stage_sel1[4]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel10[4]));
LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
     \deskew_enable_gen.data_stage_sel1[5]_i_1 
       (.I0(data_stage_sel1[5]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel10[5]));
LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
     \deskew_enable_gen.data_stage_sel1[6]_i_1 
       (.I0(data_stage_sel1[6]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(data_stage_sel10[6]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAC)) 
     \deskew_enable_gen.data_stage_sel1[7]_i_1 
       (.I0(data_stage_sel1[7]),
        .I1(grp_count[0]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(data_stage_sel10[7]));
LUT6 #(
    .INIT(64'hAAAAAAAAAAABA8A8)) 
     \deskew_enable_gen.data_stage_sel1[8]_i_1 
       (.I0(data_stage_sel1[8]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(data_stage_sel10[8]));
LUT6 #(
    .INIT(64'hFFFEFFFE00000100)) 
     \deskew_enable_gen.data_stage_sel1[9]_i_1 
       (.I0(grp_count[2]),
        .I1(grp_count[4]),
        .I2(grp_count[3]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(data_stage_sel1[9]),
        .O(data_stage_sel10[9]));
FDRE \deskew_enable_gen.data_stage_sel1_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[0]),
        .Q(data_stage_sel1[0]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[10] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[10]),
        .Q(data_stage_sel1[10]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[11] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[11]),
        .Q(data_stage_sel1[11]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[12] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[12]),
        .Q(data_stage_sel1[12]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[13] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[13]),
        .Q(data_stage_sel1[13]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[14] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[14]),
        .Q(data_stage_sel1[14]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[15] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[15]),
        .Q(data_stage_sel1[15]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[16] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[16]),
        .Q(data_stage_sel1[16]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[17] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[17]),
        .Q(data_stage_sel1[17]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[1]),
        .Q(data_stage_sel1[1]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[2]),
        .Q(data_stage_sel1[2]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[3]),
        .Q(data_stage_sel1[3]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[4]),
        .Q(data_stage_sel1[4]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[5] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[5]),
        .Q(data_stage_sel1[5]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[6] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[6]),
        .Q(data_stage_sel1[6]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[7] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[7]),
        .Q(data_stage_sel1[7]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[8] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[8]),
        .Q(data_stage_sel1[8]),
        .R(I1));
FDRE \deskew_enable_gen.data_stage_sel1_reg[9] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.data_stage_sel1[17]_i_1 ),
        .D(data_stage_sel10[9]),
        .Q(data_stage_sel1[9]),
        .R(I1));
LUT6 #(
    .INIT(64'h0010000000000000)) 
     \deskew_enable_gen.delay_load[0]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[2]),
        .I4(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I5(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .O(\n_0_deskew_enable_gen.delay_load[0]_i_1 ));
LUT5 #(
    .INIT(32'h00000080)) 
     \deskew_enable_gen.delay_load[10]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[0]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .O(delay_load0[10]));
LUT5 #(
    .INIT(32'h40000000)) 
     \deskew_enable_gen.delay_load[12]_i_1 
       (.I0(grp_count[2]),
        .I1(grp_count[1]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I3(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I4(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .O(\n_0_deskew_enable_gen.delay_load[12]_i_1 ));
LUT5 #(
    .INIT(32'h00080000)) 
     \deskew_enable_gen.delay_load[14]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I3(grp_count[2]),
        .I4(grp_count[1]),
        .O(delay_load0[14]));
LUT3 #(
    .INIT(8'h08)) 
     \deskew_enable_gen.delay_load[16]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(O8),
        .O(delay_load0[16]));
LUT4 #(
    .INIT(16'h0012)) 
     \deskew_enable_gen.delay_load[16]_i_2 
       (.I0(\n_0_deskew_enable_gen.delay_load[16]_i_3 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_4 ),
        .I2(\n_0_deskew_enable_gen.delay_load[16]_i_5 ),
        .I3(\n_0_deskew_enable_gen.delay_load[16]_i_6 ),
        .O(\n_0_deskew_enable_gen.delay_load[16]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair95" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.delay_load[16]_i_3 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[5]),
        .O(\n_0_deskew_enable_gen.delay_load[16]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair96" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
     \deskew_enable_gen.delay_load[16]_i_4 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[5]),
        .O(\n_0_deskew_enable_gen.delay_load[16]_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair97" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.delay_load[16]_i_5 
       (.I0(state[6]),
        .I1(state[7]),
        .I2(state[8]),
        .I3(state[9]),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.delay_load[16]_i_5 ));
(* SOFT_HLUTNM = "soft_lutpair111" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
     \deskew_enable_gen.delay_load[16]_i_6 
       (.I0(state[6]),
        .I1(state[7]),
        .I2(state[8]),
        .I3(state[9]),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.delay_load[16]_i_6 ));
LUT5 #(
    .INIT(32'h00000080)) 
     \deskew_enable_gen.delay_load[2]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[2]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .O(delay_load0[2]));
LUT5 #(
    .INIT(32'h00000080)) 
     \deskew_enable_gen.delay_load[4]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .O(delay_load0[4]));
LUT5 #(
    .INIT(32'h00000008)) 
     \deskew_enable_gen.delay_load[6]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .O(delay_load0[6]));
LUT6 #(
    .INIT(64'h0000000000800000)) 
     \deskew_enable_gen.delay_load[8]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_load[16]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(delay_load0[8]));
FDRE \deskew_enable_gen.delay_load_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.delay_load[0]_i_1 ),
        .Q(O10[0]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[10]),
        .Q(O10[5]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.delay_load[12]_i_1 ),
        .Q(O10[6]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[14]),
        .Q(O10[7]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[16]),
        .Q(O10[8]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[2]),
        .Q(O10[1]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[4]),
        .Q(O10[2]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[6]),
        .Q(O10[3]),
        .R(I1));
FDRE \deskew_enable_gen.delay_load_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(delay_load0[8]),
        .Q(O10[4]),
        .R(I1));
LUT6 #(
    .INIT(64'h4F444FFF44444444)) 
     \deskew_enable_gen.delay_tap[0]_i_1 
       (.I0(O3[0]),
        .I1(state[7]),
        .I2(\n_0_deskew_enable_gen.delay_tap[0]_i_2 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ),
        .I4(\n_0_deskew_enable_gen.delay_tap[0]_i_3 ),
        .I5(state[8]),
        .O(\n_0_deskew_enable_gen.delay_tap[0]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair87" *) 
   LUT4 #(
    .INIT(16'h6999)) 
     \deskew_enable_gen.delay_tap[0]_i_2 
       (.I0(max_value_1[1]),
        .I1(min_value_1[1]),
        .I2(max_value_1[0]),
        .I3(min_value_1[0]),
        .O(\n_0_deskew_enable_gen.delay_tap[0]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair94" *) 
   LUT4 #(
    .INIT(16'h6999)) 
     \deskew_enable_gen.delay_tap[0]_i_3 
       (.I0(max_value_0[1]),
        .I1(min_value_0[1]),
        .I2(max_value_0[0]),
        .I3(min_value_0[0]),
        .O(\n_0_deskew_enable_gen.delay_tap[0]_i_3 ));
LUT5 #(
    .INIT(32'hBABFAAAA)) 
     \deskew_enable_gen.delay_tap[1]_i_1 
       (.I0(\n_0_deskew_enable_gen.delay_tap[1]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_tap[1]_i_3 ),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[1]_i_4 ),
        .I4(state[8]),
        .O(\n_0_deskew_enable_gen.delay_tap[1]_i_1 ));
LUT3 #(
    .INIT(8'h60)) 
     \deskew_enable_gen.delay_tap[1]_i_2 
       (.I0(O3[1]),
        .I1(O3[0]),
        .I2(state[7]),
        .O(\n_0_deskew_enable_gen.delay_tap[1]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair86" *) 
   LUT6 #(
    .INIT(64'h6666699969999999)) 
     \deskew_enable_gen.delay_tap[1]_i_3 
       (.I0(max_value_1[2]),
        .I1(min_value_1[2]),
        .I2(max_value_1[0]),
        .I3(min_value_1[0]),
        .I4(max_value_1[1]),
        .I5(min_value_1[1]),
        .O(\n_0_deskew_enable_gen.delay_tap[1]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair92" *) 
   LUT6 #(
    .INIT(64'h6666699969999999)) 
     \deskew_enable_gen.delay_tap[1]_i_4 
       (.I0(max_value_0[2]),
        .I1(min_value_0[2]),
        .I2(max_value_0[0]),
        .I3(min_value_0[0]),
        .I4(max_value_0[1]),
        .I5(min_value_0[1]),
        .O(\n_0_deskew_enable_gen.delay_tap[1]_i_4 ));
LUT6 #(
    .INIT(64'hEBAAEBFFAAAAAAAA)) 
     \deskew_enable_gen.delay_tap[2]_i_1 
       (.I0(\n_0_deskew_enable_gen.delay_tap[2]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_tap[2]_i_3 ),
        .I2(\n_0_deskew_enable_gen.delay_tap[2]_i_4 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ),
        .I4(\n_0_deskew_enable_gen.delay_tap[2]_i_5 ),
        .I5(state[8]),
        .O(\n_0_deskew_enable_gen.delay_tap[2]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair121" *) 
   LUT4 #(
    .INIT(16'h2A80)) 
     \deskew_enable_gen.delay_tap[2]_i_2 
       (.I0(state[7]),
        .I1(O3[0]),
        .I2(O3[1]),
        .I3(O3[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[2]_i_2 ));
LUT2 #(
    .INIT(4'h9)) 
     \deskew_enable_gen.delay_tap[2]_i_3 
       (.I0(min_value_1[3]),
        .I1(max_value_1[3]),
        .O(\n_0_deskew_enable_gen.delay_tap[2]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair87" *) 
   LUT6 #(
    .INIT(64'hFEEAEAEAA8808080)) 
     \deskew_enable_gen.delay_tap[2]_i_4 
       (.I0(min_value_1[2]),
        .I1(min_value_1[1]),
        .I2(max_value_1[1]),
        .I3(min_value_1[0]),
        .I4(max_value_1[0]),
        .I5(max_value_1[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[2]_i_4 ));
LUT3 #(
    .INIT(8'h69)) 
     \deskew_enable_gen.delay_tap[2]_i_5 
       (.I0(max_value_0[3]),
        .I1(min_value_0[3]),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_15 ),
        .O(\n_0_deskew_enable_gen.delay_tap[2]_i_5 ));
LUT6 #(
    .INIT(64'hBEAABEFFAAAAAAAA)) 
     \deskew_enable_gen.delay_tap[3]_i_1 
       (.I0(\n_0_deskew_enable_gen.delay_tap[3]_i_2 ),
        .I1(\n_0_deskew_enable_gen.delay_tap[3]_i_3 ),
        .I2(\n_0_deskew_enable_gen.delay_tap[3]_i_4 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ),
        .I4(\n_0_deskew_enable_gen.delay_tap[3]_i_5 ),
        .I5(state[8]),
        .O(\n_0_deskew_enable_gen.delay_tap[3]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair106" *) 
   LUT5 #(
    .INIT(32'h2AAA8000)) 
     \deskew_enable_gen.delay_tap[3]_i_2 
       (.I0(state[7]),
        .I1(O3[1]),
        .I2(O3[0]),
        .I3(O3[2]),
        .I4(O3[3]),
        .O(\n_0_deskew_enable_gen.delay_tap[3]_i_2 ));
LUT2 #(
    .INIT(4'h6)) 
     \deskew_enable_gen.delay_tap[3]_i_3 
       (.I0(min_value_1[4]),
        .I1(max_value_1[4]),
        .O(\n_0_deskew_enable_gen.delay_tap[3]_i_3 ));
LUT3 #(
    .INIT(8'hE8)) 
     \deskew_enable_gen.delay_tap[3]_i_4 
       (.I0(min_value_1[3]),
        .I1(\n_0_deskew_enable_gen.delay_tap[2]_i_4 ),
        .I2(max_value_1[3]),
        .O(\n_0_deskew_enable_gen.delay_tap[3]_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair116" *) 
   LUT5 #(
    .INIT(32'h66696999)) 
     \deskew_enable_gen.delay_tap[3]_i_5 
       (.I0(max_value_0[4]),
        .I1(min_value_0[4]),
        .I2(max_value_0[3]),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_15 ),
        .I4(min_value_0[3]),
        .O(\n_0_deskew_enable_gen.delay_tap[3]_i_5 ));
LUT6 #(
    .INIT(64'h0000000001170112)) 
     \deskew_enable_gen.delay_tap[4]_i_1 
       (.I0(state[8]),
        .I1(state[7]),
        .I2(state[0]),
        .I3(state[9]),
        .I4(\n_0_deskew_enable_gen.delay_tap[4]_i_3 ),
        .I5(\n_0_deskew_enable_gen.delay_tap[4]_i_4 ),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair120" *) 
   LUT3 #(
    .INIT(8'h69)) 
     \deskew_enable_gen.delay_tap[4]_i_10 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_17 ),
        .I1(max_value_0[3]),
        .I2(min_value_0[3]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_10 ));
LUT5 #(
    .INIT(32'h00B2B2FF)) 
     \deskew_enable_gen.delay_tap[4]_i_11 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_18 ),
        .I1(\n_0_deskew_enable_gen.delay_tap[4]_i_19 ),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_20 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_21 ),
        .I4(\n_0_deskew_enable_gen.delay_tap[4]_i_22 ),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair120" *) 
   LUT5 #(
    .INIT(32'hB24D4DB2)) 
     \deskew_enable_gen.delay_tap[4]_i_12 
       (.I0(min_value_0[3]),
        .I1(max_value_0[3]),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_17 ),
        .I3(max_value_0[4]),
        .I4(min_value_0[4]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_12 ));
(* SOFT_HLUTNM = "soft_lutpair118" *) 
   LUT5 #(
    .INIT(32'h718E8E71)) 
     \deskew_enable_gen.delay_tap[4]_i_13 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_16 ),
        .I1(max_value_1[3]),
        .I2(min_value_1[3]),
        .I3(max_value_1[4]),
        .I4(min_value_1[4]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_13 ));
(* SOFT_HLUTNM = "soft_lutpair117" *) 
   LUT3 #(
    .INIT(8'h15)) 
     \deskew_enable_gen.delay_tap[4]_i_14 
       (.I0(step_count[2]),
        .I1(step_count[0]),
        .I2(step_count[1]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_14 ));
(* SOFT_HLUTNM = "soft_lutpair94" *) 
   LUT6 #(
    .INIT(64'hFEEAEAEAA8808080)) 
     \deskew_enable_gen.delay_tap[4]_i_15 
       (.I0(min_value_0[2]),
        .I1(min_value_0[1]),
        .I2(max_value_0[1]),
        .I3(min_value_0[0]),
        .I4(max_value_0[0]),
        .I5(max_value_0[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_15 ));
LUT6 #(
    .INIT(64'hD4DD0000FFFFD4DD)) 
     \deskew_enable_gen.delay_tap[4]_i_16 
       (.I0(min_value_1[1]),
        .I1(max_value_1[1]),
        .I2(max_value_1[0]),
        .I3(min_value_1[0]),
        .I4(max_value_1[2]),
        .I5(min_value_1[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_16 ));
LUT6 #(
    .INIT(64'h2B22FFFF00002B22)) 
     \deskew_enable_gen.delay_tap[4]_i_17 
       (.I0(min_value_0[1]),
        .I1(max_value_0[1]),
        .I2(max_value_0[0]),
        .I3(min_value_0[0]),
        .I4(max_value_0[2]),
        .I5(min_value_0[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_17 ));
(* SOFT_HLUTNM = "soft_lutpair86" *) 
   LUT4 #(
    .INIT(16'hD22D)) 
     \deskew_enable_gen.delay_tap[4]_i_18 
       (.I0(min_value_1[0]),
        .I1(max_value_1[0]),
        .I2(max_value_1[1]),
        .I3(min_value_1[1]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_18 ));
(* SOFT_HLUTNM = "soft_lutpair92" *) 
   LUT4 #(
    .INIT(16'hD22D)) 
     \deskew_enable_gen.delay_tap[4]_i_19 
       (.I0(min_value_0[0]),
        .I1(max_value_0[0]),
        .I2(max_value_0[1]),
        .I3(min_value_0[1]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_19 ));
LUT5 #(
    .INIT(32'hBABFAAAA)) 
     \deskew_enable_gen.delay_tap[4]_i_2 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_5 ),
        .I1(\n_0_deskew_enable_gen.delay_tap[4]_i_6 ),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_8 ),
        .I4(state[8]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_2 ));
LUT4 #(
    .INIT(16'hF66F)) 
     \deskew_enable_gen.delay_tap[4]_i_20 
       (.I0(max_value_0[0]),
        .I1(min_value_0[0]),
        .I2(max_value_1[0]),
        .I3(min_value_1[0]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_20 ));
LUT6 #(
    .INIT(64'hD0FD2F022F02D0FD)) 
     \deskew_enable_gen.delay_tap[4]_i_21 
       (.I0(min_value_0[0]),
        .I1(max_value_0[0]),
        .I2(max_value_0[1]),
        .I3(min_value_0[1]),
        .I4(max_value_0[2]),
        .I5(min_value_0[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_21 ));
LUT6 #(
    .INIT(64'h2F02D0FDD0FD2F02)) 
     \deskew_enable_gen.delay_tap[4]_i_22 
       (.I0(min_value_1[0]),
        .I1(max_value_1[0]),
        .I2(max_value_1[1]),
        .I3(min_value_1[1]),
        .I4(max_value_1[2]),
        .I5(min_value_1[2]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_22 ));
LUT4 #(
    .INIT(16'h0444)) 
     \deskew_enable_gen.delay_tap[4]_i_3 
       (.I0(\n_0_deskew_enable_gen.state[8]_i_2 ),
        .I1(state[7]),
        .I2(step_count[2]),
        .I3(step_count[1]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair103" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
     \deskew_enable_gen.delay_tap[4]_i_4 
       (.I0(state[11]),
        .I1(state[10]),
        .I2(state[3]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(\n_0_deskew_enable_gen.state[11]_i_6 ),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair106" *) 
   LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
     \deskew_enable_gen.delay_tap[4]_i_5 
       (.I0(state[7]),
        .I1(O3[2]),
        .I2(O3[0]),
        .I3(O3[1]),
        .I4(O3[3]),
        .I5(O3[4]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_5 ));
(* SOFT_HLUTNM = "soft_lutpair118" *) 
   LUT5 #(
    .INIT(32'h0115577F)) 
     \deskew_enable_gen.delay_tap[4]_i_6 
       (.I0(min_value_1[4]),
        .I1(min_value_1[3]),
        .I2(\n_0_deskew_enable_gen.delay_tap[2]_i_4 ),
        .I3(max_value_1[3]),
        .I4(max_value_1[4]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_6 ));
LUT6 #(
    .INIT(64'h000000008EFF008E)) 
     \deskew_enable_gen.delay_tap[4]_i_7 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_9 ),
        .I1(\n_0_deskew_enable_gen.delay_tap[4]_i_10 ),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_11 ),
        .I3(\n_0_deskew_enable_gen.delay_tap[4]_i_12 ),
        .I4(\n_0_deskew_enable_gen.delay_tap[4]_i_13 ),
        .I5(\n_0_deskew_enable_gen.delay_tap[4]_i_14 ),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ));
(* SOFT_HLUTNM = "soft_lutpair116" *) 
   LUT5 #(
    .INIT(32'h0115577F)) 
     \deskew_enable_gen.delay_tap[4]_i_8 
       (.I0(min_value_0[4]),
        .I1(min_value_0[3]),
        .I2(\n_0_deskew_enable_gen.delay_tap[4]_i_15 ),
        .I3(max_value_0[3]),
        .I4(max_value_0[4]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_8 ));
LUT3 #(
    .INIT(8'h69)) 
     \deskew_enable_gen.delay_tap[4]_i_9 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_16 ),
        .I1(max_value_1[3]),
        .I2(min_value_1[3]),
        .O(\n_0_deskew_enable_gen.delay_tap[4]_i_9 ));
FDRE \deskew_enable_gen.delay_tap_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.delay_tap[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.delay_tap[0]_i_1 ),
        .Q(O3[0]),
        .R(I1));
FDRE \deskew_enable_gen.delay_tap_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.delay_tap[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.delay_tap[1]_i_1 ),
        .Q(O3[1]),
        .R(I1));
FDRE \deskew_enable_gen.delay_tap_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.delay_tap[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.delay_tap[2]_i_1 ),
        .Q(O3[2]),
        .R(I1));
FDRE \deskew_enable_gen.delay_tap_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.delay_tap[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.delay_tap[3]_i_1 ),
        .Q(O3[3]),
        .R(I1));
FDRE \deskew_enable_gen.delay_tap_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.delay_tap[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.delay_tap[4]_i_2 ),
        .Q(O3[4]),
        .R(I1));
(* SOFT_HLUTNM = "soft_lutpair119" *) 
   LUT5 #(
    .INIT(32'h00010101)) 
     \deskew_enable_gen.dout_p0_val_i_10 
       (.I0(grp_count[2]),
        .I1(grp_count[4]),
        .I2(grp_count[3]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair113" *) 
   LUT4 #(
    .INIT(16'h44CF)) 
     \deskew_enable_gen.dout_p0_val_i_11 
       (.I0(data_stage2[7]),
        .I1(data_stage_sel0[7]),
        .I2(data_stage1[7]),
        .I3(data_stage_sel1[7]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair119" *) 
   LUT4 #(
    .INIT(16'h0001)) 
     \deskew_enable_gen.dout_p0_val_i_12 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[2]),
        .I3(grp_count[1]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_12 ));
LUT6 #(
    .INIT(64'h0F002F223F003F22)) 
     \deskew_enable_gen.dout_p0_val_i_3 
       (.I0(selected_data[16]),
        .I1(selected_data[15]),
        .I2(grp_count[2]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(selected_data[17]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_3 ));
LUT6 #(
    .INIT(64'h40404040404040FF)) 
     \deskew_enable_gen.dout_p0_val_i_4 
       (.I0(selected_data[13]),
        .I1(selected_data[12]),
        .I2(selected_data[14]),
        .I3(grp_count[3]),
        .I4(grp_count[4]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_4 ));
LUT6 #(
    .INIT(64'h0FFF00002FFF2222)) 
     \deskew_enable_gen.dout_p0_val_i_5 
       (.I0(selected_data[10]),
        .I1(selected_data[9]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(\n_0_deskew_enable_gen.dout_p0_val_i_9 ),
        .I5(selected_data[11]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_5 ));
LUT6 #(
    .INIT(64'hEEEEEEE0EE00EE00)) 
     \deskew_enable_gen.dout_p0_val_i_6 
       (.I0(\n_0_deskew_enable_gen.dout_p0_val_i_10 ),
        .I1(selected_data[8]),
        .I2(\n_0_deskew_enable_gen.dout_p0_val_i_11 ),
        .I3(\n_0_deskew_enable_gen.dout_p0_val_i_12 ),
        .I4(\n_0_deskew_enable_gen.data_out[7]_i_2 ),
        .I5(selected_data[6]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_6 ));
LUT6 #(
    .INIT(64'h00A2F3F300A200A2)) 
     \deskew_enable_gen.dout_p0_val_i_7 
       (.I0(selected_data[4]),
        .I1(selected_data[3]),
        .I2(\n_0_deskew_enable_gen.state[10]_i_2 ),
        .I3(selected_data[5]),
        .I4(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_7 ));
LUT4 #(
    .INIT(16'hFF40)) 
     \deskew_enable_gen.dout_p0_val_i_8 
       (.I0(selected_data[1]),
        .I1(selected_data[0]),
        .I2(selected_data[2]),
        .I3(\n_0_deskew_enable_gen.state[10]_i_2 ),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_8 ));
LUT3 #(
    .INIT(8'h01)) 
     \deskew_enable_gen.dout_p0_val_i_9 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[2]),
        .O(\n_0_deskew_enable_gen.dout_p0_val_i_9 ));
FDRE \deskew_enable_gen.dout_p0_val_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(dout_p0_val0),
        .Q(dout_p0_val),
        .R(1'b0));
CARRY4 \deskew_enable_gen.dout_p0_val_reg_i_1 
       (.CI(\n_0_deskew_enable_gen.dout_p0_val_reg_i_2 ),
        .CO({\NLW_deskew_enable_gen.dout_p0_val_reg_i_1_CO_UNCONNECTED [3:2],dout_p0_val0,\n_3_deskew_enable_gen.dout_p0_val_reg_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.dout_p0_val_reg_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.dout_p0_val_i_3 ,\n_0_deskew_enable_gen.dout_p0_val_i_4 }));
CARRY4 \deskew_enable_gen.dout_p0_val_reg_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.dout_p0_val_reg_i_2 ,\n_1_deskew_enable_gen.dout_p0_val_reg_i_2 ,\n_2_deskew_enable_gen.dout_p0_val_reg_i_2 ,\n_3_deskew_enable_gen.dout_p0_val_reg_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.dout_p0_val_reg_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.dout_p0_val_i_5 ,\n_0_deskew_enable_gen.dout_p0_val_i_6 ,\n_0_deskew_enable_gen.dout_p0_val_i_7 ,\n_0_deskew_enable_gen.dout_p0_val_i_8 }));
LUT6 #(
    .INIT(64'hDD0DDD0DDD0D0000)) 
     \deskew_enable_gen.f0_val[0]_i_3 
       (.I0(I2[14]),
        .I1(O2),
        .I2(I2[16]),
        .I3(O9),
        .I4(O8),
        .I5(unalign_data[16]),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_3 ));
LUT6 #(
    .INIT(64'h5555151555551500)) 
     \deskew_enable_gen.f0_val[0]_i_4 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_9 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[12]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I5(unalign_data[14]),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_4 ));
LUT6 #(
    .INIT(64'h000000000000FFDF)) 
     \deskew_enable_gen.f0_val[0]_i_5 
       (.I0(I2[8]),
        .I1(grp_count[0]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I4(\n_0_deskew_enable_gen.f1_val[0]_i_10 ),
        .I5(\n_0_deskew_enable_gen.f0_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h00000000FEFE00FE)) 
     \deskew_enable_gen.f0_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I1(unalign_data[6]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I3(I2[6]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I5(\n_0_deskew_enable_gen.f2_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_6 ));
LUT6 #(
    .INIT(64'h5515550055155515)) 
     \deskew_enable_gen.f0_val[0]_i_7 
       (.I0(\n_0_deskew_enable_gen.f1_val[0]_i_15 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[4]),
        .I3(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I4(unalign_data[4]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_7 ));
LUT6 #(
    .INIT(64'h00000000FFDDFFFD)) 
     \deskew_enable_gen.f0_val[0]_i_8 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I1(grp_count[2]),
        .I2(unalign_data[0]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .I4(I2[0]),
        .I5(\n_0_deskew_enable_gen.f1_val[0]_i_16 ),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair80" *) 
   LUT6 #(
    .INIT(64'h0000000000010000)) 
     \deskew_enable_gen.f0_val[0]_i_9 
       (.I0(unalign_data[10]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.f0_val[0]_i_9 ));
FDRE \deskew_enable_gen.f0_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(f0_val0),
        .Q(\n_0_deskew_enable_gen.f0_val_reg[0] ),
        .R(1'b0));
CARRY4 \deskew_enable_gen.f0_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.f0_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.f0_val_reg[0]_i_1_CO_UNCONNECTED [3:2],f0_val0,\n_3_deskew_enable_gen.f0_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f0_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.f0_val[0]_i_3 ,\n_0_deskew_enable_gen.f0_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.f0_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.f0_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.f0_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.f0_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.f0_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f0_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.f0_val[0]_i_5 ,\n_0_deskew_enable_gen.f0_val[0]_i_6 ,\n_0_deskew_enable_gen.f0_val[0]_i_7 ,\n_0_deskew_enable_gen.f0_val[0]_i_8 }));
(* srl_bus_name = "inst/\slave_fpga_gen.axi_chip2chip_slave_phy_inst/slave_sio_phy.axi_chip2chip_phy_calib_inst/deskew_enable_gen.f0_val_reg " *) 
   (* srl_name = "inst/\slave_fpga_gen.axi_chip2chip_slave_phy_inst/slave_sio_phy.axi_chip2chip_phy_calib_inst/deskew_enable_gen.f0_val_reg[2]_srl2 " *) 
   SRL16E \deskew_enable_gen.f0_val_reg[2]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(clk_ph_out),
        .D(\n_0_deskew_enable_gen.f0_val_reg[0] ),
        .Q(\n_0_deskew_enable_gen.f0_val_reg[2]_srl2 ));
FDRE \deskew_enable_gen.f0_val_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.f0_val_reg[2]_srl2 ),
        .Q(p_3_in),
        .R(1'b0));
(* SOFT_HLUTNM = "soft_lutpair100" *) 
   LUT6 #(
    .INIT(64'h0000000000000400)) 
     \deskew_enable_gen.f1_val[0]_i_10 
       (.I0(grp_count[2]),
        .I1(I2[10]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[4]),
        .I5(grp_count[3]),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair126" *) 
   LUT3 #(
    .INIT(8'hFB)) 
     \deskew_enable_gen.f1_val[0]_i_11 
       (.I0(grp_count[0]),
        .I1(grp_count[1]),
        .I2(grp_count[2]),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair83" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
     \deskew_enable_gen.f1_val[0]_i_12 
       (.I0(grp_count[0]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(unalign_data[6]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_12 ));
(* SOFT_HLUTNM = "soft_lutpair112" *) 
   LUT6 #(
    .INIT(64'h0000000000000008)) 
     \deskew_enable_gen.f1_val[0]_i_13 
       (.I0(I2[6]),
        .I1(grp_count[0]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(masked_udata));
(* SOFT_HLUTNM = "soft_lutpair109" *) 
   LUT3 #(
    .INIT(8'hBF)) 
     \deskew_enable_gen.f1_val[0]_i_14 
       (.I0(grp_count[2]),
        .I1(grp_count[1]),
        .I2(grp_count[0]),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_14 ));
(* SOFT_HLUTNM = "soft_lutpair98" *) 
   LUT6 #(
    .INIT(64'h0000000000000004)) 
     \deskew_enable_gen.f1_val[0]_i_15 
       (.I0(grp_count[2]),
        .I1(I2[2]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[4]),
        .I5(grp_count[3]),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_15 ));
(* SOFT_HLUTNM = "soft_lutpair77" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.f1_val[0]_i_16 
       (.I0(unalign_data[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[2]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_16 ));
LUT6 #(
    .INIT(64'hEE0EEE0E0000EE0E)) 
     \deskew_enable_gen.f1_val[0]_i_3 
       (.I0(O9),
        .I1(I2[16]),
        .I2(I2[14]),
        .I3(O2),
        .I4(unalign_data[16]),
        .I5(O8),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_3 ));
LUT5 #(
    .INIT(32'h0000DFFF)) 
     \deskew_enable_gen.f1_val[0]_i_4 
       (.I0(grp_count[1]),
        .I1(grp_count[2]),
        .I2(unalign_data[12]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(\n_0_deskew_enable_gen.f1_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_4 ));
LUT5 #(
    .INIT(32'h33332033)) 
     \deskew_enable_gen.f1_val[0]_i_5 
       (.I0(I2[8]),
        .I1(\n_0_deskew_enable_gen.f1_val[0]_i_10 ),
        .I2(unalign_data[10]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.f1_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h2222222202222222)) 
     \deskew_enable_gen.f1_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.f1_val[0]_i_12 ),
        .I1(masked_udata),
        .I2(\n_0_deskew_enable_gen.f1_val[0]_i_14 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(unalign_data[8]),
        .I5(\n_0_deskew_enable_gen.f1_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_6 ));
LUT6 #(
    .INIT(64'h0F0F0F0F000B0B0B)) 
     \deskew_enable_gen.f1_val[0]_i_7 
       (.I0(I2[4]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(\n_0_deskew_enable_gen.f1_val[0]_i_15 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(unalign_data[4]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_7 ));
LUT6 #(
    .INIT(64'h00000000FFFFDCFF)) 
     \deskew_enable_gen.f1_val[0]_i_8 
       (.I0(unalign_data[0]),
        .I1(grp_count[2]),
        .I2(I2[0]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .I5(\n_0_deskew_enable_gen.f1_val[0]_i_16 ),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_8 ));
LUT6 #(
    .INIT(64'h001000F000100010)) 
     \deskew_enable_gen.f1_val[0]_i_9 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I1(unalign_data[14]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(I2[12]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .O(\n_0_deskew_enable_gen.f1_val[0]_i_9 ));
FDRE \deskew_enable_gen.f1_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(f1_val0),
        .Q(\n_0_deskew_enable_gen.f1_val_reg[0] ),
        .R(1'b0));
CARRY4 \deskew_enable_gen.f1_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.f1_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.f1_val_reg[0]_i_1_CO_UNCONNECTED [3:2],f1_val0,\n_3_deskew_enable_gen.f1_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f1_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.f1_val[0]_i_3 ,\n_0_deskew_enable_gen.f1_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.f1_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.f1_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.f1_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.f1_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.f1_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f1_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.f1_val[0]_i_5 ,\n_0_deskew_enable_gen.f1_val[0]_i_6 ,\n_0_deskew_enable_gen.f1_val[0]_i_7 ,\n_0_deskew_enable_gen.f1_val[0]_i_8 }));
FDRE \deskew_enable_gen.f1_val_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.f1_val_reg[0] ),
        .Q(\n_0_deskew_enable_gen.f1_val_reg[1] ),
        .R(1'b0));
FDRE \deskew_enable_gen.f1_val_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.f1_val_reg[1] ),
        .Q(p_2_in5_in),
        .R(1'b0));
(* SOFT_HLUTNM = "soft_lutpair123" *) 
   LUT5 #(
    .INIT(32'h00300020)) 
     \deskew_enable_gen.f2_val[0]_i_10 
       (.I0(unalign_data[10]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[0]),
        .I4(I2[8]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair79" *) 
   LUT6 #(
    .INIT(64'h0000000000010000)) 
     \deskew_enable_gen.f2_val[0]_i_11 
       (.I0(unalign_data[8]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair99" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
     \deskew_enable_gen.f2_val[0]_i_12 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[2]),
        .I3(I2[2]),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_12 ));
(* SOFT_HLUTNM = "soft_lutpair126" *) 
   LUT3 #(
    .INIT(8'hFE)) 
     \deskew_enable_gen.f2_val[0]_i_13 
       (.I0(grp_count[2]),
        .I1(grp_count[1]),
        .I2(grp_count[0]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_13 ));
(* SOFT_HLUTNM = "soft_lutpair75" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.f2_val[0]_i_14 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[2]),
        .I3(unalign_data[0]),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_14 ));
(* SOFT_HLUTNM = "soft_lutpair75" *) 
   LUT6 #(
    .INIT(64'h0000000000000002)) 
     \deskew_enable_gen.f2_val[0]_i_15 
       (.I0(I2[0]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_15 ));
LUT6 #(
    .INIT(64'hEE0EEE0EEE0E0000)) 
     \deskew_enable_gen.f2_val[0]_i_3 
       (.I0(O2),
        .I1(I2[14]),
        .I2(I2[16]),
        .I3(O9),
        .I4(unalign_data[16]),
        .I5(O8),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_3 ));
LUT6 #(
    .INIT(64'h00000000F7F7F0F7)) 
     \deskew_enable_gen.f2_val[0]_i_4 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I1(I2[12]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I3(unalign_data[14]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I5(\n_0_deskew_enable_gen.f2_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_4 ));
LUT3 #(
    .INIT(8'h0D)) 
     \deskew_enable_gen.f2_val[0]_i_5 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[11]_i_2 ),
        .I1(I2[10]),
        .I2(\n_0_deskew_enable_gen.f2_val[0]_i_10 ),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h00000000EEEEE0EE)) 
     \deskew_enable_gen.f2_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I1(I2[6]),
        .I2(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I3(unalign_data[6]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I5(\n_0_deskew_enable_gen.f2_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_6 ));
LUT6 #(
    .INIT(64'hAA2AAA00AA2AAA2A)) 
     \deskew_enable_gen.f2_val[0]_i_7 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_12 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[4]),
        .I3(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I4(unalign_data[4]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_7 ));
LUT5 #(
    .INIT(32'h000000BF)) 
     \deskew_enable_gen.f2_val[0]_i_8 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_13 ),
        .I1(unalign_data[2]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(\n_0_deskew_enable_gen.f2_val[0]_i_14 ),
        .I4(\n_0_deskew_enable_gen.f2_val[0]_i_15 ),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair85" *) 
   LUT6 #(
    .INIT(64'h0000000200000000)) 
     \deskew_enable_gen.f2_val[0]_i_9 
       (.I0(grp_count[0]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(unalign_data[12]),
        .I4(grp_count[2]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.f2_val[0]_i_9 ));
FDRE \deskew_enable_gen.f2_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(f2_val0),
        .Q(\n_0_deskew_enable_gen.f2_val_reg[0] ),
        .R(1'b0));
CARRY4 \deskew_enable_gen.f2_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.f2_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.f2_val_reg[0]_i_1_CO_UNCONNECTED [3:2],f2_val0,\n_3_deskew_enable_gen.f2_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f2_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.f2_val[0]_i_3 ,\n_0_deskew_enable_gen.f2_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.f2_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.f2_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.f2_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.f2_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.f2_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f2_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.f2_val[0]_i_5 ,\n_0_deskew_enable_gen.f2_val[0]_i_6 ,\n_0_deskew_enable_gen.f2_val[0]_i_7 ,\n_0_deskew_enable_gen.f2_val[0]_i_8 }));
FDRE \deskew_enable_gen.f2_val_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.f2_val_reg[0] ),
        .Q(p_0_in4_in),
        .R(1'b0));
LUT6 #(
    .INIT(64'hEE0EEE0EEE0E0000)) 
     \deskew_enable_gen.f3_val[0]_i_3 
       (.I0(O9),
        .I1(I2[16]),
        .I2(I2[14]),
        .I3(O2),
        .I4(unalign_data[16]),
        .I5(O8),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_3 ));
LUT6 #(
    .INIT(64'h5551555155515500)) 
     \deskew_enable_gen.f3_val[0]_i_4 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_9 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[12]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I4(unalign_data[14]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_4 ));
LUT5 #(
    .INIT(32'h33332033)) 
     \deskew_enable_gen.f3_val[0]_i_5 
       (.I0(I2[8]),
        .I1(\n_0_deskew_enable_gen.f1_val[0]_i_10 ),
        .I2(unalign_data[10]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.f1_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h00000000FEFE00FE)) 
     \deskew_enable_gen.f3_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I1(unalign_data[6]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I3(I2[6]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I5(\n_0_deskew_enable_gen.f2_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_6 ));
LUT6 #(
    .INIT(64'h0F0F0F0F0B0B000B)) 
     \deskew_enable_gen.f3_val[0]_i_7 
       (.I0(I2[4]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(\n_0_deskew_enable_gen.f1_val[0]_i_15 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(unalign_data[4]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_7 ));
LUT5 #(
    .INIT(32'h000000FB)) 
     \deskew_enable_gen.f3_val[0]_i_8 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_13 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I2(unalign_data[2]),
        .I3(\n_0_deskew_enable_gen.f2_val[0]_i_14 ),
        .I4(\n_0_deskew_enable_gen.f3_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair74" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.f3_val[0]_i_9 
       (.I0(grp_count[2]),
        .I1(I2[0]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(\n_0_deskew_enable_gen.f3_val[0]_i_9 ));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.f3_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\deskew_enable_gen.f3_val_reg0 ),
        .Q(f3_val[0]),
        .R(1'b0));
CARRY4 \deskew_enable_gen.f3_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.f3_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.f3_val_reg[0]_i_1_CO_UNCONNECTED [3:2],\deskew_enable_gen.f3_val_reg0 ,\n_3_deskew_enable_gen.f3_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f3_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.f3_val[0]_i_3 ,\n_0_deskew_enable_gen.f3_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.f3_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.f3_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.f3_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.f3_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.f3_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.f3_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.f3_val[0]_i_5 ,\n_0_deskew_enable_gen.f3_val[0]_i_6 ,\n_0_deskew_enable_gen.f3_val[0]_i_7 ,\n_0_deskew_enable_gen.f3_val[0]_i_8 }));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.f3_val_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(f3_val[0]),
        .Q(f3_val[1]),
        .R(1'b0));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.f3_val_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(f3_val[1]),
        .Q(f3_val[2]),
        .R(1'b0));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.f3_val_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(f3_val[2]),
        .Q(f3_val[3]),
        .R(1'b0));
LUT6 #(
    .INIT(64'hFFFFF2FF00000200)) 
     \deskew_enable_gen.flip_type_i_1 
       (.I0(\n_0_deskew_enable_gen.state[6]_i_3 ),
        .I1(\n_0_deskew_enable_gen.state[6]_i_2 ),
        .I2(state[7]),
        .I3(\n_0_deskew_enable_gen.state[11]_i_6 ),
        .I4(\n_0_deskew_enable_gen.flip_type_i_2 ),
        .I5(flip_type),
        .O(\n_0_deskew_enable_gen.flip_type_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
     \deskew_enable_gen.flip_type_i_2 
       (.I0(state[8]),
        .I1(state[3]),
        .I2(state[1]),
        .I3(state[2]),
        .I4(\n_0_deskew_enable_gen.data_stage_sel0[17]_i_5 ),
        .I5(\n_0_deskew_enable_gen.min_value_1[4]_i_4 ),
        .O(\n_0_deskew_enable_gen.flip_type_i_2 ));
FDRE \deskew_enable_gen.flip_type_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.flip_type_i_1 ),
        .Q(flip_type),
        .R(I1));
LUT2 #(
    .INIT(4'hB)) 
     \deskew_enable_gen.grp_count[0]_i_1 
       (.I0(state[7]),
        .I1(grp_count[0]),
        .O(\n_0_deskew_enable_gen.grp_count[0]_i_1 ));
LUT3 #(
    .INIT(8'h60)) 
     \deskew_enable_gen.grp_count[1]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(state[10]),
        .O(\n_0_deskew_enable_gen.grp_count[1]_i_1 ));
LUT4 #(
    .INIT(16'h2A80)) 
     \deskew_enable_gen.grp_count[2]_i_1 
       (.I0(state[10]),
        .I1(grp_count[0]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .O(\n_0_deskew_enable_gen.grp_count[2]_i_1 ));
LUT5 #(
    .INIT(32'h7F800000)) 
     \deskew_enable_gen.grp_count[3]_i_1 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[2]),
        .I3(grp_count[3]),
        .I4(state[10]),
        .O(\n_0_deskew_enable_gen.grp_count[3]_i_1 ));
LUT6 #(
    .INIT(64'h888888A888A8A888)) 
     \deskew_enable_gen.grp_count[4]_i_1 
       (.I0(\n_0_deskew_enable_gen.grp_count[4]_i_3 ),
        .I1(\n_0_deskew_enable_gen.grp_count[4]_i_4 ),
        .I2(\n_0_deskew_enable_gen.grp_count[4]_i_5 ),
        .I3(grp_p3_val),
        .I4(grp_p1_val),
        .I5(grp_p0_val),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_1 ));
LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
     \deskew_enable_gen.grp_count[4]_i_2 
       (.I0(state[10]),
        .I1(grp_count[3]),
        .I2(grp_count[2]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[4]),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_2 ));
LUT4 #(
    .INIT(16'h0012)) 
     \deskew_enable_gen.grp_count[4]_i_3 
       (.I0(\n_0_deskew_enable_gen.grp_count[4]_i_6 ),
        .I1(\n_0_deskew_enable_gen.grp_count[4]_i_7 ),
        .I2(\n_0_deskew_enable_gen.grp_count[4]_i_8 ),
        .I3(\n_0_deskew_enable_gen.grp_count[4]_i_9 ),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair117" *) 
   LUT5 #(
    .INIT(32'h00800000)) 
     \deskew_enable_gen.grp_count[4]_i_4 
       (.I0(\n_0_deskew_enable_gen.state[10]_i_2 ),
        .I1(step_count[1]),
        .I2(step_count[2]),
        .I3(step_count[0]),
        .I4(state[7]),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_4 ));
LUT2 #(
    .INIT(4'h8)) 
     \deskew_enable_gen.grp_count[4]_i_5 
       (.I0(state[10]),
        .I1(dout_p0_val),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_5 ));
(* SOFT_HLUTNM = "soft_lutpair104" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.grp_count[4]_i_6 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[5]),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_6 ));
(* SOFT_HLUTNM = "soft_lutpair81" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
     \deskew_enable_gen.grp_count[4]_i_7 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[5]),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_7 ));
(* SOFT_HLUTNM = "soft_lutpair88" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.grp_count[4]_i_8 
       (.I0(state[6]),
        .I1(state[7]),
        .I2(state[8]),
        .I3(state[9]),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair105" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
     \deskew_enable_gen.grp_count[4]_i_9 
       (.I0(state[6]),
        .I1(state[7]),
        .I2(state[8]),
        .I3(state[9]),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.grp_count[4]_i_9 ));
FDRE \deskew_enable_gen.grp_count_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.grp_count[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.grp_count[0]_i_1 ),
        .Q(grp_count[0]),
        .R(I1));
FDRE \deskew_enable_gen.grp_count_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.grp_count[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.grp_count[1]_i_1 ),
        .Q(grp_count[1]),
        .R(I1));
FDRE \deskew_enable_gen.grp_count_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.grp_count[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.grp_count[2]_i_1 ),
        .Q(grp_count[2]),
        .R(I1));
FDRE \deskew_enable_gen.grp_count_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.grp_count[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.grp_count[3]_i_1 ),
        .Q(grp_count[3]),
        .R(I1));
FDRE \deskew_enable_gen.grp_count_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.grp_count[4]_i_1 ),
        .D(\n_0_deskew_enable_gen.grp_count[4]_i_2 ),
        .Q(grp_count[4]),
        .R(I1));
LUT4 #(
    .INIT(16'hE200)) 
     \deskew_enable_gen.grp_flip_i_1 
       (.I0(min_flip_0),
        .I1(\n_0_deskew_enable_gen.delay_tap[4]_i_7 ),
        .I2(min_flip_1),
        .I3(\n_0_deskew_enable_gen.grp_flip_i_2 ),
        .O(next_grp_flip));
LUT6 #(
    .INIT(64'h0000040000000000)) 
     \deskew_enable_gen.grp_flip_i_2 
       (.I0(state[7]),
        .I1(\n_0_deskew_enable_gen.grp_flip_i_3 ),
        .I2(\n_0_deskew_enable_gen.grp_flip_i_4 ),
        .I3(state[8]),
        .I4(state[0]),
        .I5(\n_0_deskew_enable_gen.grp_flip_i_5 ),
        .O(\n_0_deskew_enable_gen.grp_flip_i_2 ));
LUT2 #(
    .INIT(4'h1)) 
     \deskew_enable_gen.grp_flip_i_3 
       (.I0(state[5]),
        .I1(state[6]),
        .O(\n_0_deskew_enable_gen.grp_flip_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair107" *) 
   LUT4 #(
    .INIT(16'hFFFE)) 
     \deskew_enable_gen.grp_flip_i_4 
       (.I0(state[4]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[3]),
        .O(\n_0_deskew_enable_gen.grp_flip_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair105" *) 
   LUT3 #(
    .INIT(8'h01)) 
     \deskew_enable_gen.grp_flip_i_5 
       (.I0(state[9]),
        .I1(state[11]),
        .I2(state[10]),
        .O(\n_0_deskew_enable_gen.grp_flip_i_5 ));
FDRE \deskew_enable_gen.grp_flip_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(next_grp_flip),
        .Q(grp_flip),
        .R(I1));
(* SOFT_HLUTNM = "soft_lutpair78" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
     \deskew_enable_gen.grp_p0_val_i_10 
       (.I0(selected_data[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_10 ));
LUT5 #(
    .INIT(32'h0E0E000E)) 
     \deskew_enable_gen.grp_p0_val_i_3 
       (.I0(selected_data[16]),
        .I1(O8),
        .I2(masked_dout[15]),
        .I3(selected_data[17]),
        .I4(O9),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_3 ));
LUT6 #(
    .INIT(64'hAA2AAA2AAA00AA2A)) 
     \deskew_enable_gen.grp_p0_val_i_4 
       (.I0(\n_0_deskew_enable_gen.grp_p0_val_i_9 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(selected_data[13]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I5(selected_data[12]),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_4 ));
LUT6 #(
    .INIT(64'h000000000000FDFF)) 
     \deskew_enable_gen.grp_p0_val_i_5 
       (.I0(selected_data[9]),
        .I1(grp_count[0]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(masked_dout[11]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_11 ),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_5 ));
LUT4 #(
    .INIT(16'h2220)) 
     \deskew_enable_gen.grp_p0_val_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_13 ),
        .I1(masked_dout[7]),
        .I2(\n_0_deskew_enable_gen.grp_p3_val_i_15 ),
        .I3(selected_data[8]),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_6 ));
LUT6 #(
    .INIT(64'h0F0F0F0F000B0B0B)) 
     \deskew_enable_gen.grp_p0_val_i_7 
       (.I0(selected_data[4]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I2(masked_dout[3]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I4(selected_data[5]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_7 ));
LUT6 #(
    .INIT(64'hA8AAAAAAA8AAA8AA)) 
     \deskew_enable_gen.grp_p0_val_i_8 
       (.I0(\n_0_deskew_enable_gen.grp_p0_val_i_10 ),
        .I1(grp_count[2]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(selected_data[1]),
        .I5(selected_data[0]),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair84" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFDFFFFFFFF)) 
     \deskew_enable_gen.grp_p0_val_i_9 
       (.I0(grp_count[0]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(selected_data[14]),
        .I4(grp_count[2]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.grp_p0_val_i_9 ));
FDRE \deskew_enable_gen.grp_p0_val_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(grp_p0_val0),
        .Q(grp_p0_val),
        .R(1'b0));
CARRY4 \deskew_enable_gen.grp_p0_val_reg_i_1 
       (.CI(\n_0_deskew_enable_gen.grp_p0_val_reg_i_2 ),
        .CO({\NLW_deskew_enable_gen.grp_p0_val_reg_i_1_CO_UNCONNECTED [3:2],grp_p0_val0,\n_3_deskew_enable_gen.grp_p0_val_reg_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.grp_p0_val_reg_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.grp_p0_val_i_3 ,\n_0_deskew_enable_gen.grp_p0_val_i_4 }));
CARRY4 \deskew_enable_gen.grp_p0_val_reg_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.grp_p0_val_reg_i_2 ,\n_1_deskew_enable_gen.grp_p0_val_reg_i_2 ,\n_2_deskew_enable_gen.grp_p0_val_reg_i_2 ,\n_3_deskew_enable_gen.grp_p0_val_reg_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.grp_p0_val_reg_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.grp_p0_val_i_5 ,\n_0_deskew_enable_gen.grp_p0_val_i_6 ,\n_0_deskew_enable_gen.grp_p0_val_i_7 ,\n_0_deskew_enable_gen.grp_p0_val_i_8 }));
LUT5 #(
    .INIT(32'h51515100)) 
     \deskew_enable_gen.grp_p1_val_i_3 
       (.I0(masked_dout[15]),
        .I1(selected_data[16]),
        .I2(O8),
        .I3(selected_data[17]),
        .I4(O9),
        .O(\n_0_deskew_enable_gen.grp_p1_val_i_3 ));
LUT5 #(
    .INIT(32'hA2AAAAAA)) 
     \deskew_enable_gen.grp_p1_val_i_4 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_10 ),
        .I1(grp_count[1]),
        .I2(grp_count[2]),
        .I3(selected_data[12]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .O(\n_0_deskew_enable_gen.grp_p1_val_i_4 ));
LUT6 #(
    .INIT(64'h000000000000FFEF)) 
     \deskew_enable_gen.grp_p1_val_i_5 
       (.I0(grp_count[0]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(selected_data[9]),
        .I4(masked_dout[11]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_11 ),
        .O(\n_0_deskew_enable_gen.grp_p1_val_i_5 ));
LUT4 #(
    .INIT(16'h2202)) 
     \deskew_enable_gen.grp_p1_val_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_13 ),
        .I1(masked_dout[7]),
        .I2(selected_data[8]),
        .I3(\n_0_deskew_enable_gen.grp_p3_val_i_15 ),
        .O(\n_0_deskew_enable_gen.grp_p1_val_i_6 ));
LUT6 #(
    .INIT(64'h5515550055155515)) 
     \deskew_enable_gen.grp_p1_val_i_7 
       (.I0(masked_dout[3]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I2(selected_data[4]),
        .I3(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I4(selected_data[5]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .O(\n_0_deskew_enable_gen.grp_p1_val_i_7 ));
LUT6 #(
    .INIT(64'hAAAAAA8AAAAAAAAA)) 
     \deskew_enable_gen.grp_p1_val_i_8 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_18 ),
        .I1(grp_count[2]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(selected_data[0]),
        .O(\n_0_deskew_enable_gen.grp_p1_val_i_8 ));
FDRE \deskew_enable_gen.grp_p1_val_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(grp_p1_val0),
        .Q(grp_p1_val),
        .R(1'b0));
CARRY4 \deskew_enable_gen.grp_p1_val_reg_i_1 
       (.CI(\n_0_deskew_enable_gen.grp_p1_val_reg_i_2 ),
        .CO({\NLW_deskew_enable_gen.grp_p1_val_reg_i_1_CO_UNCONNECTED [3:2],grp_p1_val0,\n_3_deskew_enable_gen.grp_p1_val_reg_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.grp_p1_val_reg_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.grp_p1_val_i_3 ,\n_0_deskew_enable_gen.grp_p1_val_i_4 }));
CARRY4 \deskew_enable_gen.grp_p1_val_reg_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.grp_p1_val_reg_i_2 ,\n_1_deskew_enable_gen.grp_p1_val_reg_i_2 ,\n_2_deskew_enable_gen.grp_p1_val_reg_i_2 ,\n_3_deskew_enable_gen.grp_p1_val_reg_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.grp_p1_val_reg_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.grp_p1_val_i_5 ,\n_0_deskew_enable_gen.grp_p1_val_i_6 ,\n_0_deskew_enable_gen.grp_p1_val_i_7 ,\n_0_deskew_enable_gen.grp_p1_val_i_8 }));
(* SOFT_HLUTNM = "soft_lutpair110" *) 
   LUT6 #(
    .INIT(64'hFFEFFF0FFFEFFFEF)) 
     \deskew_enable_gen.grp_p3_val_i_10 
       (.I0(selected_data[14]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(selected_data[13]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair82" *) 
   LUT6 #(
    .INIT(64'h0000000000000004)) 
     \deskew_enable_gen.grp_p3_val_i_11 
       (.I0(grp_count[2]),
        .I1(grp_count[1]),
        .I2(grp_count[0]),
        .I3(grp_count[3]),
        .I4(grp_count[4]),
        .I5(selected_data[10]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair108" *) 
   LUT6 #(
    .INIT(64'h0000000200000000)) 
     \deskew_enable_gen.grp_p3_val_i_12 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[2]),
        .I5(selected_data[11]),
        .O(masked_dout[11]));
(* SOFT_HLUTNM = "soft_lutpair84" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
     \deskew_enable_gen.grp_p3_val_i_13 
       (.I0(grp_count[0]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(selected_data[6]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_13 ));
(* SOFT_HLUTNM = "soft_lutpair113" *) 
   LUT6 #(
    .INIT(64'h000000000000BB30)) 
     \deskew_enable_gen.grp_p3_val_i_14 
       (.I0(data_stage2[7]),
        .I1(data_stage_sel0[7]),
        .I2(data_stage1[7]),
        .I3(data_stage_sel1[7]),
        .I4(\n_0_deskew_enable_gen.data_out[7]_i_2 ),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .O(masked_dout[7]));
(* SOFT_HLUTNM = "soft_lutpair115" *) 
   LUT5 #(
    .INIT(32'hFFFFFFFB)) 
     \deskew_enable_gen.grp_p3_val_i_15 
       (.I0(grp_count[2]),
        .I1(grp_count[1]),
        .I2(grp_count[0]),
        .I3(grp_count[4]),
        .I4(grp_count[3]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_15 ));
(* SOFT_HLUTNM = "soft_lutpair91" *) 
   LUT6 #(
    .INIT(64'h0000000100000000)) 
     \deskew_enable_gen.grp_p3_val_i_16 
       (.I0(grp_count[1]),
        .I1(grp_count[0]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[2]),
        .I5(selected_data[3]),
        .O(masked_dout[3]));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.grp_p3_val_i_17 
       (.I0(grp_count[1]),
        .I1(grp_count[2]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_17 ));
LUT5 #(
    .INIT(32'hFFFFFFF8)) 
     \deskew_enable_gen.grp_p3_val_i_18 
       (.I0(selected_data[2]),
        .I1(selected_data[1]),
        .I2(grp_count[3]),
        .I3(grp_count[4]),
        .I4(\n_0_deskew_enable_gen.f2_val[0]_i_13 ),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_18 ));
LUT5 #(
    .INIT(32'h0E0E0E00)) 
     \deskew_enable_gen.grp_p3_val_i_3 
       (.I0(selected_data[16]),
        .I1(O8),
        .I2(masked_dout[15]),
        .I3(O9),
        .I4(selected_data[17]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_3 ));
LUT5 #(
    .INIT(32'hAAA2AAAA)) 
     \deskew_enable_gen.grp_p3_val_i_4 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_10 ),
        .I1(grp_count[1]),
        .I2(grp_count[2]),
        .I3(selected_data[12]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_4 ));
LUT6 #(
    .INIT(64'h1111111111111011)) 
     \deskew_enable_gen.grp_p3_val_i_5 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_11 ),
        .I1(masked_dout[11]),
        .I2(selected_data[9]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I5(grp_count[0]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_5 ));
LUT4 #(
    .INIT(16'h2220)) 
     \deskew_enable_gen.grp_p3_val_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_13 ),
        .I1(masked_dout[7]),
        .I2(\n_0_deskew_enable_gen.grp_p3_val_i_15 ),
        .I3(selected_data[8]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_6 ));
LUT6 #(
    .INIT(64'h0F0F0F0F0B0B000B)) 
     \deskew_enable_gen.grp_p3_val_i_7 
       (.I0(selected_data[4]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I2(masked_dout[3]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I4(selected_data[5]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_7 ));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAA8AA)) 
     \deskew_enable_gen.grp_p3_val_i_8 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_18 ),
        .I1(selected_data[0]),
        .I2(grp_count[2]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.grp_p3_val_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair115" *) 
   LUT6 #(
    .INIT(64'h0000000000000800)) 
     \deskew_enable_gen.grp_p3_val_i_9 
       (.I0(selected_data[15]),
        .I1(grp_count[0]),
        .I2(grp_count[2]),
        .I3(grp_count[1]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(masked_dout[15]));
FDRE \deskew_enable_gen.grp_p3_val_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(grp_p3_val0),
        .Q(grp_p3_val),
        .R(1'b0));
CARRY4 \deskew_enable_gen.grp_p3_val_reg_i_1 
       (.CI(\n_0_deskew_enable_gen.grp_p3_val_reg_i_2 ),
        .CO({\NLW_deskew_enable_gen.grp_p3_val_reg_i_1_CO_UNCONNECTED [3:2],grp_p3_val0,\n_3_deskew_enable_gen.grp_p3_val_reg_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.grp_p3_val_reg_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.grp_p3_val_i_3 ,\n_0_deskew_enable_gen.grp_p3_val_i_4 }));
CARRY4 \deskew_enable_gen.grp_p3_val_reg_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.grp_p3_val_reg_i_2 ,\n_1_deskew_enable_gen.grp_p3_val_reg_i_2 ,\n_2_deskew_enable_gen.grp_p3_val_reg_i_2 ,\n_3_deskew_enable_gen.grp_p3_val_reg_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.grp_p3_val_reg_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.grp_p3_val_i_5 ,\n_0_deskew_enable_gen.grp_p3_val_i_6 ,\n_0_deskew_enable_gen.grp_p3_val_i_7 ,\n_0_deskew_enable_gen.grp_p3_val_i_8 }));
LUT5 #(
    .INIT(32'h33040000)) 
     \deskew_enable_gen.max_value_0[4]_i_1 
       (.I0(\n_0_deskew_enable_gen.step_count[1]_i_2 ),
        .I1(state[5]),
        .I2(step_count[2]),
        .I3(state[9]),
        .I4(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ),
        .O(\n_0_deskew_enable_gen.max_value_0[4]_i_1 ));
FDRE \deskew_enable_gen.max_value_0_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_0[4]_i_1 ),
        .D(next_min_value_0[0]),
        .Q(max_value_0[0]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_0_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_0[4]_i_1 ),
        .D(next_min_value_0[1]),
        .Q(max_value_0[1]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_0_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_0[4]_i_1 ),
        .D(next_min_value_0[2]),
        .Q(max_value_0[2]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_0_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_0[4]_i_1 ),
        .D(next_min_value_0[3]),
        .Q(max_value_0[3]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_0_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_0[4]_i_1 ),
        .D(next_min_value_0[4]),
        .Q(max_value_0[4]),
        .R(I1));
LUT6 #(
    .INIT(64'h01CC00CC00000000)) 
     \deskew_enable_gen.max_value_1[4]_i_1 
       (.I0(\n_0_deskew_enable_gen.step_count[2]_i_4 ),
        .I1(state[9]),
        .I2(step_count[2]),
        .I3(state[5]),
        .I4(\n_0_deskew_enable_gen.step_count[1]_i_2 ),
        .I5(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ),
        .O(\n_0_deskew_enable_gen.max_value_1[4]_i_1 ));
FDRE \deskew_enable_gen.max_value_1_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_1[4]_i_1 ),
        .D(next_min_value_0[0]),
        .Q(max_value_1[0]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_1_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_1[4]_i_1 ),
        .D(next_min_value_0[1]),
        .Q(max_value_1[1]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_1_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_1[4]_i_1 ),
        .D(next_min_value_0[2]),
        .Q(max_value_1[2]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_1_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_1[4]_i_1 ),
        .D(next_min_value_0[3]),
        .Q(max_value_1[3]),
        .R(I1));
FDRE \deskew_enable_gen.max_value_1_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.max_value_1[4]_i_1 ),
        .D(next_min_value_0[4]),
        .Q(max_value_1[4]),
        .R(I1));
LUT6 #(
    .INIT(64'hFFFFFFFB00000008)) 
     \deskew_enable_gen.min_flip_0_i_1 
       (.I0(flip_type),
        .I1(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ),
        .I2(\n_0_deskew_enable_gen.min_flip_0_i_2 ),
        .I3(step_count[1]),
        .I4(step_count[0]),
        .I5(min_flip_0),
        .O(\n_0_deskew_enable_gen.min_flip_0_i_1 ));
LUT3 #(
    .INIT(8'hEF)) 
     \deskew_enable_gen.min_flip_0_i_2 
       (.I0(state[9]),
        .I1(step_count[2]),
        .I2(state[5]),
        .O(\n_0_deskew_enable_gen.min_flip_0_i_2 ));
FDRE \deskew_enable_gen.min_flip_0_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.min_flip_0_i_1 ),
        .Q(min_flip_0),
        .R(I1));
LUT3 #(
    .INIT(8'hB8)) 
     \deskew_enable_gen.min_flip_1_i_1 
       (.I0(flip_type),
        .I1(next_min_flip_1),
        .I2(min_flip_1),
        .O(\n_0_deskew_enable_gen.min_flip_1_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair101" *) 
   LUT6 #(
    .INIT(64'h0000140055000000)) 
     \deskew_enable_gen.min_flip_1_i_2 
       (.I0(\n_0_deskew_enable_gen.min_flip_0_i_2 ),
        .I1(flip_type),
        .I2(min_flip_0),
        .I3(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ),
        .I4(step_count[1]),
        .I5(step_count[0]),
        .O(next_min_flip_1));
FDRE \deskew_enable_gen.min_flip_1_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.min_flip_1_i_1 ),
        .Q(min_flip_1),
        .R(I1));
LUT6 #(
    .INIT(64'h00FF010000000000)) 
     \deskew_enable_gen.min_value_0[4]_i_1 
       (.I0(step_count[0]),
        .I1(step_count[1]),
        .I2(step_count[2]),
        .I3(state[5]),
        .I4(state[9]),
        .I5(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ),
        .O(\n_0_deskew_enable_gen.min_value_0[4]_i_1 ));
FDRE \deskew_enable_gen.min_value_0_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_0[4]_i_1 ),
        .D(next_min_value_0[0]),
        .Q(min_value_0[0]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_0_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_0[4]_i_1 ),
        .D(next_min_value_0[1]),
        .Q(min_value_0[1]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_0_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_0[4]_i_1 ),
        .D(next_min_value_0[2]),
        .Q(min_value_0[2]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_0_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_0[4]_i_1 ),
        .D(next_min_value_0[3]),
        .Q(min_value_0[3]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_0_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_0[4]_i_1 ),
        .D(next_min_value_0[4]),
        .Q(min_value_0[4]),
        .R(I1));
LUT2 #(
    .INIT(4'h2)) 
     \deskew_enable_gen.min_value_1[0]_i_1 
       (.I0(O3[0]),
        .I1(state[9]),
        .O(next_min_value_0[0]));
LUT2 #(
    .INIT(4'h2)) 
     \deskew_enable_gen.min_value_1[1]_i_1 
       (.I0(O3[1]),
        .I1(state[9]),
        .O(next_min_value_0[1]));
LUT2 #(
    .INIT(4'h2)) 
     \deskew_enable_gen.min_value_1[2]_i_1 
       (.I0(O3[2]),
        .I1(state[9]),
        .O(next_min_value_0[2]));
LUT2 #(
    .INIT(4'h2)) 
     \deskew_enable_gen.min_value_1[3]_i_1 
       (.I0(O3[3]),
        .I1(state[9]),
        .O(next_min_value_0[3]));
LUT6 #(
    .INIT(64'h00FF040000000000)) 
     \deskew_enable_gen.min_value_1[4]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[11]_i_10 ),
        .I1(\n_0_deskew_enable_gen.step_count[1]_i_2 ),
        .I2(step_count[2]),
        .I3(state[5]),
        .I4(state[9]),
        .I5(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ),
        .O(\n_0_deskew_enable_gen.min_value_1[4]_i_1 ));
LUT2 #(
    .INIT(4'h2)) 
     \deskew_enable_gen.min_value_1[4]_i_2 
       (.I0(O3[4]),
        .I1(state[9]),
        .O(next_min_value_0[4]));
LUT6 #(
    .INIT(64'h0000000000000004)) 
     \deskew_enable_gen.min_value_1[4]_i_3 
       (.I0(\n_0_deskew_enable_gen.min_value_1[4]_i_4 ),
        .I1(\n_0_deskew_enable_gen.count[2]_i_5 ),
        .I2(state[0]),
        .I3(state[6]),
        .I4(state[4]),
        .I5(\n_0_deskew_enable_gen.min_value_1[4]_i_5 ),
        .O(\n_0_deskew_enable_gen.min_value_1[4]_i_3 ));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.min_value_1[4]_i_4 
       (.I0(state[10]),
        .I1(state[11]),
        .O(\n_0_deskew_enable_gen.min_value_1[4]_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair103" *) 
   LUT3 #(
    .INIT(8'hFE)) 
     \deskew_enable_gen.min_value_1[4]_i_5 
       (.I0(state[3]),
        .I1(state[1]),
        .I2(state[2]),
        .O(\n_0_deskew_enable_gen.min_value_1[4]_i_5 ));
FDRE \deskew_enable_gen.min_value_1_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_1[4]_i_1 ),
        .D(next_min_value_0[0]),
        .Q(min_value_1[0]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_1_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_1[4]_i_1 ),
        .D(next_min_value_0[1]),
        .Q(min_value_1[1]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_1_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_1[4]_i_1 ),
        .D(next_min_value_0[2]),
        .Q(min_value_1[2]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_1_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_1[4]_i_1 ),
        .D(next_min_value_0[3]),
        .Q(min_value_1[3]),
        .R(I1));
FDRE \deskew_enable_gen.min_value_1_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.min_value_1[4]_i_1 ),
        .D(next_min_value_0[4]),
        .Q(min_value_1[4]),
        .R(I1));
LUT6 #(
    .INIT(64'h5555151555551500)) 
     \deskew_enable_gen.p0_val[0]_i_4 
       (.I0(\n_0_deskew_enable_gen.p2_val[0]_i_9 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[13]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I5(I2[14]),
        .O(\n_0_deskew_enable_gen.p0_val[0]_i_4 ));
LUT6 #(
    .INIT(64'h000000000000FFDF)) 
     \deskew_enable_gen.p0_val[0]_i_5 
       (.I0(I2[9]),
        .I1(grp_count[0]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I4(masked_data[11]),
        .I5(\n_0_deskew_enable_gen.p0_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.p0_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h00000000FEFE00FE)) 
     \deskew_enable_gen.p0_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I1(I2[6]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I3(I2[7]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I5(\n_0_deskew_enable_gen.p2_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.p0_val[0]_i_6 ));
LUT6 #(
    .INIT(64'h5515550055155515)) 
     \deskew_enable_gen.p0_val[0]_i_7 
       (.I0(masked_data[3]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[5]),
        .I3(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I4(I2[4]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .O(\n_0_deskew_enable_gen.p0_val[0]_i_7 ));
LUT6 #(
    .INIT(64'h00000000FFDDFFFD)) 
     \deskew_enable_gen.p0_val[0]_i_8 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I1(grp_count[2]),
        .I2(I2[0]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .I4(I2[1]),
        .I5(\n_0_deskew_enable_gen.p1_val[0]_i_14 ),
        .O(\n_0_deskew_enable_gen.p0_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair79" *) 
   LUT6 #(
    .INIT(64'h0000000000010000)) 
     \deskew_enable_gen.p0_val[0]_i_9 
       (.I0(I2[10]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.p0_val[0]_i_9 ));
FDRE \deskew_enable_gen.p0_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p0_val0),
        .Q(\n_0_deskew_enable_gen.p0_val_reg[0] ),
        .R(1'b0));
CARRY4 \deskew_enable_gen.p0_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.p0_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.p0_val_reg[0]_i_1_CO_UNCONNECTED [3:2],p0_val0,\n_3_deskew_enable_gen.p0_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p0_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,S,\n_0_deskew_enable_gen.p0_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.p0_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.p0_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.p0_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.p0_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.p0_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p0_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.p0_val[0]_i_5 ,\n_0_deskew_enable_gen.p0_val[0]_i_6 ,\n_0_deskew_enable_gen.p0_val[0]_i_7 ,\n_0_deskew_enable_gen.p0_val[0]_i_8 }));
(* srl_bus_name = "inst/\slave_fpga_gen.axi_chip2chip_slave_phy_inst/slave_sio_phy.axi_chip2chip_phy_calib_inst/deskew_enable_gen.p0_val_reg " *) 
   (* srl_name = "inst/\slave_fpga_gen.axi_chip2chip_slave_phy_inst/slave_sio_phy.axi_chip2chip_phy_calib_inst/deskew_enable_gen.p0_val_reg[2]_srl2 " *) 
   SRL16E \deskew_enable_gen.p0_val_reg[2]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(clk_ph_out),
        .D(\n_0_deskew_enable_gen.p0_val_reg[0] ),
        .Q(\n_0_deskew_enable_gen.p0_val_reg[2]_srl2 ));
FDRE \deskew_enable_gen.p0_val_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.p0_val_reg[2]_srl2 ),
        .Q(p_3_in9_in),
        .R(1'b0));
(* SOFT_HLUTNM = "soft_lutpair100" *) 
   LUT6 #(
    .INIT(64'h0000000000000400)) 
     \deskew_enable_gen.p1_val[0]_i_10 
       (.I0(grp_count[2]),
        .I1(I2[11]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[4]),
        .I5(grp_count[3]),
        .O(masked_data[11]));
(* SOFT_HLUTNM = "soft_lutpair83" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
     \deskew_enable_gen.p1_val[0]_i_11 
       (.I0(grp_count[0]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(I2[6]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair114" *) 
   LUT6 #(
    .INIT(64'h0000000000000008)) 
     \deskew_enable_gen.p1_val[0]_i_12 
       (.I0(I2[7]),
        .I1(grp_count[0]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(grp_count[3]),
        .I5(grp_count[4]),
        .O(masked_data[7]));
(* SOFT_HLUTNM = "soft_lutpair98" *) 
   LUT6 #(
    .INIT(64'h0000000000000004)) 
     \deskew_enable_gen.p1_val[0]_i_13 
       (.I0(grp_count[2]),
        .I1(I2[3]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[4]),
        .I5(grp_count[3]),
        .O(masked_data[3]));
(* SOFT_HLUTNM = "soft_lutpair77" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.p1_val[0]_i_14 
       (.I0(I2[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[2]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_14 ));
LUT6 #(
    .INIT(64'hEE0EEE0E0000EE0E)) 
     \deskew_enable_gen.p1_val[0]_i_3 
       (.I0(O9),
        .I1(I2[17]),
        .I2(I2[15]),
        .I3(O2),
        .I4(I2[16]),
        .I5(O8),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_3 ));
LUT5 #(
    .INIT(32'h0000DFFF)) 
     \deskew_enable_gen.p1_val[0]_i_4 
       (.I0(grp_count[1]),
        .I1(grp_count[2]),
        .I2(I2[12]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(\n_0_deskew_enable_gen.p1_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_4 ));
LUT5 #(
    .INIT(32'h33332033)) 
     \deskew_enable_gen.p1_val[0]_i_5 
       (.I0(I2[9]),
        .I1(masked_data[11]),
        .I2(I2[10]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.f1_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h2222222202222222)) 
     \deskew_enable_gen.p1_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.p1_val[0]_i_11 ),
        .I1(masked_data[7]),
        .I2(\n_0_deskew_enable_gen.f1_val[0]_i_14 ),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(I2[8]),
        .I5(\n_0_deskew_enable_gen.f1_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_6 ));
LUT6 #(
    .INIT(64'h0F0F0F0F000B0B0B)) 
     \deskew_enable_gen.p1_val[0]_i_7 
       (.I0(I2[5]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(masked_data[3]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(I2[4]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_7 ));
LUT6 #(
    .INIT(64'h00000000FFFFDCFF)) 
     \deskew_enable_gen.p1_val[0]_i_8 
       (.I0(I2[0]),
        .I1(grp_count[2]),
        .I2(I2[1]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[2]_i_2 ),
        .I5(\n_0_deskew_enable_gen.p1_val[0]_i_14 ),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair110" *) 
   LUT6 #(
    .INIT(64'h001000F000100010)) 
     \deskew_enable_gen.p1_val[0]_i_9 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I1(I2[14]),
        .I2(grp_count[1]),
        .I3(grp_count[2]),
        .I4(I2[13]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .O(\n_0_deskew_enable_gen.p1_val[0]_i_9 ));
FDRE \deskew_enable_gen.p1_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p1_val0),
        .Q(\n_0_deskew_enable_gen.p1_val_reg[0] ),
        .R(1'b0));
CARRY4 \deskew_enable_gen.p1_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.p1_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.p1_val_reg[0]_i_1_CO_UNCONNECTED [3:2],p1_val0,\n_3_deskew_enable_gen.p1_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p1_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.p1_val[0]_i_3 ,\n_0_deskew_enable_gen.p1_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.p1_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.p1_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.p1_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.p1_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.p1_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p1_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.p1_val[0]_i_5 ,\n_0_deskew_enable_gen.p1_val[0]_i_6 ,\n_0_deskew_enable_gen.p1_val[0]_i_7 ,\n_0_deskew_enable_gen.p1_val[0]_i_8 }));
FDRE \deskew_enable_gen.p1_val_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.p1_val_reg[0] ),
        .Q(\n_0_deskew_enable_gen.p1_val_reg[1] ),
        .R(1'b0));
FDRE \deskew_enable_gen.p1_val_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.p1_val_reg[1] ),
        .Q(p_2_in8_in),
        .R(1'b0));
(* SOFT_HLUTNM = "soft_lutpair123" *) 
   LUT5 #(
    .INIT(32'h00300020)) 
     \deskew_enable_gen.p2_val[0]_i_10 
       (.I0(I2[10]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(grp_count[0]),
        .I4(I2[9]),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair78" *) 
   LUT6 #(
    .INIT(64'h0000000000010000)) 
     \deskew_enable_gen.p2_val[0]_i_11 
       (.I0(I2[8]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[0]),
        .I4(grp_count[1]),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair99" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
     \deskew_enable_gen.p2_val[0]_i_12 
       (.I0(grp_count[4]),
        .I1(grp_count[3]),
        .I2(grp_count[2]),
        .I3(I2[3]),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_12 ));
(* SOFT_HLUTNM = "soft_lutpair73" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.p2_val[0]_i_13 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[2]),
        .I3(I2[0]),
        .I4(grp_count[0]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_13 ));
(* SOFT_HLUTNM = "soft_lutpair74" *) 
   LUT6 #(
    .INIT(64'h0000000000000002)) 
     \deskew_enable_gen.p2_val[0]_i_14 
       (.I0(I2[1]),
        .I1(grp_count[2]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(masked_data[1]));
LUT6 #(
    .INIT(64'hEE0EEE0EEE0E0000)) 
     \deskew_enable_gen.p2_val[0]_i_3 
       (.I0(O2),
        .I1(I2[15]),
        .I2(I2[17]),
        .I3(O9),
        .I4(I2[16]),
        .I5(O8),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_3 ));
LUT6 #(
    .INIT(64'h00000000F7F7F0F7)) 
     \deskew_enable_gen.p2_val[0]_i_4 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I1(I2[13]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I3(I2[14]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I5(\n_0_deskew_enable_gen.p2_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_4 ));
LUT3 #(
    .INIT(8'h0D)) 
     \deskew_enable_gen.p2_val[0]_i_5 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[11]_i_2 ),
        .I1(I2[11]),
        .I2(\n_0_deskew_enable_gen.p2_val[0]_i_10 ),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h00000000EEEEE0EE)) 
     \deskew_enable_gen.p2_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I1(I2[7]),
        .I2(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I3(I2[6]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I5(\n_0_deskew_enable_gen.p2_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_6 ));
LUT6 #(
    .INIT(64'hAA2AAA00AA2AAA2A)) 
     \deskew_enable_gen.p2_val[0]_i_7 
       (.I0(\n_0_deskew_enable_gen.p2_val[0]_i_12 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[5]),
        .I3(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I4(I2[4]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_7 ));
LUT5 #(
    .INIT(32'h000000BF)) 
     \deskew_enable_gen.p2_val[0]_i_8 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_13 ),
        .I1(I2[2]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I3(\n_0_deskew_enable_gen.p2_val[0]_i_13 ),
        .I4(masked_data[1]),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair85" *) 
   LUT6 #(
    .INIT(64'h0000000200000000)) 
     \deskew_enable_gen.p2_val[0]_i_9 
       (.I0(grp_count[0]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(I2[12]),
        .I4(grp_count[2]),
        .I5(grp_count[1]),
        .O(\n_0_deskew_enable_gen.p2_val[0]_i_9 ));
FDRE \deskew_enable_gen.p2_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p2_val0),
        .Q(\n_0_deskew_enable_gen.p2_val_reg[0] ),
        .R(1'b0));
CARRY4 \deskew_enable_gen.p2_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.p2_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.p2_val_reg[0]_i_1_CO_UNCONNECTED [3:2],p2_val0,\n_3_deskew_enable_gen.p2_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p2_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.p2_val[0]_i_3 ,\n_0_deskew_enable_gen.p2_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.p2_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.p2_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.p2_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.p2_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.p2_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p2_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.p2_val[0]_i_5 ,\n_0_deskew_enable_gen.p2_val[0]_i_6 ,\n_0_deskew_enable_gen.p2_val[0]_i_7 ,\n_0_deskew_enable_gen.p2_val[0]_i_8 }));
FDRE \deskew_enable_gen.p2_val_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.p2_val_reg[0] ),
        .Q(p_0_in7_in),
        .R(1'b0));
LUT6 #(
    .INIT(64'hEE0EEE0EEE0E0000)) 
     \deskew_enable_gen.p3_val[0]_i_3 
       (.I0(O9),
        .I1(I2[17]),
        .I2(I2[15]),
        .I3(O2),
        .I4(I2[16]),
        .I5(O8),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_3 ));
LUT6 #(
    .INIT(64'h5551555155515500)) 
     \deskew_enable_gen.p3_val[0]_i_4 
       (.I0(\n_0_deskew_enable_gen.p2_val[0]_i_9 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(I2[13]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_2 ),
        .I4(I2[14]),
        .I5(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_4 ));
LUT5 #(
    .INIT(32'h33332033)) 
     \deskew_enable_gen.p3_val[0]_i_5 
       (.I0(I2[9]),
        .I1(masked_data[11]),
        .I2(I2[10]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I4(\n_0_deskew_enable_gen.f1_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_5 ));
LUT6 #(
    .INIT(64'h00000000FEFE00FE)) 
     \deskew_enable_gen.p3_val[0]_i_6 
       (.I0(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .I1(I2[6]),
        .I2(\n_0_deskew_enable_gen.data_flip_sel[14]_i_2 ),
        .I3(I2[7]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[7]_i_2 ),
        .I5(\n_0_deskew_enable_gen.p2_val[0]_i_11 ),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_6 ));
LUT6 #(
    .INIT(64'h0F0F0F0F0B0B000B)) 
     \deskew_enable_gen.p3_val[0]_i_7 
       (.I0(I2[5]),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[13]_i_2 ),
        .I2(masked_data[3]),
        .I3(\n_0_deskew_enable_gen.data_flip_sel[12]_i_2 ),
        .I4(I2[4]),
        .I5(\n_0_deskew_enable_gen.grp_p3_val_i_17 ),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_7 ));
LUT5 #(
    .INIT(32'h000000FB)) 
     \deskew_enable_gen.p3_val[0]_i_8 
       (.I0(\n_0_deskew_enable_gen.f2_val[0]_i_13 ),
        .I1(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I2(I2[2]),
        .I3(\n_0_deskew_enable_gen.p2_val[0]_i_13 ),
        .I4(\n_0_deskew_enable_gen.p3_val[0]_i_9 ),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair73" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \deskew_enable_gen.p3_val[0]_i_9 
       (.I0(grp_count[2]),
        .I1(I2[1]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[1]),
        .I5(grp_count[0]),
        .O(\n_0_deskew_enable_gen.p3_val[0]_i_9 ));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.p3_val_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\deskew_enable_gen.p3_val_reg0 ),
        .Q(p3_val[0]),
        .R(1'b0));
CARRY4 \deskew_enable_gen.p3_val_reg[0]_i_1 
       (.CI(\n_0_deskew_enable_gen.p3_val_reg[0]_i_2 ),
        .CO({\NLW_deskew_enable_gen.p3_val_reg[0]_i_1_CO_UNCONNECTED [3:2],\deskew_enable_gen.p3_val_reg0 ,\n_3_deskew_enable_gen.p3_val_reg[0]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p3_val_reg[0]_i_1_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,\n_0_deskew_enable_gen.p3_val[0]_i_3 ,\n_0_deskew_enable_gen.p3_val[0]_i_4 }));
CARRY4 \deskew_enable_gen.p3_val_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\n_0_deskew_enable_gen.p3_val_reg[0]_i_2 ,\n_1_deskew_enable_gen.p3_val_reg[0]_i_2 ,\n_2_deskew_enable_gen.p3_val_reg[0]_i_2 ,\n_3_deskew_enable_gen.p3_val_reg[0]_i_2 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_deskew_enable_gen.p3_val_reg[0]_i_2_O_UNCONNECTED [3:0]),
        .S({\n_0_deskew_enable_gen.p3_val[0]_i_5 ,\n_0_deskew_enable_gen.p3_val[0]_i_6 ,\n_0_deskew_enable_gen.p3_val[0]_i_7 ,\n_0_deskew_enable_gen.p3_val[0]_i_8 }));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.p3_val_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p3_val[0]),
        .Q(p3_val[1]),
        .R(1'b0));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.p3_val_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p3_val[1]),
        .Q(p3_val[2]),
        .R(1'b0));
(* KEEP = "yes" *) 
   FDRE \deskew_enable_gen.p3_val_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p3_val[2]),
        .Q(p3_val[3]),
        .R(1'b0));
LUT3 #(
    .INIT(8'h38)) 
     \deskew_enable_gen.pat_count[0]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[5]_i_2 ),
        .I1(\n_0_deskew_enable_gen.pat_count[2]_i_2 ),
        .I2(pat_count[0]),
        .O(\n_0_deskew_enable_gen.pat_count[0]_i_1 ));
LUT4 #(
    .INIT(16'h2F80)) 
     \deskew_enable_gen.pat_count[1]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[5]_i_2 ),
        .I1(pat_count[0]),
        .I2(\n_0_deskew_enable_gen.pat_count[2]_i_2 ),
        .I3(pat_count[1]),
        .O(\n_0_deskew_enable_gen.pat_count[1]_i_1 ));
LUT5 #(
    .INIT(32'h2AFF8000)) 
     \deskew_enable_gen.pat_count[2]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[5]_i_2 ),
        .I1(pat_count[0]),
        .I2(pat_count[1]),
        .I3(\n_0_deskew_enable_gen.pat_count[2]_i_2 ),
        .I4(pat_count[2]),
        .O(\n_0_deskew_enable_gen.pat_count[2]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair104" *) 
   LUT6 #(
    .INIT(64'h0000000100010112)) 
     \deskew_enable_gen.pat_count[2]_i_2 
       (.I0(state[0]),
        .I1(\n_0_deskew_enable_gen.pat_count[2]_i_3 ),
        .I2(state[1]),
        .I3(state[2]),
        .I4(state[4]),
        .I5(state[9]),
        .O(\n_0_deskew_enable_gen.pat_count[2]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair97" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
     \deskew_enable_gen.pat_count[2]_i_3 
       (.I0(state[8]),
        .I1(state[3]),
        .I2(\n_0_deskew_enable_gen.min_value_1[4]_i_4 ),
        .I3(state[5]),
        .I4(state[6]),
        .I5(state[7]),
        .O(\n_0_deskew_enable_gen.pat_count[2]_i_3 ));
FDRE \deskew_enable_gen.pat_count_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.pat_count[0]_i_1 ),
        .Q(pat_count[0]),
        .R(I1));
FDRE \deskew_enable_gen.pat_count_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.pat_count[1]_i_1 ),
        .Q(pat_count[1]),
        .R(I1));
FDRE \deskew_enable_gen.pat_count_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.pat_count[2]_i_1 ),
        .Q(pat_count[2]),
        .R(I1));
LUT2 #(
    .INIT(4'h2)) 
     \deskew_enable_gen.state[0]_i_1 
       (.I0(state[0]),
        .I1(calib_start),
        .O(\n_0_deskew_enable_gen.state[0]_i_1 ));
LUT6 #(
    .INIT(64'hFFFFFFFF00002000)) 
     \deskew_enable_gen.state[10]_i_1 
       (.I0(state[7]),
        .I1(step_count[0]),
        .I2(step_count[2]),
        .I3(step_count[1]),
        .I4(\n_0_deskew_enable_gen.state[10]_i_2 ),
        .I5(\n_0_deskew_enable_gen.state[10]_i_3 ),
        .O(\n_0_deskew_enable_gen.state[10]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair114" *) 
   LUT5 #(
    .INIT(32'h00000001)) 
     \deskew_enable_gen.state[10]_i_2 
       (.I0(grp_count[3]),
        .I1(grp_count[4]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(grp_count[2]),
        .O(\n_0_deskew_enable_gen.state[10]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair122" *) 
   LUT5 #(
    .INIT(32'hA880AAAA)) 
     \deskew_enable_gen.state[10]_i_3 
       (.I0(state[10]),
        .I1(grp_p3_val),
        .I2(grp_p1_val),
        .I3(grp_p0_val),
        .I4(dout_p0_val),
        .O(\n_0_deskew_enable_gen.state[10]_i_3 ));
LUT6 #(
    .INIT(64'hFF0A22002A0A2200)) 
     \deskew_enable_gen.state[11]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[11]_i_3 ),
        .I1(\n_0_deskew_enable_gen.state[11]_i_4 ),
        .I2(\n_0_deskew_enable_gen.state[11]_i_5 ),
        .I3(\n_0_deskew_enable_gen.state[11]_i_6 ),
        .I4(\n_0_deskew_enable_gen.state[11]_i_7 ),
        .I5(\n_0_deskew_enable_gen.state[11]_i_8 ),
        .O(\n_0_deskew_enable_gen.state[11]_i_1 ));
LUT2 #(
    .INIT(4'h8)) 
     \deskew_enable_gen.state[11]_i_10 
       (.I0(step_count[1]),
        .I1(step_count[0]),
        .O(\n_0_deskew_enable_gen.state[11]_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair122" *) 
   LUT5 #(
    .INIT(32'h00000008)) 
     \deskew_enable_gen.state[11]_i_11 
       (.I0(dout_p0_val),
        .I1(state[10]),
        .I2(grp_p0_val),
        .I3(grp_p1_val),
        .I4(grp_p3_val),
        .O(\n_0_deskew_enable_gen.state[11]_i_11 ));
LUT6 #(
    .INIT(64'hFFFFFFFFFEEEEEEE)) 
     \deskew_enable_gen.state[11]_i_2 
       (.I0(\n_0_deskew_enable_gen.state[11]_i_9 ),
        .I1(state[11]),
        .I2(state[7]),
        .I3(\n_0_deskew_enable_gen.state[11]_i_10 ),
        .I4(step_count[2]),
        .I5(\n_0_deskew_enable_gen.state[11]_i_11 ),
        .O(\n_0_deskew_enable_gen.state[11]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair95" *) 
   LUT4 #(
    .INIT(16'h0001)) 
     \deskew_enable_gen.state[11]_i_3 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[3]),
        .O(\n_0_deskew_enable_gen.state[11]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair89" *) 
   LUT5 #(
    .INIT(32'hFFFEFEE9)) 
     \deskew_enable_gen.state[11]_i_4 
       (.I0(state[7]),
        .I1(state[8]),
        .I2(state[9]),
        .I3(state[11]),
        .I4(state[10]),
        .O(\n_0_deskew_enable_gen.state[11]_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair125" *) 
   LUT3 #(
    .INIT(8'hE9)) 
     \deskew_enable_gen.state[11]_i_5 
       (.I0(state[5]),
        .I1(state[6]),
        .I2(state[4]),
        .O(\n_0_deskew_enable_gen.state[11]_i_5 ));
LUT3 #(
    .INIT(8'h01)) 
     \deskew_enable_gen.state[11]_i_6 
       (.I0(state[6]),
        .I1(state[5]),
        .I2(state[4]),
        .O(\n_0_deskew_enable_gen.state[11]_i_6 ));
(* SOFT_HLUTNM = "soft_lutpair88" *) 
   LUT5 #(
    .INIT(32'h00000001)) 
     \deskew_enable_gen.state[11]_i_7 
       (.I0(state[10]),
        .I1(state[11]),
        .I2(state[9]),
        .I3(state[8]),
        .I4(state[7]),
        .O(\n_0_deskew_enable_gen.state[11]_i_7 ));
(* SOFT_HLUTNM = "soft_lutpair96" *) 
   LUT4 #(
    .INIT(16'h0116)) 
     \deskew_enable_gen.state[11]_i_8 
       (.I0(state[0]),
        .I1(state[3]),
        .I2(state[2]),
        .I3(state[1]),
        .O(\n_0_deskew_enable_gen.state[11]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair76" *) 
   LUT6 #(
    .INIT(64'h0000000200000000)) 
     \deskew_enable_gen.state[11]_i_9 
       (.I0(grp_count[2]),
        .I1(grp_count[3]),
        .I2(grp_count[4]),
        .I3(grp_count[1]),
        .I4(grp_count[0]),
        .I5(state[9]),
        .O(\n_0_deskew_enable_gen.state[11]_i_9 ));
LUT5 #(
    .INIT(32'hBFFFAAAA)) 
     \deskew_enable_gen.state[1]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[1]_i_2 ),
        .I1(count[1]),
        .I2(count[0]),
        .I3(count[2]),
        .I4(state[1]),
        .O(\n_0_deskew_enable_gen.state[1]_i_1 ));
LUT6 #(
    .INIT(64'hFEEEFEEEFFFFFEEE)) 
     \deskew_enable_gen.state[1]_i_2 
       (.I0(\n_0_deskew_enable_gen.delay_tap[4]_i_3 ),
        .I1(state[8]),
        .I2(state[0]),
        .I3(calib_start),
        .I4(state[9]),
        .I5(\n_0_deskew_enable_gen.state[1]_i_3 ),
        .O(\n_0_deskew_enable_gen.state[1]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair76" *) 
   LUT5 #(
    .INIT(32'h00010000)) 
     \deskew_enable_gen.state[1]_i_3 
       (.I0(grp_count[0]),
        .I1(grp_count[1]),
        .I2(grp_count[4]),
        .I3(grp_count[3]),
        .I4(grp_count[2]),
        .O(\n_0_deskew_enable_gen.state[1]_i_3 ));
LUT5 #(
    .INIT(32'hBFFF8000)) 
     \deskew_enable_gen.state[2]_i_1 
       (.I0(state[1]),
        .I1(count[1]),
        .I2(count[0]),
        .I3(count[2]),
        .I4(\n_0_deskew_enable_gen.state[2]_i_2 ),
        .O(\n_0_deskew_enable_gen.state[2]_i_1 ));
LUT6 #(
    .INIT(64'h0222222222222222)) 
     \deskew_enable_gen.state[2]_i_2 
       (.I0(state[2]),
        .I1(\n_0_deskew_enable_gen.state[6]_i_2 ),
        .I2(p_3_in),
        .I3(f3_val[0]),
        .I4(p_2_in5_in),
        .I5(p_0_in4_in),
        .O(\n_0_deskew_enable_gen.state[2]_i_2 ));
LUT5 #(
    .INIT(32'hAEAEFFAE)) 
     \deskew_enable_gen.state[3]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[3]_i_2 ),
        .I1(state[3]),
        .I2(\n_0_deskew_enable_gen.state[3]_i_3 ),
        .I3(state[2]),
        .I4(\n_0_deskew_enable_gen.state[3]_i_4 ),
        .O(\n_0_deskew_enable_gen.state[3]_i_1 ));
LUT4 #(
    .INIT(16'h2AAA)) 
     \deskew_enable_gen.state[3]_i_2 
       (.I0(\n_0_deskew_enable_gen.state[5]_i_2 ),
        .I1(pat_count[2]),
        .I2(pat_count[0]),
        .I3(pat_count[1]),
        .O(\n_0_deskew_enable_gen.state[3]_i_2 ));
LUT3 #(
    .INIT(8'h04)) 
     \deskew_enable_gen.state[3]_i_3 
       (.I0(count[2]),
        .I1(count[1]),
        .I2(count[0]),
        .O(\n_0_deskew_enable_gen.state[3]_i_3 ));
LUT5 #(
    .INIT(32'h00007FFF)) 
     \deskew_enable_gen.state[3]_i_4 
       (.I0(p_0_in4_in),
        .I1(p_2_in5_in),
        .I2(f3_val[0]),
        .I3(p_3_in),
        .I4(\n_0_deskew_enable_gen.state[6]_i_2 ),
        .O(\n_0_deskew_enable_gen.state[3]_i_4 ));
LUT4 #(
    .INIT(16'h0400)) 
     \deskew_enable_gen.state[4]_i_1 
       (.I0(count[0]),
        .I1(count[1]),
        .I2(count[2]),
        .I3(state[3]),
        .O(\n_0_deskew_enable_gen.state[4]_i_1 ));
LUT4 #(
    .INIT(16'h8000)) 
     \deskew_enable_gen.state[5]_i_1 
       (.I0(pat_count[2]),
        .I1(pat_count[0]),
        .I2(pat_count[1]),
        .I3(\n_0_deskew_enable_gen.state[5]_i_2 ),
        .O(\n_0_deskew_enable_gen.state[5]_i_1 ));
LUT4 #(
    .INIT(16'hA808)) 
     \deskew_enable_gen.state[5]_i_2 
       (.I0(state[4]),
        .I1(\n_0_deskew_enable_gen.state[6]_i_2 ),
        .I2(flip_type),
        .I3(\n_0_deskew_enable_gen.state[6]_i_3 ),
        .O(\n_0_deskew_enable_gen.state[5]_i_2 ));
LUT6 #(
    .INIT(64'h004488FC004488CC)) 
     \deskew_enable_gen.state[6]_i_1 
       (.I0(flip_type),
        .I1(state[4]),
        .I2(state[2]),
        .I3(\n_0_deskew_enable_gen.state[6]_i_2 ),
        .I4(\n_0_deskew_enable_gen.state[6]_i_3 ),
        .I5(\n_0_deskew_enable_gen.state[6]_i_4 ),
        .O(\n_0_deskew_enable_gen.state[6]_i_1 ));
LUT4 #(
    .INIT(16'h8000)) 
     \deskew_enable_gen.state[6]_i_2 
       (.I0(p_3_in9_in),
        .I1(p3_val[0]),
        .I2(p_2_in8_in),
        .I3(p_0_in7_in),
        .O(\n_0_deskew_enable_gen.state[6]_i_2 ));
LUT4 #(
    .INIT(16'h8000)) 
     \deskew_enable_gen.state[6]_i_3 
       (.I0(p_3_in),
        .I1(f3_val[0]),
        .I2(p_2_in5_in),
        .I3(p_0_in4_in),
        .O(\n_0_deskew_enable_gen.state[6]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair93" *) 
   LUT3 #(
    .INIT(8'h80)) 
     \deskew_enable_gen.state[6]_i_4 
       (.I0(count[1]),
        .I1(count[0]),
        .I2(count[2]),
        .O(\n_0_deskew_enable_gen.state[6]_i_4 ));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.state[7]_i_1 
       (.I0(state[6]),
        .I1(state[5]),
        .O(\n_0_deskew_enable_gen.state[7]_i_1 ));
LUT4 #(
    .INIT(16'h0888)) 
     \deskew_enable_gen.state[8]_i_1 
       (.I0(\n_0_deskew_enable_gen.state[8]_i_2 ),
        .I1(state[7]),
        .I2(step_count[2]),
        .I3(step_count[1]),
        .O(\n_0_deskew_enable_gen.state[8]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair121" *) 
   LUT5 #(
    .INIT(32'h80000000)) 
     \deskew_enable_gen.state[8]_i_2 
       (.I0(O3[3]),
        .I1(O3[1]),
        .I2(O3[0]),
        .I3(O3[2]),
        .I4(O3[4]),
        .O(\n_0_deskew_enable_gen.state[8]_i_2 ));
LUT6 #(
    .INIT(64'hFFFFFFFF16000000)) 
     \deskew_enable_gen.state[9]_i_1 
       (.I0(grp_p0_val),
        .I1(grp_p1_val),
        .I2(grp_p3_val),
        .I3(dout_p0_val),
        .I4(state[10]),
        .I5(\n_0_deskew_enable_gen.grp_count[4]_i_4 ),
        .O(\n_0_deskew_enable_gen.state[9]_i_1 ));
FDSE \deskew_enable_gen.state_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[0]_i_1 ),
        .Q(state[0]),
        .S(I1));
FDRE \deskew_enable_gen.state_reg[10] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[10]_i_1 ),
        .Q(state[10]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[11] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[11]_i_2 ),
        .Q(state[11]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[1]_i_1 ),
        .Q(state[1]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[2]_i_1 ),
        .Q(state[2]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[3]_i_1 ),
        .Q(state[3]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[4]_i_1 ),
        .Q(state[4]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[5] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[5]_i_1 ),
        .Q(state[5]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[6] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[6]_i_1 ),
        .Q(state[6]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[7] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[7]_i_1 ),
        .Q(state[7]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[8] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[8]_i_1 ),
        .Q(state[8]),
        .R(I1));
FDRE \deskew_enable_gen.state_reg[9] 
       (.C(clk_ph_out),
        .CE(\n_0_deskew_enable_gen.state[11]_i_1 ),
        .D(\n_0_deskew_enable_gen.state[9]_i_1 ),
        .Q(state[9]),
        .R(I1));
LUT6 #(
    .INIT(64'hFFEAFFFFFFEA0000)) 
     \deskew_enable_gen.step_count[0]_i_1 
       (.I0(\n_0_deskew_enable_gen.step_count[0]_i_2 ),
        .I1(state[6]),
        .I2(\n_0_deskew_enable_gen.step_count[0]_i_3 ),
        .I3(state[10]),
        .I4(\n_0_deskew_enable_gen.step_count[2]_i_5 ),
        .I5(step_count[0]),
        .O(\n_0_deskew_enable_gen.step_count[0]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair124" *) 
   LUT5 #(
    .INIT(32'h82AAAAAA)) 
     \deskew_enable_gen.step_count[0]_i_2 
       (.I0(state[5]),
        .I1(flip_type),
        .I2(min_flip_1),
        .I3(step_count[1]),
        .I4(step_count[0]),
        .O(\n_0_deskew_enable_gen.step_count[0]_i_2 ));
LUT3 #(
    .INIT(8'h08)) 
     \deskew_enable_gen.step_count[0]_i_3 
       (.I0(step_count[1]),
        .I1(step_count[2]),
        .I2(step_count[0]),
        .O(\n_0_deskew_enable_gen.step_count[0]_i_3 ));
LUT6 #(
    .INIT(64'hFF20FFFFFF200000)) 
     \deskew_enable_gen.step_count[1]_i_1 
       (.I0(state[5]),
        .I1(\n_0_deskew_enable_gen.step_count[2]_i_4 ),
        .I2(\n_0_deskew_enable_gen.step_count[1]_i_2 ),
        .I3(\n_0_deskew_enable_gen.step_count[1]_i_3 ),
        .I4(\n_0_deskew_enable_gen.step_count[2]_i_5 ),
        .I5(step_count[1]),
        .O(\n_0_deskew_enable_gen.step_count[1]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair101" *) 
   LUT4 #(
    .INIT(16'hBEAA)) 
     \deskew_enable_gen.step_count[1]_i_2 
       (.I0(step_count[1]),
        .I1(flip_type),
        .I2(min_flip_0),
        .I3(step_count[0]),
        .O(\n_0_deskew_enable_gen.step_count[1]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair102" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFFEEFEFEEE)) 
     \deskew_enable_gen.step_count[1]_i_3 
       (.I0(\n_0_deskew_enable_gen.state[11]_i_9 ),
        .I1(state[10]),
        .I2(state[6]),
        .I3(step_count[0]),
        .I4(step_count[1]),
        .I5(state[8]),
        .O(\n_0_deskew_enable_gen.step_count[1]_i_3 ));
LUT6 #(
    .INIT(64'hFEEEFFFFFEEE0000)) 
     \deskew_enable_gen.step_count[2]_i_1 
       (.I0(\n_0_deskew_enable_gen.step_count[2]_i_2 ),
        .I1(\n_0_deskew_enable_gen.step_count[2]_i_3 ),
        .I2(state[5]),
        .I3(\n_0_deskew_enable_gen.step_count[2]_i_4 ),
        .I4(\n_0_deskew_enable_gen.step_count[2]_i_5 ),
        .I5(step_count[2]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair89" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.step_count[2]_i_10 
       (.I0(state[6]),
        .I1(state[7]),
        .I2(state[8]),
        .I3(state[9]),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_10 ));
(* SOFT_HLUTNM = "soft_lutpair90" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
     \deskew_enable_gen.step_count[2]_i_11 
       (.I0(state[6]),
        .I1(state[7]),
        .I2(state[8]),
        .I3(state[9]),
        .I4(state[10]),
        .I5(state[11]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_11 ));
(* SOFT_HLUTNM = "soft_lutpair109" *) 
   LUT6 #(
    .INIT(64'hAAAEAAAAAAAAAAAA)) 
     \deskew_enable_gen.step_count[2]_i_2 
       (.I0(state[10]),
        .I1(state[9]),
        .I2(grp_count[0]),
        .I3(grp_count[1]),
        .I4(\n_0_deskew_enable_gen.data_flip_sel[10]_i_3 ),
        .I5(grp_count[2]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_2 ));
(* SOFT_HLUTNM = "soft_lutpair102" *) 
   LUT5 #(
    .INIT(32'hBEEEAAAA)) 
     \deskew_enable_gen.step_count[2]_i_3 
       (.I0(state[8]),
        .I1(step_count[2]),
        .I2(step_count[0]),
        .I3(step_count[1]),
        .I4(state[6]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair124" *) 
   LUT4 #(
    .INIT(16'h0880)) 
     \deskew_enable_gen.step_count[2]_i_4 
       (.I0(step_count[0]),
        .I1(step_count[1]),
        .I2(min_flip_1),
        .I3(flip_type),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_4 ));
LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA20)) 
     \deskew_enable_gen.step_count[2]_i_5 
       (.I0(\n_0_deskew_enable_gen.step_count[2]_i_6 ),
        .I1(step_count[2]),
        .I2(state[5]),
        .I3(\n_0_deskew_enable_gen.step_count[2]_i_7 ),
        .I4(state[6]),
        .I5(\n_0_deskew_enable_gen.state[11]_i_11 ),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_5 ));
LUT4 #(
    .INIT(16'h0012)) 
     \deskew_enable_gen.step_count[2]_i_6 
       (.I0(\n_0_deskew_enable_gen.step_count[2]_i_8 ),
        .I1(\n_0_deskew_enable_gen.step_count[2]_i_9 ),
        .I2(\n_0_deskew_enable_gen.step_count[2]_i_10 ),
        .I3(\n_0_deskew_enable_gen.step_count[2]_i_11 ),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_6 ));
LUT2 #(
    .INIT(4'hE)) 
     \deskew_enable_gen.step_count[2]_i_7 
       (.I0(state[8]),
        .I1(state[9]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_7 ));
(* SOFT_HLUTNM = "soft_lutpair107" *) 
   LUT6 #(
    .INIT(64'h0000000100010116)) 
     \deskew_enable_gen.step_count[2]_i_8 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[5]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_8 ));
(* SOFT_HLUTNM = "soft_lutpair72" *) 
   LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
     \deskew_enable_gen.step_count[2]_i_9 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[5]),
        .O(\n_0_deskew_enable_gen.step_count[2]_i_9 ));
FDRE \deskew_enable_gen.step_count_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.step_count[0]_i_1 ),
        .Q(step_count[0]),
        .R(I1));
FDRE \deskew_enable_gen.step_count_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.step_count[1]_i_1 ),
        .Q(step_count[1]),
        .R(I1));
FDRE \deskew_enable_gen.step_count_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_deskew_enable_gen.step_count[2]_i_1 ),
        .Q(step_count[2]),
        .R(I1));
LUT3 #(
    .INIT(8'h80)) 
     \sio_slav_calib_fsm.master_ack_i_1 
       (.I0(\n_0_sio_slav_calib_fsm.master_ack_i_2 ),
        .I1(\n_0_sio_slav_calib_fsm.master_ack_i_3 ),
        .I2(\n_0_sio_slav_calib_fsm.master_ack_i_4 ),
        .O(O6));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \sio_slav_calib_fsm.master_ack_i_2 
       (.I0(O5[1]),
        .I1(O5[0]),
        .I2(O5[4]),
        .I3(O5[5]),
        .I4(O5[2]),
        .I5(O5[3]),
        .O(\n_0_sio_slav_calib_fsm.master_ack_i_2 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \sio_slav_calib_fsm.master_ack_i_3 
       (.I0(O5[13]),
        .I1(O5[12]),
        .I2(O5[16]),
        .I3(O5[17]),
        .I4(O5[14]),
        .I5(O5[15]),
        .O(\n_0_sio_slav_calib_fsm.master_ack_i_3 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \sio_slav_calib_fsm.master_ack_i_4 
       (.I0(O5[7]),
        .I1(O5[6]),
        .I2(O5[10]),
        .I3(O5[11]),
        .I4(O5[8]),
        .I5(O5[9]),
        .O(\n_0_sio_slav_calib_fsm.master_ack_i_4 ));
LUT3 #(
    .INIT(8'h80)) 
     \sio_slav_calib_fsm.master_init_i_1 
       (.I0(\n_0_sio_slav_calib_fsm.master_init_i_2 ),
        .I1(\n_0_sio_slav_calib_fsm.master_init_i_3 ),
        .I2(\n_0_sio_slav_calib_fsm.master_init_i_4 ),
        .O(O4));
LUT6 #(
    .INIT(64'h0000000000000001)) 
     \sio_slav_calib_fsm.master_init_i_2 
       (.I0(O5[1]),
        .I1(O5[0]),
        .I2(O5[4]),
        .I3(O5[5]),
        .I4(O5[2]),
        .I5(O5[3]),
        .O(\n_0_sio_slav_calib_fsm.master_init_i_2 ));
LUT6 #(
    .INIT(64'h0000000000000001)) 
     \sio_slav_calib_fsm.master_init_i_3 
       (.I0(O5[13]),
        .I1(O5[12]),
        .I2(O5[16]),
        .I3(O5[17]),
        .I4(O5[14]),
        .I5(O5[15]),
        .O(\n_0_sio_slav_calib_fsm.master_init_i_3 ));
LUT6 #(
    .INIT(64'h0000000000000001)) 
     \sio_slav_calib_fsm.master_init_i_4 
       (.I0(O5[7]),
        .I1(O5[6]),
        .I2(O5[10]),
        .I3(O5[11]),
        .I4(O5[8]),
        .I5(O5[9]),
        .O(\n_0_sio_slav_calib_fsm.master_init_i_4 ));
LUT3 #(
    .INIT(8'h80)) 
     \sio_slav_calib_fsm.master_nack_i_1 
       (.I0(\n_0_sio_slav_calib_fsm.master_nack_i_2 ),
        .I1(\n_0_sio_slav_calib_fsm.master_nack_i_3 ),
        .I2(\n_0_sio_slav_calib_fsm.master_nack_i_4 ),
        .O(O7));
LUT6 #(
    .INIT(64'h0001000000000000)) 
     \sio_slav_calib_fsm.master_nack_i_2 
       (.I0(O5[1]),
        .I1(O5[0]),
        .I2(O5[4]),
        .I3(O5[5]),
        .I4(O5[2]),
        .I5(O5[3]),
        .O(\n_0_sio_slav_calib_fsm.master_nack_i_2 ));
LUT6 #(
    .INIT(64'h0001000000000000)) 
     \sio_slav_calib_fsm.master_nack_i_3 
       (.I0(O5[13]),
        .I1(O5[12]),
        .I2(O5[16]),
        .I3(O5[17]),
        .I4(O5[14]),
        .I5(O5[15]),
        .O(\n_0_sio_slav_calib_fsm.master_nack_i_3 ));
LUT6 #(
    .INIT(64'h0000000000008000)) 
     \sio_slav_calib_fsm.master_nack_i_4 
       (.I0(O5[7]),
        .I1(O5[6]),
        .I2(O5[10]),
        .I3(O5[11]),
        .I4(O5[8]),
        .I5(O5[9]),
        .O(\n_0_sio_slav_calib_fsm.master_nack_i_4 ));
LUT4 #(
    .INIT(16'hFF40)) 
     \state[7]_i_5 
       (.I0(calib_done),
        .I1(calib_error),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_phy_if" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_phy_if
   (clk_ph_out,
    aurora_rst_out_cdc_to,
    aurora_rst_out_r1,
    aurora_rst_out_r2,
    rx_user_reset,
    tx_phy_ready,
    rx_phy_ready,
    send_intr6_out,
    tx_phy_ctrl,
    I4,
    E,
    send_ch01_out,
    O1,
    O2,
    O3,
    Q,
    axi_c2c_selio_tx_clk_out,
    axi_c2c_selio_tx_data_out,
    O4,
    idelay_ref_clk,
    reset,
    axi_c2c_selio_rx_data_in,
    I1,
    tx_ch0_valid,
    m_aresetn,
    data_in,
    axi_c2c_selio_rx_clk_in,
    m_aclk);
  output clk_ph_out;
  output aurora_rst_out_cdc_to;
  output aurora_rst_out_r1;
  output aurora_rst_out_r2;
  output rx_user_reset;
  output tx_phy_ready;
  output rx_phy_ready;
  output send_intr6_out;
  output [1:0]tx_phy_ctrl;
  output [0:0]I4;
  output [0:0]E;
  output send_ch01_out;
  output O1;
  output O2;
  output O3;
  output [17:0]Q;
  output axi_c2c_selio_tx_clk_out;
  output [8:0]axi_c2c_selio_tx_data_out;
  output [2:0]O4;
  input idelay_ref_clk;
  input reset;
  input [8:0]axi_c2c_selio_rx_data_in;
  input I1;
  input tx_ch0_valid;
  input m_aresetn;
  input [17:0]data_in;
  input axi_c2c_selio_rx_clk_in;
  input m_aclk;

  wire [0:0]E;
  wire I1;
  wire [0:0]I4;
  wire O1;
  wire O2;
  wire O3;
  wire [2:0]O4;
  wire [17:0]Q;
  wire aurora_rst_out_cdc_to;
  wire aurora_rst_out_r1;
  wire aurora_rst_out_r2;
(* IBUF_LOW_PWR *)   wire axi_c2c_selio_rx_clk_in;
(* IBUF_LOW_PWR *)   wire [8:0]axi_c2c_selio_rx_data_in;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire axi_c2c_selio_tx_clk_out;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire [8:0]axi_c2c_selio_tx_data_out;
  wire [17:0]calib_data;
  wire calib_done;
  wire calib_error;
  wire calib_start;
  wire clk_ph_out;
  wire [17:0]data_in;
  wire [16:0]delay_load;
  wire [4:0]delay_tap;
  wire idelay_ready;
  wire idelay_ref_clk;
  wire m_aclk;
  wire m_aresetn;
  wire n_14_axi_chip2chip_phy_init_inst;
  wire n_15_axi_chip2chip_phy_init_inst;
  wire \n_28_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire \n_29_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire \n_2_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire \n_2_slave_sio_phy.axi_chip2chip_sio_input_inst ;
  wire \n_30_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire \n_31_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire \n_3_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire \n_3_slave_sio_phy.axi_chip2chip_sio_input_inst ;
  wire \n_9_slave_sio_phy.axi_chip2chip_phy_calib_inst ;
  wire reset;
  wire rx_phy_ready;
  wire rx_user_reset;
  wire send_ch01_out;
  wire send_intr6_out;
  wire tx_ch0_valid;
  wire [1:0]tx_phy_ctrl;
  wire tx_phy_ready;

control_to_core_slave_axi_axi_chip2chip_v4_2_phy_init axi_chip2chip_phy_init_inst
       (.E(E),
        .I1(\n_9_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .I2(\n_28_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .I3(rx_user_reset),
        .I4(\n_29_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .I5(I1),
        .I6(\n_2_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O1(tx_phy_ctrl[1]),
        .O2(I4),
        .O3(tx_phy_ctrl[0]),
        .O4(O1),
        .O5(O2),
        .O6(O3),
        .O7(O4),
        .Q({n_14_axi_chip2chip_phy_init_inst,n_15_axi_chip2chip_phy_init_inst}),
        .aurora_rst_out_cdc_to(aurora_rst_out_cdc_to),
        .aurora_rst_out_r1(aurora_rst_out_r1),
        .aurora_rst_out_r2(aurora_rst_out_r2),
        .calib_done(calib_done),
        .calib_error(calib_error),
        .calib_start(calib_start),
        .clk_ph_out(clk_ph_out),
        .idelay_ready(idelay_ready),
        .m_aclk(m_aclk),
        .rx_phy_ready(rx_phy_ready),
        .send_ch01_out(send_ch01_out),
        .send_intr6_out(send_intr6_out),
        .tx_ch0_valid(tx_ch0_valid),
        .tx_phy_ready(tx_phy_ready));
control_to_core_slave_axi_axi_chip2chip_v4_2_phy_calib \slave_sio_phy.axi_chip2chip_phy_calib_inst 
       (.I1(rx_user_reset),
        .I2(calib_data),
        .O1(\n_2_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O10({delay_load[16],delay_load[14],delay_load[12],delay_load[10],delay_load[8],delay_load[6],delay_load[4],delay_load[2],delay_load[0]}),
        .O2(\n_3_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O3(delay_tap),
        .O4(\n_9_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O5(Q),
        .O6(\n_28_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O7(\n_29_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O8(\n_30_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O9(\n_31_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .Q({n_14_axi_chip2chip_phy_init_inst,n_15_axi_chip2chip_phy_init_inst}),
        .S(\n_3_slave_sio_phy.axi_chip2chip_sio_input_inst ),
        .calib_done(calib_done),
        .calib_error(calib_error),
        .calib_start(calib_start),
        .clk_ph_out(clk_ph_out));
control_to_core_slave_axi_axi_chip2chip_v4_2_sio_input \slave_sio_phy.axi_chip2chip_sio_input_inst 
       (.I1(\n_3_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .I2(\n_31_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .I3(\n_30_slave_sio_phy.axi_chip2chip_phy_calib_inst ),
        .O1(\n_2_slave_sio_phy.axi_chip2chip_sio_input_inst ),
        .O10({delay_load[16],delay_load[14],delay_load[12],delay_load[10],delay_load[8],delay_load[6],delay_load[4],delay_load[2],delay_load[0]}),
        .O3(delay_tap),
        .Q(calib_data),
        .S(\n_3_slave_sio_phy.axi_chip2chip_sio_input_inst ),
        .axi_c2c_selio_rx_clk_in(axi_c2c_selio_rx_clk_in),
        .axi_c2c_selio_rx_data_in(axi_c2c_selio_rx_data_in),
        .clk_ph_out(clk_ph_out),
        .idelay_ready(idelay_ready),
        .idelay_ref_clk(idelay_ref_clk),
        .m_aresetn(m_aresetn),
        .reset(reset));
control_to_core_slave_axi_axi_chip2chip_v4_2_sio_output \slave_sio_phy.axi_chip2chip_sio_output_inst 
       (.I1(rx_user_reset),
        .axi_c2c_selio_tx_clk_out(axi_c2c_selio_tx_clk_out),
        .axi_c2c_selio_tx_data_out(axi_c2c_selio_tx_data_out),
        .clk_in(clk_ph_out),
        .data_in(data_in));
control_to_core_slave_axi_axi_chip2chip_v4_2_reset_sync \slave_sio_phy.rx_reset_sync_inst 
       (.I1(clk_ph_out),
        .I2(\n_2_slave_sio_phy.axi_chip2chip_sio_input_inst ),
        .O1(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_phy_init" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_phy_init
   (aurora_rst_out_cdc_to,
    aurora_rst_out_r1,
    aurora_rst_out_r2,
    calib_start,
    tx_phy_ready,
    rx_phy_ready,
    send_intr6_out,
    O1,
    O2,
    O3,
    E,
    send_ch01_out,
    O4,
    O5,
    Q,
    O6,
    O7,
    I1,
    clk_ph_out,
    I2,
    I3,
    I4,
    I5,
    tx_ch0_valid,
    idelay_ready,
    calib_error,
    calib_done,
    I6,
    m_aclk);
  output aurora_rst_out_cdc_to;
  output aurora_rst_out_r1;
  output aurora_rst_out_r2;
  output calib_start;
  output tx_phy_ready;
  output rx_phy_ready;
  output send_intr6_out;
  output O1;
  output O2;
  output O3;
  output [0:0]E;
  output send_ch01_out;
  output O4;
  output O5;
  output [1:0]Q;
  output O6;
  output [2:0]O7;
  input I1;
  input clk_ph_out;
  input I2;
  input I3;
  input I4;
  input I5;
  input tx_ch0_valid;
  input idelay_ready;
  input calib_error;
  input calib_done;
  input I6;
  input m_aclk;

  wire [0:0]E;
  wire I1;
  wire I2;
  wire I3;
  wire I4;
  wire I5;
  wire I6;
  wire O1;
  wire O2;
  wire O3;
  wire O4;
  wire O5;
  wire O6;
  wire [2:0]O7;
  wire [1:0]Q;
  wire aurora_rst_out_cdc_to;
  wire aurora_rst_out_r1;
  wire aurora_rst_out_r2;
  wire calib_done;
  wire calib_error;
  wire calib_start;
  wire clk_ph_out;
  wire idelay_ready;
  wire m_aclk;
  wire master_ack;
  wire master_init;
  wire master_nack;
  wire n_0_calib_done_flop_i_1;
  wire n_0_calib_error_flop_i_1;
  wire \n_0_pat_count[2]_i_1 ;
  wire \n_0_pat_count[3]_i_1 ;
  wire \n_0_pat_count[3]_i_2 ;
  wire n_0_rx_phy_ready_i_1;
  wire \n_0_state[2]_i_2 ;
  wire \n_0_state[7]_i_1 ;
  wire \n_0_state[7]_i_3 ;
  wire \n_0_state[7]_i_4 ;
  wire \n_0_state[7]_i_6 ;
  wire \n_0_state_reg[0] ;
  wire \n_0_state_reg[1] ;
  wire \n_0_state_reg[3] ;
  wire \n_0_state_reg[4] ;
  wire \n_0_state_reg[5] ;
  wire \n_0_state_reg[6] ;
  wire \n_0_tx_phy_ctrl[0]_i_1 ;
  wire \n_0_tx_phy_ctrl[0]_i_2 ;
  wire \n_0_tx_phy_ctrl[1]_i_1 ;
  wire \n_0_tx_phy_ctrl[2]_i_1 ;
  wire n_0_tx_phy_ready_i_1;
  wire n_0_tx_phy_ready_i_2;
  wire next_calib_start;
  wire [7:0]next_state;
  wire [1:0]p_0_in;
  wire [3:0]pat_count_reg__0;
  wire rx_phy_ready;
  wire send_ch01_out;
  wire send_intr6_out;
  wire [2:0]src_data;
  wire tx_ch0_valid;
  wire tx_phy_ready;

(* SOFT_HLUTNM = "soft_lutpair70" *) 
   LUT4 #(
    .INIT(16'hAAAB)) 
     \FSM_sequential_calib_intr_gen.cal_nibble[2]_i_2 
       (.I0(I3),
        .I1(O3),
        .I2(O2),
        .I3(O1),
        .O(O4));
LUT1 #(
    .INIT(2'h1)) 
     aw_fifo_reset_i_1
       (.I0(rx_phy_ready),
        .O(O6));
control_to_core_slave_axi_axi_chip2chip_v4_2_sync_cell__parameterized0 axi_chip2chip_sync_cell_inst
       (.D(src_data),
        .O7(O7),
        .m_aclk(m_aclk));
LUT6 #(
    .INIT(64'hFFFFFFEF00000004)) 
     calib_done_flop_i_1
       (.I0(\n_0_state_reg[6] ),
        .I1(\n_0_state_reg[5] ),
        .I2(Q[1]),
        .I3(\n_0_state_reg[0] ),
        .I4(\n_0_tx_phy_ctrl[0]_i_2 ),
        .I5(src_data[2]),
        .O(n_0_calib_done_flop_i_1));
FDCE calib_done_flop_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .CLR(I3),
        .D(n_0_calib_done_flop_i_1),
        .Q(src_data[2]));
LUT6 #(
    .INIT(64'hFFFFFFFB00000010)) 
     calib_error_flop_i_1
       (.I0(\n_0_state_reg[6] ),
        .I1(\n_0_state_reg[5] ),
        .I2(Q[1]),
        .I3(\n_0_state_reg[0] ),
        .I4(\n_0_tx_phy_ctrl[0]_i_2 ),
        .I5(src_data[1]),
        .O(n_0_calib_error_flop_i_1));
FDRE calib_error_flop_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(n_0_calib_error_flop_i_1),
        .Q(src_data[1]),
        .R(I3));
LUT3 #(
    .INIT(8'hFE)) 
     \calib_intr_gen.send_calib_i_1 
       (.I0(O1),
        .I1(O2),
        .I2(O3),
        .O(O5));
(* SOFT_HLUTNM = "soft_lutpair70" *) 
   LUT6 #(
    .INIT(64'h0F0F0F0F0F0F0F02)) 
     \calib_intr_gen.send_ch0_i_1 
       (.I0(I5),
        .I1(tx_ch0_valid),
        .I2(I3),
        .I3(O1),
        .I4(O2),
        .I5(O3),
        .O(send_ch01_out));
(* SOFT_HLUTNM = "soft_lutpair68" *) 
   LUT6 #(
    .INIT(64'h0000000000000100)) 
     \calib_intr_gen.send_intr_i_1 
       (.I0(O1),
        .I1(O2),
        .I2(O3),
        .I3(I5),
        .I4(tx_ch0_valid),
        .I5(I3),
        .O(send_intr6_out));
(* SOFT_HLUTNM = "soft_lutpair68" *) 
   LUT5 #(
    .INIT(32'h00000004)) 
     \calib_intr_gen.tx_ch0_data[3]_i_1 
       (.I0(tx_ch0_valid),
        .I1(I5),
        .I2(O3),
        .I3(O2),
        .I4(O1),
        .O(E));
LUT3 #(
    .INIT(8'h40)) 
     calib_start_i_1
       (.I0(\n_0_state_reg[1] ),
        .I1(Q[0]),
        .I2(\n_0_state[7]_i_4 ),
        .O(next_calib_start));
FDRE calib_start_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(next_calib_start),
        .Q(calib_start),
        .R(I3));
LUT1 #(
    .INIT(2'h2)) 
     i_0
       (.I0(1'b0),
        .O(aurora_rst_out_cdc_to));
LUT1 #(
    .INIT(2'h2)) 
     i_1
       (.I0(1'b0),
        .O(aurora_rst_out_r1));
LUT1 #(
    .INIT(2'h2)) 
     i_2
       (.I0(1'b0),
        .O(aurora_rst_out_r2));
LUT1 #(
    .INIT(2'h1)) 
     \pat_count[0]_i_1 
       (.I0(pat_count_reg__0[0]),
        .O(p_0_in[0]));
LUT2 #(
    .INIT(4'h6)) 
     \pat_count[1]_i_1 
       (.I0(pat_count_reg__0[0]),
        .I1(pat_count_reg__0[1]),
        .O(p_0_in[1]));
LUT3 #(
    .INIT(8'h78)) 
     \pat_count[2]_i_1 
       (.I0(pat_count_reg__0[0]),
        .I1(pat_count_reg__0[1]),
        .I2(pat_count_reg__0[2]),
        .O(\n_0_pat_count[2]_i_1 ));
LUT3 #(
    .INIT(8'h40)) 
     \pat_count[3]_i_1 
       (.I0(Q[0]),
        .I1(\n_0_state_reg[1] ),
        .I2(\n_0_state[7]_i_4 ),
        .O(\n_0_pat_count[3]_i_1 ));
LUT4 #(
    .INIT(16'h7F80)) 
     \pat_count[3]_i_2 
       (.I0(pat_count_reg__0[2]),
        .I1(pat_count_reg__0[1]),
        .I2(pat_count_reg__0[0]),
        .I3(pat_count_reg__0[3]),
        .O(\n_0_pat_count[3]_i_2 ));
FDRE \pat_count_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_pat_count[3]_i_1 ),
        .D(p_0_in[0]),
        .Q(pat_count_reg__0[0]),
        .R(I3));
FDRE \pat_count_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_pat_count[3]_i_1 ),
        .D(p_0_in[1]),
        .Q(pat_count_reg__0[1]),
        .R(I3));
FDRE \pat_count_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_pat_count[3]_i_1 ),
        .D(\n_0_pat_count[2]_i_1 ),
        .Q(pat_count_reg__0[2]),
        .R(I3));
FDRE \pat_count_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_pat_count[3]_i_1 ),
        .D(\n_0_pat_count[3]_i_2 ),
        .Q(pat_count_reg__0[3]),
        .R(I3));
FDRE phy_error_flop_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(1'b0),
        .Q(src_data[0]),
        .R(1'b0));
LUT6 #(
    .INIT(64'hFFFFFFEB00000100)) 
     rx_phy_ready_i_1
       (.I0(\n_0_tx_phy_ctrl[0]_i_2 ),
        .I1(\n_0_state_reg[0] ),
        .I2(Q[1]),
        .I3(\n_0_state_reg[5] ),
        .I4(\n_0_state_reg[6] ),
        .I5(rx_phy_ready),
        .O(n_0_rx_phy_ready_i_1));
FDCE rx_phy_ready_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .CLR(I3),
        .D(n_0_rx_phy_ready_i_1),
        .Q(rx_phy_ready));
FDRE \sio_slav_calib_fsm.master_ack_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2),
        .Q(master_ack),
        .R(1'b0));
FDRE \sio_slav_calib_fsm.master_init_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I1),
        .Q(master_init),
        .R(1'b0));
FDRE \sio_slav_calib_fsm.master_nack_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I4),
        .Q(master_nack),
        .R(1'b0));
LUT3 #(
    .INIT(8'h70)) 
     \state[0]_i_1 
       (.I0(master_ack),
        .I1(idelay_ready),
        .I2(\n_0_state_reg[0] ),
        .O(next_state[0]));
LUT5 #(
    .INIT(32'hFF808080)) 
     \state[1]_i_1 
       (.I0(idelay_ready),
        .I1(master_ack),
        .I2(\n_0_state_reg[0] ),
        .I3(\n_0_state_reg[1] ),
        .I4(\n_0_state[2]_i_2 ),
        .O(next_state[1]));
LUT5 #(
    .INIT(32'hF44444F4)) 
     \state[2]_i_1 
       (.I0(\n_0_state[2]_i_2 ),
        .I1(\n_0_state_reg[1] ),
        .I2(Q[0]),
        .I3(calib_error),
        .I4(calib_done),
        .O(next_state[2]));
LUT4 #(
    .INIT(16'h7FFF)) 
     \state[2]_i_2 
       (.I0(pat_count_reg__0[2]),
        .I1(pat_count_reg__0[1]),
        .I2(pat_count_reg__0[0]),
        .I3(pat_count_reg__0[3]),
        .O(\n_0_state[2]_i_2 ));
LUT5 #(
    .INIT(32'h08FF0808)) 
     \state[3]_i_1 
       (.I0(calib_done),
        .I1(Q[0]),
        .I2(calib_error),
        .I3(master_nack),
        .I4(\n_0_state_reg[3] ),
        .O(next_state[3]));
LUT5 #(
    .INIT(32'hFF909090)) 
     \state[4]_i_1 
       (.I0(master_init),
        .I1(master_ack),
        .I2(\n_0_state_reg[4] ),
        .I3(master_nack),
        .I4(\n_0_state_reg[3] ),
        .O(next_state[4]));
LUT2 #(
    .INIT(4'hE)) 
     \state[5]_i_1 
       (.I0(\n_0_state_reg[5] ),
        .I1(\n_0_state_reg[6] ),
        .O(next_state[5]));
LUT3 #(
    .INIT(8'h08)) 
     \state[6]_i_1 
       (.I0(master_ack),
        .I1(\n_0_state_reg[4] ),
        .I2(master_init),
        .O(next_state[6]));
LUT4 #(
    .INIT(16'hBEAA)) 
     \state[7]_i_1 
       (.I0(\n_0_state[7]_i_3 ),
        .I1(\n_0_state_reg[1] ),
        .I2(Q[0]),
        .I3(\n_0_state[7]_i_4 ),
        .O(\n_0_state[7]_i_1 ));
LUT4 #(
    .INIT(16'hAAEA)) 
     \state[7]_i_2 
       (.I0(I6),
        .I1(master_init),
        .I2(\n_0_state_reg[4] ),
        .I3(master_ack),
        .O(next_state[7]));
(* SOFT_HLUTNM = "soft_lutpair69" *) 
   LUT6 #(
    .INIT(64'h000000020003033E)) 
     \state[7]_i_3 
       (.I0(\n_0_state[7]_i_6 ),
        .I1(\n_0_state_reg[5] ),
        .I2(\n_0_state_reg[6] ),
        .I3(Q[1]),
        .I4(\n_0_state_reg[0] ),
        .I5(\n_0_tx_phy_ctrl[0]_i_2 ),
        .O(\n_0_state[7]_i_3 ));
(* SOFT_HLUTNM = "soft_lutpair69" *) 
   LUT6 #(
    .INIT(64'h0000000000000001)) 
     \state[7]_i_4 
       (.I0(\n_0_state_reg[0] ),
        .I1(Q[1]),
        .I2(\n_0_state_reg[6] ),
        .I3(\n_0_state_reg[5] ),
        .I4(\n_0_state_reg[4] ),
        .I5(\n_0_state_reg[3] ),
        .O(\n_0_state[7]_i_4 ));
(* SOFT_HLUTNM = "soft_lutpair71" *) 
   LUT4 #(
    .INIT(16'h0006)) 
     \state[7]_i_6 
       (.I0(\n_0_state_reg[4] ),
        .I1(\n_0_state_reg[3] ),
        .I2(Q[0]),
        .I3(\n_0_state_reg[1] ),
        .O(\n_0_state[7]_i_6 ));
FDSE \state_reg[0] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[0]),
        .Q(\n_0_state_reg[0] ),
        .S(I3));
FDRE \state_reg[1] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[1]),
        .Q(\n_0_state_reg[1] ),
        .R(I3));
FDRE \state_reg[2] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[2]),
        .Q(Q[0]),
        .R(I3));
FDRE \state_reg[3] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[3]),
        .Q(\n_0_state_reg[3] ),
        .R(I3));
FDRE \state_reg[4] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[4]),
        .Q(\n_0_state_reg[4] ),
        .R(I3));
FDRE \state_reg[5] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[5]),
        .Q(\n_0_state_reg[5] ),
        .R(I3));
FDRE \state_reg[6] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[6]),
        .Q(\n_0_state_reg[6] ),
        .R(I3));
FDRE \state_reg[7] 
       (.C(clk_ph_out),
        .CE(\n_0_state[7]_i_1 ),
        .D(next_state[7]),
        .Q(Q[1]),
        .R(I3));
LUT4 #(
    .INIT(16'hBFB0)) 
     \tx_phy_ctrl[0]_i_1 
       (.I0(\n_0_tx_phy_ctrl[0]_i_2 ),
        .I1(\n_0_state_reg[5] ),
        .I2(\n_0_state[7]_i_1 ),
        .I3(O2),
        .O(\n_0_tx_phy_ctrl[0]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair71" *) 
   LUT4 #(
    .INIT(16'hFFFE)) 
     \tx_phy_ctrl[0]_i_2 
       (.I0(Q[0]),
        .I1(\n_0_state_reg[1] ),
        .I2(\n_0_state_reg[4] ),
        .I3(\n_0_state_reg[3] ),
        .O(\n_0_tx_phy_ctrl[0]_i_2 ));
LUT5 #(
    .INIT(32'hFEFFFE00)) 
     \tx_phy_ctrl[1]_i_1 
       (.I0(Q[1]),
        .I1(\n_0_state_reg[6] ),
        .I2(\n_0_state_reg[3] ),
        .I3(\n_0_state[7]_i_1 ),
        .I4(O3),
        .O(\n_0_tx_phy_ctrl[1]_i_1 ));
LUT4 #(
    .INIT(16'hEFE0)) 
     \tx_phy_ctrl[2]_i_1 
       (.I0(\n_0_state_reg[4] ),
        .I1(Q[1]),
        .I2(\n_0_state[7]_i_1 ),
        .I3(O1),
        .O(\n_0_tx_phy_ctrl[2]_i_1 ));
FDPE \tx_phy_ctrl_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_tx_phy_ctrl[0]_i_1 ),
        .PRE(I3),
        .Q(O2));
FDCE \tx_phy_ctrl_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .CLR(I3),
        .D(\n_0_tx_phy_ctrl[1]_i_1 ),
        .Q(O3));
FDCE \tx_phy_ctrl_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .CLR(I3),
        .D(\n_0_tx_phy_ctrl[2]_i_1 ),
        .Q(O1));
LUT6 #(
    .INIT(64'hFFFF8FFF00008000)) 
     tx_phy_ready_i_1
       (.I0(master_ack),
        .I1(idelay_ready),
        .I2(\n_0_state_reg[0] ),
        .I3(n_0_tx_phy_ready_i_2),
        .I4(\n_0_tx_phy_ctrl[0]_i_2 ),
        .I5(tx_phy_ready),
        .O(n_0_tx_phy_ready_i_1));
LUT3 #(
    .INIT(8'h01)) 
     tx_phy_ready_i_2
       (.I0(Q[1]),
        .I1(\n_0_state_reg[6] ),
        .I2(\n_0_state_reg[5] ),
        .O(n_0_tx_phy_ready_i_2));
FDCE tx_phy_ready_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .CLR(I3),
        .D(n_0_tx_phy_ready_i_1),
        .Q(tx_phy_ready));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_reset_sync" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_reset_sync
   (O1,
    I1,
    I2);
  output O1;
  input I1;
  input I2;

  wire I1;
  wire I2;
  wire O1;
  wire [7:0]sync_reset_flop;

(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[0] 
       (.C(I1),
        .CE(1'b1),
        .D(1'b0),
        .PRE(I2),
        .Q(sync_reset_flop[0]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[1] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[0]),
        .PRE(I2),
        .Q(sync_reset_flop[1]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[2] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[1]),
        .PRE(I2),
        .Q(sync_reset_flop[2]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[3] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[2]),
        .PRE(I2),
        .Q(sync_reset_flop[3]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[4] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[3]),
        .PRE(I2),
        .Q(sync_reset_flop[4]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[5] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[4]),
        .PRE(I2),
        .Q(sync_reset_flop[5]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[6] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[5]),
        .PRE(I2),
        .Q(sync_reset_flop[6]));
(* SHREG_EXTRACT = "no" *) 
   FDPE \sync_reset_flop_reg[7] 
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[6]),
        .PRE(I2),
        .Q(sync_reset_flop[7]));
FDPE sync_reset_out_reg
       (.C(I1),
        .CE(1'b1),
        .D(sync_reset_flop[7]),
        .PRE(I2),
        .Q(O1));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_sio_input" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_sio_input
   (idelay_ready,
    clk_ph_out,
    O1,
    S,
    Q,
    idelay_ref_clk,
    reset,
    axi_c2c_selio_rx_data_in,
    O10,
    O3,
    m_aresetn,
    I1,
    I2,
    I3,
    axi_c2c_selio_rx_clk_in);
  output idelay_ready;
  output clk_ph_out;
  output O1;
  output [0:0]S;
  output [17:0]Q;
  input idelay_ref_clk;
  input reset;
  input [8:0]axi_c2c_selio_rx_data_in;
  input [8:0]O10;
  input [4:0]O3;
  input m_aresetn;
  input I1;
  input I2;
  input I3;
  input axi_c2c_selio_rx_clk_in;

  wire I1;
  wire I2;
  wire I3;
  wire O1;
  wire [8:0]O10;
  wire [4:0]O3;
  wire [17:0]Q;
  wire [0:0]S;
(* IBUF_LOW_PWR *)   wire axi_c2c_selio_rx_clk_in;
(* IBUF_LOW_PWR *)   wire [8:0]axi_c2c_selio_rx_data_in;
  wire clk_ph_out;
  wire idelay_ready;
  wire idelay_ref_clk;
  wire m_aresetn;
  wire \n_0_ddr_idelay_gen.ddr_idelay_inst[4].gen_idelaye2.IDELAYE2_inst ;
  wire \n_0_ddr_idelay_gen.ddr_idelay_inst[6].gen_idelaye2.IDELAYE2_inst ;
  wire \n_0_ddr_idelay_gen.ddr_idelay_inst[8].gen_idelaye2.IDELAYE2_inst ;
  wire p_0_in;
  wire p_10_in;
  wire p_10_out;
  wire p_11_out;
  wire p_12_in;
  wire p_13_out;
  wire p_14_in;
  wire p_14_out;
  wire p_15_in;
  wire p_16_in;
  wire p_16_out;
  wire p_17_out;
  wire p_18_in;
  wire p_19_out;
  wire p_1_out;
  wire p_20_out;
  wire p_21_in;
  wire p_22_out;
  wire p_23_out;
  wire p_24_in;
  wire p_25_out;
  wire p_26_out;
  wire p_2_in;
  wire p_2_out;
  wire p_3_in;
  wire p_4_in;
  wire p_4_out;
  wire p_5_out;
  wire p_6_in;
  wire p_7_out;
  wire p_8_in;
  wire p_8_out;
  wire p_9_in;
  wire reset;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[0].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[1].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[2].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[3].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[4].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[5].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[6].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[7].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;
  wire [4:0]\NLW_ddr_idelay_gen.ddr_idelay_inst[8].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED ;

control_to_core_slave_axi_axi_chip2chip_v4_2_clk_gen axi_chip2chip_clk_gen_inst
       (.O1(O1),
        .axi_c2c_selio_rx_clk_in(axi_c2c_selio_rx_clk_in),
        .clk_ph_out(clk_ph_out),
        .m_aresetn(m_aresetn),
        .reset(reset));
FDRE \data_out_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_26_out),
        .Q(Q[0]),
        .R(1'b0));
FDRE \data_out_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_11_out),
        .Q(Q[10]),
        .R(1'b0));
FDRE \data_out_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_10_out),
        .Q(Q[11]),
        .R(1'b0));
FDRE \data_out_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_8_out),
        .Q(Q[12]),
        .R(1'b0));
FDRE \data_out_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_7_out),
        .Q(Q[13]),
        .R(1'b0));
FDRE \data_out_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_5_out),
        .Q(Q[14]),
        .R(1'b0));
FDRE \data_out_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_4_out),
        .Q(Q[15]),
        .R(1'b0));
FDRE \data_out_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_2_out),
        .Q(Q[16]),
        .R(1'b0));
FDRE \data_out_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_1_out),
        .Q(Q[17]),
        .R(1'b0));
FDRE \data_out_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_25_out),
        .Q(Q[1]),
        .R(1'b0));
FDRE \data_out_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_23_out),
        .Q(Q[2]),
        .R(1'b0));
FDRE \data_out_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_22_out),
        .Q(Q[3]),
        .R(1'b0));
FDRE \data_out_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_20_out),
        .Q(Q[4]),
        .R(1'b0));
FDRE \data_out_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_19_out),
        .Q(Q[5]),
        .R(1'b0));
FDRE \data_out_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_17_out),
        .Q(Q[6]),
        .R(1'b0));
FDRE \data_out_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_16_out),
        .Q(Q[7]),
        .R(1'b0));
FDRE \data_out_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_14_out),
        .Q(Q[8]),
        .R(1'b0));
FDRE \data_out_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_13_out),
        .Q(Q[9]),
        .R(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[0].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_24_in),
        .Q1(p_26_out),
        .Q2(p_25_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[1].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_21_in),
        .Q1(p_23_out),
        .Q2(p_22_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[2].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_18_in),
        .Q1(p_20_out),
        .Q2(p_19_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[3].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_15_in),
        .Q1(p_17_out),
        .Q2(p_16_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[4].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_ddr_idelay_gen.ddr_idelay_inst[4].gen_idelaye2.IDELAYE2_inst ),
        .Q1(p_14_out),
        .Q2(p_13_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[5].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_9_in),
        .Q1(p_11_out),
        .Q2(p_10_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[6].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_ddr_idelay_gen.ddr_idelay_inst[6].gen_idelaye2.IDELAYE2_inst ),
        .Q1(p_8_out),
        .Q2(p_7_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[7].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(p_3_in),
        .Q1(p_5_out),
        .Q2(p_4_out),
        .R(1'b0),
        .S(1'b0));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE_PIPELINED"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_iddr_gen.input_ddr_inst[8].gen_iddr.iddr_inst 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_ddr_idelay_gen.ddr_idelay_inst[8].gen_idelaye2.IDELAYE2_inst ),
        .Q1(p_2_out),
        .Q2(p_1_out),
        .R(1'b0),
        .S(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[0].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[0].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(p_24_in),
        .IDATAIN(p_16_in),
        .INC(1'b0),
        .LD(O10[0]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[1].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[1].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(p_21_in),
        .IDATAIN(p_14_in),
        .INC(1'b0),
        .LD(O10[1]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[2].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[2].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(p_18_in),
        .IDATAIN(p_12_in),
        .INC(1'b0),
        .LD(O10[2]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[3].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[3].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(p_15_in),
        .IDATAIN(p_10_in),
        .INC(1'b0),
        .LD(O10[3]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[4].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[4].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(\n_0_ddr_idelay_gen.ddr_idelay_inst[4].gen_idelaye2.IDELAYE2_inst ),
        .IDATAIN(p_8_in),
        .INC(1'b0),
        .LD(O10[4]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[5].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[5].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(p_9_in),
        .IDATAIN(p_6_in),
        .INC(1'b0),
        .LD(O10[5]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[6].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[6].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(\n_0_ddr_idelay_gen.ddr_idelay_inst[6].gen_idelaye2.IDELAYE2_inst ),
        .IDATAIN(p_4_in),
        .INC(1'b0),
        .LD(O10[6]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[7].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[7].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(p_3_in),
        .IDATAIN(p_2_in),
        .INC(1'b0),
        .LD(O10[7]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* SIM_DELAY_D = "0" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(200.000000),
    .SIGNAL_PATTERN("DATA")) 
     \ddr_idelay_gen.ddr_idelay_inst[8].gen_idelaye2.IDELAYE2_inst 
       (.C(clk_ph_out),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(O3),
        .CNTVALUEOUT(\NLW_ddr_idelay_gen.ddr_idelay_inst[8].gen_idelaye2.IDELAYE2_inst_CNTVALUEOUT_UNCONNECTED [4:0]),
        .DATAIN(1'b1),
        .DATAOUT(\n_0_ddr_idelay_gen.ddr_idelay_inst[8].gen_idelaye2.IDELAYE2_inst ),
        .IDATAIN(p_0_in),
        .INC(1'b0),
        .LD(O10[8]),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
LUT6 #(
    .INIT(64'hDD0DDD0DDD0D0000)) 
     \deskew_enable_gen.p0_val[0]_i_3 
       (.I0(Q[15]),
        .I1(I1),
        .I2(Q[17]),
        .I3(I2),
        .I4(I3),
        .I5(Q[16]),
        .O(S));
(* IODELAY_GROUP = "C2C_PHY_group" *) 
   (* box_type = "PRIMITIVE" *) 
   IDELAYCTRL \idelayctrl_gen.IDELAYCTRL_inst 
       (.RDY(idelay_ready),
        .REFCLK(idelay_ref_clk),
        .RST(reset));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[0].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[0]),
        .O(p_16_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[1].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[1]),
        .O(p_14_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[2].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[2]),
        .O(p_12_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[3].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[3]),
        .O(p_10_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[4].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[4]),
        .O(p_8_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[5].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[5]),
        .O(p_6_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[6].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[6]),
        .O(p_4_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[7].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[7]),
        .O(p_2_in));
(* CAPACITANCE = "DONT_CARE" *) 
   (* IBUF_DELAY_VALUE = "0" *) 
   (* IFD_DELAY_VALUE = "AUTO" *) 
   (* box_type = "PRIMITIVE" *) 
   IBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_input_gen.signle_end_in[8].IBUF_inst 
       (.I(axi_c2c_selio_rx_data_in[8]),
        .O(p_0_in));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_sio_output" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_sio_output
   (axi_c2c_selio_tx_clk_out,
    axi_c2c_selio_tx_data_out,
    clk_in,
    data_in,
    I1);
  output axi_c2c_selio_tx_clk_out;
  output [8:0]axi_c2c_selio_tx_data_out;
  input clk_in;
  input [17:0]data_in;
  input I1;

  wire I1;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire axi_c2c_selio_tx_clk_out;
(* DRIVE = "12" *) (* SLEW = "SLOW" *)   wire [8:0]axi_c2c_selio_tx_data_out;
  wire clk_in;
  wire clk_out_oddr;
  wire [17:0]data_in;
  wire p_0_in;
  wire p_10_in;
  wire p_12_in;
  wire p_14_in;
  wire p_16_in;
  wire p_2_in;
  wire p_4_in;
  wire p_6_in;
  wire p_8_in;
  wire \NLW_ddr_output_gen.output_ddr_pins[0].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[1].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[2].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[3].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[4].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[5].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[6].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[7].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_ddr_output_gen.output_ddr_pins[8].gen_oddr.oddr_inst_S_UNCONNECTED ;
  wire \NLW_gen_oddr.oddr_clk_out_inst_R_UNCONNECTED ;
  wire \NLW_gen_oddr.oddr_clk_out_inst_S_UNCONNECTED ;

(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[0].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[0]),
        .D2(data_in[1]),
        .Q(p_16_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[0].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[1].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[2]),
        .D2(data_in[3]),
        .Q(p_14_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[1].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[2].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[4]),
        .D2(data_in[5]),
        .Q(p_12_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[2].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[3].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[6]),
        .D2(data_in[7]),
        .Q(p_10_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[3].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[4].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[8]),
        .D2(data_in[9]),
        .Q(p_8_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[4].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[5].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[10]),
        .D2(data_in[11]),
        .Q(p_6_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[5].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[6].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[12]),
        .D2(data_in[13]),
        .Q(p_4_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[6].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[7].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[14]),
        .D2(data_in[15]),
        .Q(p_2_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[7].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "FALSE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \ddr_output_gen.output_ddr_pins[8].gen_oddr.oddr_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(data_in[16]),
        .D2(data_in[17]),
        .Q(p_0_in),
        .R(I1),
        .S(\NLW_ddr_output_gen.output_ddr_pins[8].gen_oddr.oddr_inst_S_UNCONNECTED ));
(* __SRVAL = "TRUE" *) 
   (* box_type = "PRIMITIVE" *) 
   ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("ASYNC")) 
     \gen_oddr.oddr_clk_out_inst 
       (.C(clk_in),
        .CE(1'b1),
        .D1(1'b1),
        .D2(1'b0),
        .Q(clk_out_oddr),
        .R(\NLW_gen_oddr.oddr_clk_out_inst_R_UNCONNECTED ),
        .S(\NLW_gen_oddr.oddr_clk_out_inst_S_UNCONNECTED ));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_clk_out_gen.clk_obuf_inst 
       (.I(clk_out_oddr),
        .O(axi_c2c_selio_tx_clk_out));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[0].obuf_inst 
       (.I(p_16_in),
        .O(axi_c2c_selio_tx_data_out[0]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[1].obuf_inst 
       (.I(p_14_in),
        .O(axi_c2c_selio_tx_data_out[1]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[2].obuf_inst 
       (.I(p_12_in),
        .O(axi_c2c_selio_tx_data_out[2]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[3].obuf_inst 
       (.I(p_10_in),
        .O(axi_c2c_selio_tx_data_out[3]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[4].obuf_inst 
       (.I(p_8_in),
        .O(axi_c2c_selio_tx_data_out[4]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[5].obuf_inst 
       (.I(p_6_in),
        .O(axi_c2c_selio_tx_data_out[5]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[6].obuf_inst 
       (.I(p_4_in),
        .O(axi_c2c_selio_tx_data_out[6]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[7].obuf_inst 
       (.I(p_2_in),
        .O(axi_c2c_selio_tx_data_out[7]));
(* CAPACITANCE = "DONT_CARE" *) 
   (* box_type = "PRIMITIVE" *) 
   OBUF #(
    .IOSTANDARD("DEFAULT")) 
     \single_end_out_gen.single_ended_buf_gen[8].obuf_inst 
       (.I(p_0_in),
        .O(axi_c2c_selio_tx_data_out[8]));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_slave" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_slave
   (dout,
    O1,
    O2,
    AR,
    O3,
    tx_ch0_valid,
    m_axi_awvalid,
    m_axi_arvalid,
    m_axi_wvalid,
    m_axi_rready,
    m_axi_bready,
    axi_c2c_m2s_intr_out,
    O4,
    clk_ph_out,
    m_aclk,
    din,
    I1,
    send_intr6_out,
    send_ch01_out,
    rx_user_reset,
    I2,
    I3,
    tx_phy_ready,
    rx_phy_ready,
    m_aresetn,
    m_axi_awready,
    m_axi_arready,
    m_axi_wready,
    m_axi_rvalid,
    m_axi_bvalid,
    Q,
    axi_c2c_s2m_intr_in,
    E,
    tx_phy_ctrl,
    I4,
    I5);
  output [44:0]dout;
  output [44:0]O1;
  output [37:0]O2;
  output [0:0]AR;
  output O3;
  output tx_ch0_valid;
  output m_axi_awvalid;
  output m_axi_arvalid;
  output m_axi_wvalid;
  output m_axi_rready;
  output m_axi_bready;
  output [3:0]axi_c2c_m2s_intr_out;
  output [17:0]O4;
  input clk_ph_out;
  input m_aclk;
  input [35:0]din;
  input [2:0]I1;
  input send_intr6_out;
  input send_ch01_out;
  input rx_user_reset;
  input I2;
  input I3;
  input tx_phy_ready;
  input rx_phy_ready;
  input m_aresetn;
  input m_axi_awready;
  input m_axi_arready;
  input m_axi_wready;
  input m_axi_rvalid;
  input m_axi_bvalid;
  input [17:0]Q;
  input [3:0]axi_c2c_s2m_intr_in;
  input [0:0]E;
  input [1:0]tx_phy_ctrl;
  input [0:0]I4;
  input I5;

  wire [0:0]AR;
  wire [0:0]E;
  wire [2:0]I1;
  wire I2;
  wire I3;
  wire [0:0]I4;
  wire I5;
  wire [44:0]O1;
  wire [37:0]O2;
  wire O3;
  wire [17:0]O4;
  wire [17:0]Q;
  wire ar_ch_data_valid;
  wire ar_ch_fc;
  wire aw_ch_data_valid;
  wire aw_ch_fc;
  wire [3:0]axi_c2c_m2s_intr_out;
  wire [3:0]axi_c2c_s2m_intr_in;
  wire \axi_chip2chip_unpacker_inst/p_0_in ;
  wire \axi_chip2chip_unpacker_inst/p_0_in1_in ;
  wire br_ch_fc;
  wire br_fifo_reset;
  wire [1:1]calib_pattern;
  wire clk_ph_out;
  wire [35:0]din;
  wire [44:0]dout;
  wire fifo_empty;
  wire fifo_empty_1;
  wire fifo_full;
  wire fifo_full_0;
  wire fifo_full_2;
  wire fifo_re;
  wire int_ch1_ready5;
  wire m_aclk;
  wire m_aresetn;
  wire m_axi_arready;
  wire m_axi_arvalid;
  wire m_axi_awready;
  wire m_axi_awvalid;
  wire m_axi_bready;
  wire m_axi_bvalid;
  wire m_axi_rready;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axi_wvalid;
  wire n_0_axi_chip2chip_b_fifo_inst;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[10] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[11] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[12] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[13] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[14] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[15] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[16] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[17] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[2] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[3] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[5] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[6] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[7] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[8] ;
  wire \n_0_sio_io_stage.rx_user_data_flop_reg[9] ;
  wire n_10_axi_chip2chip_ch0_ctrl_inst;
  wire n_10_axi_chip2chip_r_fifo_inst;
  wire n_10_axi_chip2chip_tdm_inst;
  wire n_11_axi_chip2chip_ch0_ctrl_inst;
  wire n_11_axi_chip2chip_tdm_inst;
  wire n_12_axi_chip2chip_ch0_ctrl_inst;
  wire n_12_axi_chip2chip_r_fifo_inst;
  wire n_13_axi_chip2chip_ch0_ctrl_inst;
  wire n_13_axi_chip2chip_r_fifo_inst;
  wire n_14_axi_chip2chip_ch0_ctrl_inst;
  wire n_14_axi_chip2chip_r_fifo_inst;
  wire n_15_axi_chip2chip_ch0_ctrl_inst;
  wire n_16_axi_chip2chip_ch0_ctrl_inst;
  wire n_17_axi_chip2chip_ch0_ctrl_inst;
  wire n_18_axi_chip2chip_ch0_ctrl_inst;
  wire n_19_axi_chip2chip_decoder_inst;
  wire n_1_axi_chip2chip_b_fifo_inst;
  wire n_20_axi_chip2chip_ch0_ctrl_inst;
  wire n_26_axi_chip2chip_ch0_ctrl_inst;
  wire n_27_axi_chip2chip_ch0_ctrl_inst;
  wire n_28_axi_chip2chip_ch0_ctrl_inst;
  wire n_2_axi_chip2chip_b_fifo_inst;
  wire n_2_axi_chip2chip_ch0_ctrl_inst;
  wire n_2_axi_chip2chip_r_fifo_inst;
  wire n_3_axi_chip2chip_ch0_ctrl_inst;
  wire n_3_axi_chip2chip_decoder_inst;
  wire n_3_axi_chip2chip_r_fifo_inst;
  wire n_4_axi_chip2chip_ch0_ctrl_inst;
  wire n_4_axi_chip2chip_decoder_inst;
  wire n_4_axi_chip2chip_r_fifo_inst;
  wire n_5_axi_chip2chip_ch0_ctrl_inst;
  wire n_5_axi_chip2chip_decoder_inst;
  wire n_5_axi_chip2chip_r_fifo_inst;
  wire n_5_axi_chip2chip_tdm_inst;
  wire n_6_axi_chip2chip_ch0_ctrl_inst;
  wire n_6_axi_chip2chip_r_fifo_inst;
  wire n_7_axi_chip2chip_ch0_ctrl_inst;
  wire n_7_axi_chip2chip_r_fifo_inst;
  wire n_8_axi_chip2chip_ch0_ctrl_inst;
  wire n_8_axi_chip2chip_r_fifo_inst;
  wire n_8_axi_chip2chip_tdm_inst;
  wire n_9_axi_chip2chip_ch0_ctrl_inst;
  wire n_9_axi_chip2chip_r_fifo_inst;
  wire n_9_axi_chip2chip_tdm_inst;
  wire p_12_in;
  wire [47:36]pack_data_out;
  wire rd_ch_data_ready;
  wire rx_intr_data;
  wire rx_phy_ready;
  wire [4:0]rx_user_data_flop;
  wire rx_user_data_valid_flop;
  wire rx_user_reset;
  wire send_ch0;
  wire send_ch01_out;
  wire send_intr6_out;
  wire [3:1]slot_select;
  wire [17:0]tdm_data_out;
  wire tx_ch0_ready;
  wire tx_ch0_valid;
  wire [1:0]tx_phy_ctrl;
  wire tx_phy_ready;
  wire wd_ch_data_valid;
  wire wd_ch_fc;

FDPE aw_fifo_reset_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I3),
        .PRE(AR),
        .Q(br_fifo_reset));
control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo axi_chip2chip_ar_fifo_inst
       (.E(n_4_axi_chip2chip_decoder_inst),
        .O1(O1),
        .Q(pack_data_out),
        .ar_ch_data_valid(ar_ch_data_valid),
        .ar_ch_fc(ar_ch_fc),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .fifo_full(fifo_full),
        .m_aclk(m_aclk),
        .m_axi_arready(m_axi_arready),
        .m_axi_arvalid(m_axi_arvalid),
        .rx_user_reset(rx_user_reset));
control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo_0 axi_chip2chip_aw_fifo_inst
       (.E(n_3_axi_chip2chip_decoder_inst),
        .Q(pack_data_out),
        .aw_ch_data_valid(aw_ch_data_valid),
        .aw_ch_fc(aw_ch_fc),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .dout(dout),
        .fifo_full(fifo_full_0),
        .m_aclk(m_aclk),
        .m_axi_awready(m_axi_awready),
        .m_axi_awvalid(m_axi_awvalid),
        .rx_user_reset(rx_user_reset));
control_to_core_slave_axi_axi_chip2chip_v4_2_b_fifo axi_chip2chip_b_fifo_inst
       (.I1(I1),
        .Q(br_ch_fc),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .dout({n_0_axi_chip2chip_b_fifo_inst,n_1_axi_chip2chip_b_fifo_inst,n_2_axi_chip2chip_b_fifo_inst}),
        .fifo_empty(fifo_empty),
        .fifo_re(fifo_re),
        .int_ch1_ready5(int_ch1_ready5),
        .m_aclk(m_aclk),
        .m_axi_bready(m_axi_bready),
        .m_axi_bvalid(m_axi_bvalid),
        .tx_phy_ready(tx_phy_ready));
control_to_core_slave_axi_axi_chip2chip_v4_2_ch0_ctrl axi_chip2chip_ch0_ctrl_inst
       (.AR(AR),
        .D({n_2_axi_chip2chip_ch0_ctrl_inst,n_3_axi_chip2chip_ch0_ctrl_inst,n_4_axi_chip2chip_ch0_ctrl_inst,n_5_axi_chip2chip_ch0_ctrl_inst,n_6_axi_chip2chip_ch0_ctrl_inst,n_7_axi_chip2chip_ch0_ctrl_inst,n_8_axi_chip2chip_ch0_ctrl_inst,n_9_axi_chip2chip_ch0_ctrl_inst,n_10_axi_chip2chip_ch0_ctrl_inst,n_11_axi_chip2chip_ch0_ctrl_inst,n_12_axi_chip2chip_ch0_ctrl_inst,n_13_axi_chip2chip_ch0_ctrl_inst,n_14_axi_chip2chip_ch0_ctrl_inst,n_15_axi_chip2chip_ch0_ctrl_inst}),
        .E(E),
        .I1(n_7_axi_chip2chip_r_fifo_inst),
        .I10(I5),
        .I2(I2),
        .I3(n_8_axi_chip2chip_r_fifo_inst),
        .I4(n_9_axi_chip2chip_r_fifo_inst),
        .I5(n_5_axi_chip2chip_r_fifo_inst),
        .I6(n_10_axi_chip2chip_r_fifo_inst),
        .I7(n_6_axi_chip2chip_r_fifo_inst),
        .I8(pack_data_out[39:36]),
        .I9(I4),
        .O1(O3),
        .O2(n_16_axi_chip2chip_ch0_ctrl_inst),
        .O3(n_17_axi_chip2chip_ch0_ctrl_inst),
        .O4(n_18_axi_chip2chip_ch0_ctrl_inst),
        .O5(n_20_axi_chip2chip_ch0_ctrl_inst),
        .O6(tx_ch0_valid),
        .O7({n_26_axi_chip2chip_ch0_ctrl_inst,n_27_axi_chip2chip_ch0_ctrl_inst,n_28_axi_chip2chip_ch0_ctrl_inst}),
        .Q({slot_select,n_5_axi_chip2chip_tdm_inst}),
        .ar_ch_fc(ar_ch_fc),
        .aw_ch_fc(aw_ch_fc),
        .axi_c2c_m2s_intr_out(axi_c2c_m2s_intr_out),
        .axi_c2c_s2m_intr_in(axi_c2c_s2m_intr_in),
        .calib_pattern(calib_pattern),
        .clk_ph_out(clk_ph_out),
        .dout({n_0_axi_chip2chip_b_fifo_inst,n_1_axi_chip2chip_b_fifo_inst,n_2_axi_chip2chip_b_fifo_inst}),
        .m_aclk(m_aclk),
        .m_aresetn(m_aresetn),
        .rx_intr_data(rx_intr_data),
        .rx_user_reset(rx_user_reset),
        .send_ch0(send_ch0),
        .send_ch01_out(send_ch01_out),
        .send_intr6_out(send_intr6_out),
        .tx_ch0_ready(tx_ch0_ready),
        .tx_phy_ctrl(tx_phy_ctrl),
        .wd_ch_fc(wd_ch_fc));
control_to_core_slave_axi_axi_chip2chip_v4_2_decoder axi_chip2chip_decoder_inst
       (.E(n_3_axi_chip2chip_decoder_inst),
        .O1(n_4_axi_chip2chip_decoder_inst),
        .O2(n_5_axi_chip2chip_decoder_inst),
        .O3(pack_data_out),
        .O4({br_ch_fc,n_19_axi_chip2chip_decoder_inst}),
        .Q({\n_0_sio_io_stage.rx_user_data_flop_reg[17] ,\n_0_sio_io_stage.rx_user_data_flop_reg[16] ,\n_0_sio_io_stage.rx_user_data_flop_reg[15] ,\n_0_sio_io_stage.rx_user_data_flop_reg[14] ,\n_0_sio_io_stage.rx_user_data_flop_reg[13] ,\n_0_sio_io_stage.rx_user_data_flop_reg[12] ,\n_0_sio_io_stage.rx_user_data_flop_reg[11] ,\n_0_sio_io_stage.rx_user_data_flop_reg[10] ,\n_0_sio_io_stage.rx_user_data_flop_reg[9] ,\n_0_sio_io_stage.rx_user_data_flop_reg[8] ,\n_0_sio_io_stage.rx_user_data_flop_reg[7] ,\n_0_sio_io_stage.rx_user_data_flop_reg[6] ,\n_0_sio_io_stage.rx_user_data_flop_reg[5] ,rx_user_data_flop[4],\n_0_sio_io_stage.rx_user_data_flop_reg[3] ,\n_0_sio_io_stage.rx_user_data_flop_reg[2] ,rx_user_data_flop[1:0]}),
        .ar_ch_data_valid(ar_ch_data_valid),
        .aw_ch_data_valid(aw_ch_data_valid),
        .clk_ph_out(clk_ph_out),
        .fifo_full(fifo_full_0),
        .fifo_full_0(fifo_full),
        .fifo_full_1(fifo_full_2),
        .rx_intr_data(rx_intr_data),
        .rx_phy_ready(rx_phy_ready),
        .rx_user_data_valid_flop(rx_user_data_valid_flop),
        .rx_user_reset(rx_user_reset),
        .wd_ch_data_valid(wd_ch_data_valid));
control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo__parameterized1 axi_chip2chip_r_fifo_inst
       (.D({n_12_axi_chip2chip_r_fifo_inst,n_13_axi_chip2chip_r_fifo_inst,n_14_axi_chip2chip_r_fifo_inst}),
        .E(\axi_chip2chip_unpacker_inst/p_0_in1_in ),
        .I1({slot_select[1],n_5_axi_chip2chip_tdm_inst}),
        .I2(n_19_axi_chip2chip_decoder_inst),
        .I3(n_16_axi_chip2chip_ch0_ctrl_inst),
        .I4(n_8_axi_chip2chip_tdm_inst),
        .I5(n_17_axi_chip2chip_ch0_ctrl_inst),
        .I6(n_18_axi_chip2chip_ch0_ctrl_inst),
        .I7(n_11_axi_chip2chip_tdm_inst),
        .I8(n_9_axi_chip2chip_tdm_inst),
        .I9(n_10_axi_chip2chip_tdm_inst),
        .O1(n_5_axi_chip2chip_r_fifo_inst),
        .O2(n_6_axi_chip2chip_r_fifo_inst),
        .O3(n_7_axi_chip2chip_r_fifo_inst),
        .O4(n_8_axi_chip2chip_r_fifo_inst),
        .O5(n_9_axi_chip2chip_r_fifo_inst),
        .O6(n_10_axi_chip2chip_r_fifo_inst),
        .O7({n_26_axi_chip2chip_ch0_ctrl_inst,n_27_axi_chip2chip_ch0_ctrl_inst,n_28_axi_chip2chip_ch0_ctrl_inst}),
        .Q({\axi_chip2chip_unpacker_inst/p_0_in ,n_2_axi_chip2chip_r_fifo_inst,n_3_axi_chip2chip_r_fifo_inst,n_4_axi_chip2chip_r_fifo_inst}),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .din(din),
        .fifo_empty(fifo_empty_1),
        .m_aclk(m_aclk),
        .m_axi_rready(m_axi_rready),
        .m_axi_rvalid(m_axi_rvalid),
        .p_12_in(p_12_in),
        .rd_ch_data_ready(rd_ch_data_ready),
        .rx_user_reset(rx_user_reset),
        .tx_phy_ready(tx_phy_ready));
control_to_core_slave_axi_axi_chip2chip_v4_2_tdm axi_chip2chip_tdm_inst
       (.D(n_20_axi_chip2chip_ch0_ctrl_inst),
        .E(\axi_chip2chip_unpacker_inst/p_0_in1_in ),
        .I1({\axi_chip2chip_unpacker_inst/p_0_in ,n_2_axi_chip2chip_r_fifo_inst,n_3_axi_chip2chip_r_fifo_inst,n_4_axi_chip2chip_r_fifo_inst}),
        .I2({n_2_axi_chip2chip_ch0_ctrl_inst,n_3_axi_chip2chip_ch0_ctrl_inst,n_4_axi_chip2chip_ch0_ctrl_inst,n_5_axi_chip2chip_ch0_ctrl_inst,n_6_axi_chip2chip_ch0_ctrl_inst,n_7_axi_chip2chip_ch0_ctrl_inst,n_8_axi_chip2chip_ch0_ctrl_inst,n_9_axi_chip2chip_ch0_ctrl_inst,n_10_axi_chip2chip_ch0_ctrl_inst,n_12_axi_chip2chip_r_fifo_inst,n_13_axi_chip2chip_r_fifo_inst,n_14_axi_chip2chip_r_fifo_inst,n_11_axi_chip2chip_ch0_ctrl_inst,n_12_axi_chip2chip_ch0_ctrl_inst,n_13_axi_chip2chip_ch0_ctrl_inst,n_14_axi_chip2chip_ch0_ctrl_inst,n_15_axi_chip2chip_ch0_ctrl_inst}),
        .O1(n_8_axi_chip2chip_tdm_inst),
        .O2(n_9_axi_chip2chip_tdm_inst),
        .O3(n_10_axi_chip2chip_tdm_inst),
        .O4({br_ch_fc,n_19_axi_chip2chip_decoder_inst}),
        .O5(n_11_axi_chip2chip_tdm_inst),
        .O6(tdm_data_out),
        .Q({slot_select,n_5_axi_chip2chip_tdm_inst}),
        .calib_pattern(calib_pattern),
        .clk_ph_out(clk_ph_out),
        .fifo_empty(fifo_empty_1),
        .fifo_empty_0(fifo_empty),
        .fifo_re(fifo_re),
        .int_ch1_ready5(int_ch1_ready5),
        .p_12_in(p_12_in),
        .rd_ch_data_ready(rd_ch_data_ready),
        .rx_user_reset(rx_user_reset),
        .send_ch0(send_ch0),
        .tx_ch0_ready(tx_ch0_ready),
        .tx_ch0_valid(tx_ch0_valid),
        .tx_phy_ready(tx_phy_ready));
control_to_core_slave_axi_axi_chip2chip_v4_2_awr_fifo__parameterized0 axi_chip2chip_w_fifo_inst
       (.D(pack_data_out[45:36]),
        .E(n_5_axi_chip2chip_decoder_inst),
        .O2(O2),
        .br_fifo_reset(br_fifo_reset),
        .clk_ph_out(clk_ph_out),
        .fifo_full(fifo_full_2),
        .m_aclk(m_aclk),
        .m_axi_wready(m_axi_wready),
        .m_axi_wvalid(m_axi_wvalid),
        .rx_user_reset(rx_user_reset),
        .wd_ch_data_valid(wd_ch_data_valid),
        .wd_ch_fc(wd_ch_fc));
FDRE \sio_io_stage.rx_user_data_flop_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[0]),
        .Q(rx_user_data_flop[0]),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[10]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[10] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[11]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[11] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[12]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[12] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[13]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[13] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[14]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[14] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[15]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[15] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[16]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[16] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[17]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[17] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[1]),
        .Q(rx_user_data_flop[1]),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[2]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[2] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[3]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[3] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[4]),
        .Q(rx_user_data_flop[4]),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[5]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[5] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[6]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[6] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[7]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[7] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[8]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[8] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_flop_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(Q[9]),
        .Q(\n_0_sio_io_stage.rx_user_data_flop_reg[9] ),
        .R(rx_user_reset));
FDRE \sio_io_stage.rx_user_data_valid_flop_reg 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(1'b1),
        .Q(rx_user_data_valid_flop),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[0]),
        .Q(O4[0]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[10]),
        .Q(O4[10]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[11]),
        .Q(O4[11]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[12]),
        .Q(O4[12]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[13]),
        .Q(O4[13]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[14]),
        .Q(O4[14]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[15]),
        .Q(O4[15]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[16]),
        .Q(O4[16]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[17]),
        .Q(O4[17]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[1]),
        .Q(O4[1]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[2]),
        .Q(O4[2]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[3]),
        .Q(O4[3]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[4]),
        .Q(O4[4]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[5]),
        .Q(O4[5]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[6]),
        .Q(O4[6]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[7]),
        .Q(O4[7]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[8]),
        .Q(O4[8]),
        .R(rx_user_reset));
FDRE \sio_io_stage.tdm_user_data_flop_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(tdm_data_out[9]),
        .Q(O4[9]),
        .R(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_sync_cell" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_sync_cell
   (O1,
    O2,
    Q,
    rx_user_reset,
    I2,
    I1,
    I3,
    axi_c2c_s2m_intr_in,
    clk_ph_out);
  output [3:0]O1;
  output O2;
  input [3:0]Q;
  input rx_user_reset;
  input I2;
  input I1;
  input I3;
  input [3:0]axi_c2c_s2m_intr_in;
  input clk_ph_out;

  wire I1;
  wire I2;
  wire I3;
  wire [3:0]O1;
  wire O2;
  wire [3:0]Q;
  wire [3:0]axi_c2c_s2m_intr_in;
  wire clk_ph_out;
  wire \n_0_calib_intr_gen.intr_flop_i_2 ;
  wire \n_0_calib_intr_gen.intr_flop_i_3 ;
  wire rx_user_reset;
  wire [3:0]sync_flop_0;
  wire [3:0]sync_flop_1;
  wire [3:0]sync_flop_2;
  wire [3:0]sync_flop_3;
  wire [3:0]sync_flop_4;

LUT5 #(
    .INIT(32'h02030202)) 
     \calib_intr_gen.intr_flop_i_1 
       (.I0(\n_0_calib_intr_gen.intr_flop_i_2 ),
        .I1(rx_user_reset),
        .I2(I2),
        .I3(I1),
        .I4(I3),
        .O(O2));
LUT5 #(
    .INIT(32'hFFFF6FF6)) 
     \calib_intr_gen.intr_flop_i_2 
       (.I0(Q[0]),
        .I1(O1[0]),
        .I2(Q[3]),
        .I3(O1[3]),
        .I4(\n_0_calib_intr_gen.intr_flop_i_3 ),
        .O(\n_0_calib_intr_gen.intr_flop_i_2 ));
LUT4 #(
    .INIT(16'h6FF6)) 
     \calib_intr_gen.intr_flop_i_3 
       (.I0(O1[1]),
        .I1(Q[1]),
        .I2(O1[2]),
        .I3(Q[2]),
        .O(\n_0_calib_intr_gen.intr_flop_i_3 ));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(axi_c2c_s2m_intr_in[0]),
        .Q(sync_flop_0[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(axi_c2c_s2m_intr_in[1]),
        .Q(sync_flop_0[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(axi_c2c_s2m_intr_in[2]),
        .Q(sync_flop_0[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(axi_c2c_s2m_intr_in[3]),
        .Q(sync_flop_0[3]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_0[0]),
        .Q(sync_flop_1[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_0[1]),
        .Q(sync_flop_1[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_0[2]),
        .Q(sync_flop_1[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_0[3]),
        .Q(sync_flop_1[3]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_1[0]),
        .Q(sync_flop_2[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_1[1]),
        .Q(sync_flop_2[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_1[2]),
        .Q(sync_flop_2[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_1[3]),
        .Q(sync_flop_2[3]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_2[0]),
        .Q(sync_flop_3[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_2[1]),
        .Q(sync_flop_3[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_2[2]),
        .Q(sync_flop_3[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_2[3]),
        .Q(sync_flop_3[3]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_3[0]),
        .Q(sync_flop_4[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_3[1]),
        .Q(sync_flop_4[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_3[2]),
        .Q(sync_flop_4[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_3[3]),
        .Q(sync_flop_4[3]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_4[0]),
        .Q(O1[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_4[1]),
        .Q(O1[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_4[2]),
        .Q(O1[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(sync_flop_4[3]),
        .Q(O1[3]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_sync_cell" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_sync_cell_41
   (O1,
    Q,
    m_aclk);
  output [3:0]O1;
  input [3:0]Q;
  input m_aclk;

  wire [3:0]O1;
  wire [3:0]Q;
  wire m_aclk;
  wire \n_0_sync_flop_0_reg[0] ;
  wire \n_0_sync_flop_0_reg[1] ;
  wire \n_0_sync_flop_0_reg[2] ;
  wire \n_0_sync_flop_0_reg[3] ;
  wire \n_0_sync_flop_1_reg[0] ;
  wire \n_0_sync_flop_1_reg[1] ;
  wire \n_0_sync_flop_1_reg[2] ;
  wire \n_0_sync_flop_1_reg[3] ;
  wire \n_0_sync_flop_2_reg[0] ;
  wire \n_0_sync_flop_2_reg[1] ;
  wire \n_0_sync_flop_2_reg[2] ;
  wire \n_0_sync_flop_2_reg[3] ;
  wire \n_0_sync_flop_3_reg[0] ;
  wire \n_0_sync_flop_3_reg[1] ;
  wire \n_0_sync_flop_3_reg[2] ;
  wire \n_0_sync_flop_3_reg[3] ;
  wire \n_0_sync_flop_4_reg[0] ;
  wire \n_0_sync_flop_4_reg[1] ;
  wire \n_0_sync_flop_4_reg[2] ;
  wire \n_0_sync_flop_4_reg[3] ;

(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(\n_0_sync_flop_0_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(\n_0_sync_flop_0_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(Q[2]),
        .Q(\n_0_sync_flop_0_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(Q[3]),
        .Q(\n_0_sync_flop_0_reg[3] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[0] ),
        .Q(\n_0_sync_flop_1_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[1] ),
        .Q(\n_0_sync_flop_1_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[2] ),
        .Q(\n_0_sync_flop_1_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[3] ),
        .Q(\n_0_sync_flop_1_reg[3] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[0] ),
        .Q(\n_0_sync_flop_2_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[1] ),
        .Q(\n_0_sync_flop_2_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[2] ),
        .Q(\n_0_sync_flop_2_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[3] ),
        .Q(\n_0_sync_flop_2_reg[3] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[0] ),
        .Q(\n_0_sync_flop_3_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[1] ),
        .Q(\n_0_sync_flop_3_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[2] ),
        .Q(\n_0_sync_flop_3_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[3] ),
        .Q(\n_0_sync_flop_3_reg[3] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[0] ),
        .Q(\n_0_sync_flop_4_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[1] ),
        .Q(\n_0_sync_flop_4_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[2] ),
        .Q(\n_0_sync_flop_4_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[3] ),
        .Q(\n_0_sync_flop_4_reg[3] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[0] ),
        .Q(O1[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[1] ),
        .Q(O1[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[2] ),
        .Q(O1[2]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[3] ),
        .Q(O1[3]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_sync_cell" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_sync_cell__parameterized0
   (O7,
    D,
    m_aclk);
  output [2:0]O7;
  input [2:0]D;
  input m_aclk;

  wire [2:0]D;
  wire [2:0]O7;
  wire m_aclk;
  wire \n_0_sync_flop_0_reg[0] ;
  wire \n_0_sync_flop_0_reg[1] ;
  wire \n_0_sync_flop_0_reg[2] ;
  wire \n_0_sync_flop_1_reg[0] ;
  wire \n_0_sync_flop_1_reg[1] ;
  wire \n_0_sync_flop_1_reg[2] ;
  wire \n_0_sync_flop_2_reg[0] ;
  wire \n_0_sync_flop_2_reg[1] ;
  wire \n_0_sync_flop_2_reg[2] ;
  wire \n_0_sync_flop_3_reg[0] ;
  wire \n_0_sync_flop_3_reg[1] ;
  wire \n_0_sync_flop_3_reg[2] ;
  wire \n_0_sync_flop_4_reg[0] ;
  wire \n_0_sync_flop_4_reg[1] ;
  wire \n_0_sync_flop_4_reg[2] ;

(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\n_0_sync_flop_0_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\n_0_sync_flop_0_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_0_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\n_0_sync_flop_0_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[0] ),
        .Q(\n_0_sync_flop_1_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[1] ),
        .Q(\n_0_sync_flop_1_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_1_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_0_reg[2] ),
        .Q(\n_0_sync_flop_1_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[0] ),
        .Q(\n_0_sync_flop_2_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[1] ),
        .Q(\n_0_sync_flop_2_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_2_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_1_reg[2] ),
        .Q(\n_0_sync_flop_2_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[0] ),
        .Q(\n_0_sync_flop_3_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[1] ),
        .Q(\n_0_sync_flop_3_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_3_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_2_reg[2] ),
        .Q(\n_0_sync_flop_3_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[0] ),
        .Q(\n_0_sync_flop_4_reg[0] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[1] ),
        .Q(\n_0_sync_flop_4_reg[1] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_4_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_3_reg[2] ),
        .Q(\n_0_sync_flop_4_reg[2] ),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[0] ),
        .Q(O7[0]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[1] ),
        .Q(O7[1]),
        .R(1'b0));
(* ASYNC_REG *) 
   FDRE \sync_flop_5_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\n_0_sync_flop_4_reg[2] ),
        .Q(O7[2]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_tdm" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_tdm
   (tx_ch0_ready,
    rd_ch_data_ready,
    Q,
    E,
    fifo_re,
    O1,
    O2,
    O3,
    O5,
    O6,
    rx_user_reset,
    D,
    clk_ph_out,
    fifo_empty,
    calib_pattern,
    fifo_empty_0,
    p_12_in,
    O4,
    tx_phy_ready,
    int_ch1_ready5,
    send_ch0,
    I1,
    tx_ch0_valid,
    I2);
  output tx_ch0_ready;
  output rd_ch_data_ready;
  output [3:0]Q;
  output [0:0]E;
  output fifo_re;
  output O1;
  output O2;
  output O3;
  output O5;
  output [17:0]O6;
  input rx_user_reset;
  input [0:0]D;
  input clk_ph_out;
  input fifo_empty;
  input [0:0]calib_pattern;
  input fifo_empty_0;
  input p_12_in;
  input [1:0]O4;
  input tx_phy_ready;
  input int_ch1_ready5;
  input send_ch0;
  input [3:0]I1;
  input tx_ch0_valid;
  input [16:0]I2;

  wire [0:0]D;
  wire [0:0]E;
  wire [3:0]I1;
  wire [16:0]I2;
  wire O1;
  wire O2;
  wire O3;
  wire [1:0]O4;
  wire O5;
  wire [17:0]O6;
  wire [3:0]Q;
  wire br_ch_data_ready;
  wire [0:0]calib_pattern;
  wire clk_ph_out;
  wire fifo_empty;
  wire fifo_empty_0;
  wire fifo_re;
  wire int_ch1_ready5;
  wire \n_0_slot_count[0]_i_1 ;
  wire \n_0_slot_count[1]_i_1 ;
  wire \n_0_slot_count[2]_i_1 ;
  wire \n_0_slot_count[3]_i_1 ;
  wire \n_0_slot_select[2]_i_2 ;
  wire \n_0_tdm_data_out[5]_i_1 ;
  wire \n_0_tdm_data_out[5]_i_3 ;
  wire next_int_ch1_ready;
  wire next_int_ch2_ready;
  wire p_12_in;
  wire p_1_in;
  wire rd_ch_data_ready;
  wire rx_user_reset;
  wire send_ch0;
  wire [3:0]slot_count;
  wire tx_ch0_ready;
  wire tx_ch0_valid;
  wire tx_phy_ready;

LUT2 #(
    .INIT(4'h2)) 
     U0_i_2__0
       (.I0(br_ch_data_ready),
        .I1(fifo_empty_0),
        .O(fifo_re));
FDRE int_ch0_ready_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(D),
        .Q(tx_ch0_ready),
        .R(rx_user_reset));
FDRE int_ch1_ready_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(next_int_ch1_ready),
        .Q(rd_ch_data_ready),
        .R(rx_user_reset));
FDRE int_ch2_ready_reg
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(next_int_ch2_ready),
        .Q(br_ch_data_ready),
        .R(rx_user_reset));
LUT2 #(
    .INIT(4'h2)) 
     \mux_by_4.data_count[3]_i_1 
       (.I0(rd_ch_data_ready),
        .I1(fifo_empty),
        .O(E));
LUT3 #(
    .INIT(8'h1A)) 
     \slot_count[0]_i_1 
       (.I0(slot_count[0]),
        .I1(send_ch0),
        .I2(tx_phy_ready),
        .O(\n_0_slot_count[0]_i_1 ));
LUT6 #(
    .INIT(64'h1111FFFF20220000)) 
     \slot_count[1]_i_1 
       (.I0(slot_count[0]),
        .I1(send_ch0),
        .I2(slot_count[2]),
        .I3(slot_count[3]),
        .I4(tx_phy_ready),
        .I5(slot_count[1]),
        .O(\n_0_slot_count[1]_i_1 ));
LUT5 #(
    .INIT(32'h07FF0800)) 
     \slot_count[2]_i_1 
       (.I0(slot_count[0]),
        .I1(slot_count[1]),
        .I2(send_ch0),
        .I3(tx_phy_ready),
        .I4(slot_count[2]),
        .O(\n_0_slot_count[2]_i_1 ));
LUT6 #(
    .INIT(64'h007DFFFF00800000)) 
     \slot_count[3]_i_1 
       (.I0(slot_count[0]),
        .I1(slot_count[1]),
        .I2(slot_count[2]),
        .I3(send_ch0),
        .I4(tx_phy_ready),
        .I5(slot_count[3]),
        .O(\n_0_slot_count[3]_i_1 ));
FDRE \slot_count_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_slot_count[0]_i_1 ),
        .Q(slot_count[0]),
        .R(rx_user_reset));
FDRE \slot_count_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_slot_count[1]_i_1 ),
        .Q(slot_count[1]),
        .R(rx_user_reset));
FDRE \slot_count_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_slot_count[2]_i_1 ),
        .Q(slot_count[2]),
        .R(rx_user_reset));
FDRE \slot_count_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_slot_count[3]_i_1 ),
        .Q(slot_count[3]),
        .R(rx_user_reset));
LUT6 #(
    .INIT(64'hE0E0E0E0E0A0E0E0)) 
     \slot_select[1]_i_1 
       (.I0(\n_0_slot_select[2]_i_2 ),
        .I1(p_1_in),
        .I2(p_12_in),
        .I3(O4[1]),
        .I4(tx_phy_ready),
        .I5(fifo_empty_0),
        .O(next_int_ch1_ready));
LUT6 #(
    .INIT(64'hFFFF0000AA8A0000)) 
     \slot_select[2]_i_1 
       (.I0(\n_0_slot_select[2]_i_2 ),
        .I1(O4[0]),
        .I2(tx_phy_ready),
        .I3(fifo_empty),
        .I4(int_ch1_ready5),
        .I5(p_1_in),
        .O(next_int_ch2_ready));
LUT6 #(
    .INIT(64'h000000008D0F2F1B)) 
     \slot_select[2]_i_2 
       (.I0(slot_count[0]),
        .I1(slot_count[2]),
        .I2(slot_count[3]),
        .I3(tx_phy_ready),
        .I4(slot_count[1]),
        .I5(send_ch0),
        .O(\n_0_slot_select[2]_i_2 ));
LUT6 #(
    .INIT(64'h0000001800000140)) 
     \slot_select[2]_i_4 
       (.I0(slot_count[1]),
        .I1(tx_phy_ready),
        .I2(slot_count[3]),
        .I3(slot_count[2]),
        .I4(send_ch0),
        .I5(slot_count[0]),
        .O(p_1_in));
FDRE \slot_select_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(D),
        .Q(Q[0]),
        .R(rx_user_reset));
FDRE \slot_select_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(next_int_ch1_ready),
        .Q(Q[1]),
        .R(rx_user_reset));
FDRE \slot_select_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(next_int_ch2_ready),
        .Q(Q[2]),
        .R(rx_user_reset));
FDRE \slot_select_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(1'b0),
        .Q(Q[3]),
        .R(rx_user_reset));
LUT5 #(
    .INIT(32'hFFFFFF08)) 
     \tdm_data_out[5]_i_1 
       (.I0(Q[1]),
        .I1(rd_ch_data_ready),
        .I2(fifo_empty),
        .I3(calib_pattern),
        .I4(\n_0_tdm_data_out[5]_i_3 ),
        .O(\n_0_tdm_data_out[5]_i_1 ));
LUT6 #(
    .INIT(64'h80FF808080808080)) 
     \tdm_data_out[5]_i_3 
       (.I0(tx_ch0_ready),
        .I1(Q[0]),
        .I2(tx_ch0_valid),
        .I3(fifo_empty_0),
        .I4(br_ch_data_ready),
        .I5(Q[2]),
        .O(\n_0_tdm_data_out[5]_i_3 ));
LUT2 #(
    .INIT(4'h8)) 
     \tdm_data_out[8]_i_4 
       (.I0(Q[1]),
        .I1(I1[2]),
        .O(O1));
LUT2 #(
    .INIT(4'h8)) 
     \tdm_data_out[8]_i_5 
       (.I0(Q[1]),
        .I1(I1[0]),
        .O(O5));
LUT2 #(
    .INIT(4'h8)) 
     \tdm_data_out[8]_i_6 
       (.I0(Q[1]),
        .I1(I1[1]),
        .O(O2));
LUT2 #(
    .INIT(4'h8)) 
     \tdm_data_out[8]_i_7 
       (.I0(Q[1]),
        .I1(I1[3]),
        .O(O3));
FDRE \tdm_data_out_reg[0] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[0]),
        .Q(O6[0]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[10] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[9]),
        .Q(O6[10]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[11] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[10]),
        .Q(O6[11]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[12] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[11]),
        .Q(O6[12]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[13] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[12]),
        .Q(O6[13]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[14] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[13]),
        .Q(O6[14]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[15] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[14]),
        .Q(O6[15]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[16] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[15]),
        .Q(O6[16]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[17] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[16]),
        .Q(O6[17]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[1] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[1]),
        .Q(O6[1]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[2] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[2]),
        .Q(O6[2]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[3] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[3]),
        .Q(O6[3]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[4] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[4]),
        .Q(O6[4]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[5] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(\n_0_tdm_data_out[5]_i_1 ),
        .Q(O6[5]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[6] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[5]),
        .Q(O6[6]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[7] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[6]),
        .Q(O6[7]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[8] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[7]),
        .Q(O6[8]),
        .R(rx_user_reset));
FDRE \tdm_data_out_reg[9] 
       (.C(clk_ph_out),
        .CE(1'b1),
        .D(I2[8]),
        .Q(O6[9]),
        .R(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "axi_chip2chip_v4_2_unpacker" *) 
module control_to_core_slave_axi_axi_chip2chip_v4_2_unpacker__parameterized1
   (unpack_data_re,
    Q,
    rd_ch_data_ready,
    fifo_empty,
    rx_user_reset,
    E,
    clk_ph_out);
  output unpack_data_re;
  output [3:0]Q;
  input rd_ch_data_ready;
  input fifo_empty;
  input rx_user_reset;
  input [0:0]E;
  input clk_ph_out;

  wire [0:0]E;
  wire [3:0]Q;
  wire clk_ph_out;
  wire fifo_empty;
  wire rd_ch_data_ready;
  wire rx_user_reset;
  wire unpack_data_re;

LUT3 #(
    .INIT(8'h08)) 
     U0_i_2
       (.I0(rd_ch_data_ready),
        .I1(Q[3]),
        .I2(fifo_empty),
        .O(unpack_data_re));
FDSE \mux_by_4.data_count_reg[0] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[3]),
        .Q(Q[0]),
        .S(rx_user_reset));
FDRE \mux_by_4.data_count_reg[1] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[0]),
        .Q(Q[1]),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[2] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[1]),
        .Q(Q[2]),
        .R(rx_user_reset));
FDRE \mux_by_4.data_count_reg[3] 
       (.C(clk_ph_out),
        .CE(E),
        .D(Q[2]),
        .Q(Q[3]),
        .R(rx_user_reset));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module control_to_core_slave_axi_blk_mem_gen_generic_cstr
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.D(D),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module control_to_core_slave_axi_blk_mem_gen_generic_cstr_89
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_width_90 \ramloop[0].ram.r 
       (.D(D),
        .O2(O2),
        .O4(O4),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module control_to_core_slave_axi_blk_mem_gen_generic_cstr__parameterized0
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din);
  output [39:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;

  wire [39:0]D;
  wire [0:0]E;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_width__parameterized0 \ramloop[0].ram.r 
       (.D(D),
        .E(E),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module control_to_core_slave_axi_blk_mem_gen_generic_cstr__parameterized1
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din);
  output [35:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;

  wire [35:0]D;
  wire [0:0]E;
  wire [8:0]I1;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_width__parameterized1 \ramloop[0].ram.r 
       (.D(D),
        .E(E),
        .I1(I1),
        .O2(O2),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_width
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.D(D),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_width_90
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_wrapper_91 \prim_noinit.ram 
       (.D(D),
        .O2(O2),
        .O4(O4),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_width__parameterized0
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din);
  output [39:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;

  wire [39:0]D;
  wire [0:0]E;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_wrapper__parameterized0 \prim_noinit.ram 
       (.D(D),
        .E(E),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_width__parameterized1
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din);
  output [35:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;

  wire [35:0]D;
  wire [0:0]E;
  wire [8:0]I1;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_prim_wrapper__parameterized1 \prim_noinit.ram 
       (.D(D),
        .E(E),
        .I1(I1),
        .O2(O2),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_wrapper
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire \n_12_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_13_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_20_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_21_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_28_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_29_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_36_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_37_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_44_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_45_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_4_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_52_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_53_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_5_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_60_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_61_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_68_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_69_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_70_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_71_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_72_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_73_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_74_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_75_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED ;

(* box_type = "PRIMITIVE" *) 
   RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram 
       (.ADDRARDADDR({1'b1,1'b0,O2,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,1'b0,O3,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,din[23:18],1'b0,1'b0,din[17:12],1'b0,1'b0,din[11:6],1'b0,1'b0,din[5:0]}),
        .DIBDI({1'b0,1'b0,din[47:42],1'b0,1'b0,din[41:36],1'b0,1'b0,din[35:30],1'b0,1'b0,din[29:24]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\n_4_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_5_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[23:18],\n_12_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_13_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[17:12],\n_20_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_21_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[11:6],\n_28_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_29_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[5:0]}),
        .DOBDO({\n_36_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_37_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[47:42],\n_44_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_45_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[41:36],\n_52_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_53_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[35:30],\n_60_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_61_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[29:24]}),
        .DOPADOP({\n_68_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_69_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_70_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_71_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram }),
        .DOPBDOP({\n_72_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_73_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_74_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_75_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram }),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(WEBWE),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(Q),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({WEBWE,WEBWE,WEBWE,WEBWE,WEBWE,WEBWE,WEBWE,WEBWE}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_wrapper_91
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire \n_12_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_13_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_20_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_21_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_28_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_29_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_36_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_37_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_44_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_45_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_4_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_52_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_53_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_5_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_60_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_61_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_68_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_69_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_70_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_71_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_72_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_73_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_74_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_75_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED ;

(* box_type = "PRIMITIVE" *) 
   RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram 
       (.ADDRARDADDR({1'b1,1'b0,O2,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,1'b0,O4,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,din[23:18],1'b0,1'b0,din[17:12],1'b0,1'b0,din[11:6],1'b0,1'b0,din[5:0]}),
        .DIBDI({1'b0,1'b0,din[47:42],1'b0,1'b0,din[41:36],1'b0,1'b0,din[35:30],1'b0,1'b0,din[29:24]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\n_4_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_5_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[23:18],\n_12_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_13_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[17:12],\n_20_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_21_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[11:6],\n_28_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_29_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[5:0]}),
        .DOBDO({\n_36_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_37_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[47:42],\n_44_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_45_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[41:36],\n_52_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_53_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[35:30],\n_60_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_61_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[29:24]}),
        .DOPADOP({\n_68_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_69_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_70_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_71_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram }),
        .DOPBDOP({\n_72_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_73_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_74_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_75_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram }),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(WEBWE),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(Q),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({WEBWE,WEBWE,WEBWE,WEBWE,WEBWE,WEBWE,WEBWE,WEBWE}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_wrapper__parameterized0
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din);
  output [39:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;

  wire [39:0]D;
  wire [0:0]E;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire \n_12_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_13_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_14_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_20_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_21_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_22_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_28_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_29_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_30_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_36_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_37_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_38_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_44_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_45_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_46_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_4_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_52_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_53_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_54_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_5_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_60_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_61_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_62_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_68_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_69_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_6_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_70_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_71_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_72_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_73_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_74_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire \n_75_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ;
  wire \NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ;
  wire [7:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED ;

(* box_type = "PRIMITIVE" *) 
   RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(72),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(72)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram 
       (.ADDRARDADDR({1'b1,O2,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,O3,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,din[19:15],1'b0,1'b0,1'b0,din[14:10],1'b0,1'b0,1'b0,din[9:5],1'b0,1'b0,1'b0,din[4:0]}),
        .DIBDI({1'b0,1'b0,1'b0,din[39:35],1'b0,1'b0,1'b0,din[34:30],1'b0,1'b0,1'b0,din[29:25],1'b0,1'b0,1'b0,din[24:20]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\n_4_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_5_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_6_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[19:15],\n_12_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_13_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_14_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[14:10],\n_20_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_21_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_22_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[9:5],\n_28_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_29_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_30_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[4:0]}),
        .DOBDO({\n_36_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_37_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_38_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[39:35],\n_44_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_45_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_46_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[34:30],\n_52_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_53_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_54_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[29:25],\n_60_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_61_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_62_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,D[24:20]}),
        .DOPADOP({\n_68_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_69_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_70_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_71_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram }),
        .DOPBDOP({\n_72_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_73_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_74_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram ,\n_75_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram }),
        .ECCPARITY(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(Q),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({E,E,E,E,E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module control_to_core_slave_axi_blk_mem_gen_prim_wrapper__parameterized1
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din);
  output [35:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;

  wire [35:0]D;
  wire [0:0]E;
  wire [8:0]I1;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

(* box_type = "PRIMITIVE" *) 
   RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({O2,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({I1,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DIADI({din[16:9],din[7:0]}),
        .DIBDI({din[34:27],din[25:18]}),
        .DIPADIP({din[17],din[8]}),
        .DIPBDIP({din[35],din[26]}),
        .DOADO({D[16:9],D[7:0]}),
        .DOBDO({D[34:27],D[25:18]}),
        .DOPADOP({D[17],D[8]}),
        .DOPBDOP({D[35],D[26]}),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(Q),
        .RSTRAMB(Q),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module control_to_core_slave_axi_blk_mem_gen_top
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_generic_cstr \valid.cstr 
       (.D(D),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module control_to_core_slave_axi_blk_mem_gen_top_88
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_generic_cstr_89 \valid.cstr 
       (.D(D),
        .O2(O2),
        .O4(O4),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module control_to_core_slave_axi_blk_mem_gen_top__parameterized0
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din);
  output [39:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;

  wire [39:0]D;
  wire [0:0]E;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_generic_cstr__parameterized0 \valid.cstr 
       (.D(D),
        .E(E),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module control_to_core_slave_axi_blk_mem_gen_top__parameterized1
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din);
  output [35:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;

  wire [35:0]D;
  wire [0:0]E;
  wire [8:0]I1;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_generic_cstr__parameterized1 \valid.cstr 
       (.D(D),
        .E(E),
        .I1(I1),
        .O2(O2),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized0
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2_synth inst_blk_mem_gen
       (.D(D),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized0_86
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2_synth_87 inst_blk_mem_gen
       (.D(D),
        .O2(O2),
        .O4(O4),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized2
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din);
  output [39:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;

  wire [39:0]D;
  wire [0:0]E;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2_synth__parameterized0 inst_blk_mem_gen
       (.D(D),
        .E(E),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized4
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din);
  output [35:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;

  wire [35:0]D;
  wire [0:0]E;
  wire [8:0]I1;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2_synth__parameterized1 inst_blk_mem_gen
       (.D(D),
        .E(E),
        .I1(I1),
        .O2(O2),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2_synth" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2_synth
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_top \gnativebmg.native_blk_mem_gen 
       (.D(D),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2_synth" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2_synth_87
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din);
  output [47:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;

  wire [47:0]D;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_top_88 \gnativebmg.native_blk_mem_gen 
       (.D(D),
        .O2(O2),
        .O4(O4),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2_synth" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2_synth__parameterized0
   (D,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din);
  output [39:0]D;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;

  wire [39:0]D;
  wire [0:0]E;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_top__parameterized0 \gnativebmg.native_blk_mem_gen 
       (.D(D),
        .E(E),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_2_synth" *) 
module control_to_core_slave_axi_blk_mem_gen_v8_2_synth__parameterized1
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din);
  output [35:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;

  wire [35:0]D;
  wire [0:0]E;
  wire [8:0]I1;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_top__parameterized1 \gnativebmg.native_blk_mem_gen 
       (.D(D),
        .E(E),
        .I1(I1),
        .O2(O2),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module control_to_core_slave_axi_clk_x_pntrs
   (O1,
    WR_PNTR_RD,
    RD_PNTR_WR,
    ram_full_i,
    D,
    Q,
    I1,
    rst_full_gen_i,
    I2,
    I3,
    I4,
    wr_clk,
    I5,
    rd_clk,
    I6);
  output O1;
  output [7:0]WR_PNTR_RD;
  output [7:0]RD_PNTR_WR;
  output ram_full_i;
  input [1:0]D;
  input [5:0]Q;
  input [7:0]I1;
  input rst_full_gen_i;
  input I2;
  input [7:0]I3;
  input [7:0]I4;
  input wr_clk;
  input [0:0]I5;
  input rd_clk;
  input [0:0]I6;

  wire [1:0]D;
  wire [7:0]I1;
  wire I2;
  wire [7:0]I3;
  wire [7:0]I4;
  wire [0:0]I5;
  wire [0:0]I6;
  wire O1;
  wire [5:0]Q;
  wire [7:0]Q_0;
  wire [7:0]RD_PNTR_WR;
  wire [7:0]WR_PNTR_RD;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ;
  wire \n_0_gsync_stage[1].wr_stg_inst ;
  wire \n_0_gsync_stage[2].rd_stg_inst ;
  wire \n_0_gsync_stage[2].wr_stg_inst ;
  wire \n_0_gsync_stage[3].rd_stg_inst ;
  wire \n_0_gsync_stage[3].wr_stg_inst ;
  wire \n_0_gsync_stage[4].rd_stg_inst ;
  wire \n_0_gsync_stage[4].wr_stg_inst ;
  wire \n_0_gsync_stage[5].rd_stg_inst ;
  wire \n_0_gsync_stage[5].wr_stg_inst ;
  wire \n_0_gsync_stage[6].wr_stg_inst ;
  wire n_0_ram_full_i_i_2;
  wire n_0_ram_full_i_i_4;
  wire n_0_ram_full_i_i_6;
  wire n_0_ram_full_i_i_7;
  wire \n_0_rd_pntr_gc[0]_i_1 ;
  wire \n_0_rd_pntr_gc[1]_i_1 ;
  wire \n_0_rd_pntr_gc[2]_i_1 ;
  wire \n_0_rd_pntr_gc[3]_i_1 ;
  wire \n_0_rd_pntr_gc[4]_i_1 ;
  wire \n_0_rd_pntr_gc[5]_i_1 ;
  wire \n_0_rd_pntr_gc[6]_i_1 ;
  wire \n_1_gsync_stage[1].wr_stg_inst ;
  wire \n_1_gsync_stage[2].rd_stg_inst ;
  wire \n_1_gsync_stage[2].wr_stg_inst ;
  wire \n_1_gsync_stage[3].rd_stg_inst ;
  wire \n_1_gsync_stage[3].wr_stg_inst ;
  wire \n_1_gsync_stage[4].rd_stg_inst ;
  wire \n_1_gsync_stage[4].wr_stg_inst ;
  wire \n_1_gsync_stage[5].rd_stg_inst ;
  wire \n_1_gsync_stage[5].wr_stg_inst ;
  wire \n_1_gsync_stage[6].wr_stg_inst ;
  wire \n_2_gsync_stage[1].wr_stg_inst ;
  wire \n_2_gsync_stage[2].rd_stg_inst ;
  wire \n_2_gsync_stage[2].wr_stg_inst ;
  wire \n_2_gsync_stage[3].rd_stg_inst ;
  wire \n_2_gsync_stage[3].wr_stg_inst ;
  wire \n_2_gsync_stage[4].rd_stg_inst ;
  wire \n_2_gsync_stage[4].wr_stg_inst ;
  wire \n_2_gsync_stage[5].rd_stg_inst ;
  wire \n_2_gsync_stage[5].wr_stg_inst ;
  wire \n_2_gsync_stage[6].wr_stg_inst ;
  wire \n_3_gsync_stage[1].wr_stg_inst ;
  wire \n_3_gsync_stage[2].rd_stg_inst ;
  wire \n_3_gsync_stage[2].wr_stg_inst ;
  wire \n_3_gsync_stage[3].rd_stg_inst ;
  wire \n_3_gsync_stage[3].wr_stg_inst ;
  wire \n_3_gsync_stage[4].rd_stg_inst ;
  wire \n_3_gsync_stage[4].wr_stg_inst ;
  wire \n_3_gsync_stage[5].rd_stg_inst ;
  wire \n_3_gsync_stage[5].wr_stg_inst ;
  wire \n_3_gsync_stage[6].wr_stg_inst ;
  wire \n_4_gsync_stage[1].wr_stg_inst ;
  wire \n_4_gsync_stage[2].rd_stg_inst ;
  wire \n_4_gsync_stage[2].wr_stg_inst ;
  wire \n_4_gsync_stage[3].rd_stg_inst ;
  wire \n_4_gsync_stage[3].wr_stg_inst ;
  wire \n_4_gsync_stage[4].rd_stg_inst ;
  wire \n_4_gsync_stage[4].wr_stg_inst ;
  wire \n_4_gsync_stage[5].rd_stg_inst ;
  wire \n_4_gsync_stage[5].wr_stg_inst ;
  wire \n_4_gsync_stage[6].wr_stg_inst ;
  wire \n_5_gsync_stage[1].wr_stg_inst ;
  wire \n_5_gsync_stage[2].rd_stg_inst ;
  wire \n_5_gsync_stage[2].wr_stg_inst ;
  wire \n_5_gsync_stage[3].rd_stg_inst ;
  wire \n_5_gsync_stage[3].wr_stg_inst ;
  wire \n_5_gsync_stage[4].rd_stg_inst ;
  wire \n_5_gsync_stage[4].wr_stg_inst ;
  wire \n_5_gsync_stage[5].rd_stg_inst ;
  wire \n_5_gsync_stage[5].wr_stg_inst ;
  wire \n_5_gsync_stage[6].wr_stg_inst ;
  wire \n_6_gsync_stage[1].wr_stg_inst ;
  wire \n_6_gsync_stage[2].rd_stg_inst ;
  wire \n_6_gsync_stage[2].wr_stg_inst ;
  wire \n_6_gsync_stage[3].rd_stg_inst ;
  wire \n_6_gsync_stage[3].wr_stg_inst ;
  wire \n_6_gsync_stage[4].rd_stg_inst ;
  wire \n_6_gsync_stage[4].wr_stg_inst ;
  wire \n_6_gsync_stage[5].rd_stg_inst ;
  wire \n_6_gsync_stage[5].wr_stg_inst ;
  wire \n_6_gsync_stage[6].wr_stg_inst ;
  wire \n_7_gsync_stage[1].wr_stg_inst ;
  wire \n_7_gsync_stage[2].rd_stg_inst ;
  wire \n_7_gsync_stage[2].wr_stg_inst ;
  wire \n_7_gsync_stage[3].rd_stg_inst ;
  wire \n_7_gsync_stage[3].wr_stg_inst ;
  wire \n_7_gsync_stage[4].rd_stg_inst ;
  wire \n_7_gsync_stage[4].wr_stg_inst ;
  wire \n_7_gsync_stage[5].rd_stg_inst ;
  wire \n_7_gsync_stage[5].wr_stg_inst ;
  wire \n_7_gsync_stage[6].wr_stg_inst ;
  wire [7:0]p_0_in;
  wire [6:0]p_0_in6_out;
  wire ram_full_i;
  wire rd_clk;
  wire [7:0]rd_pntr_gc;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [7:0]wr_pntr_gc;

control_to_core_slave_axi_synchronizer_ff \gsync_stage[1].rd_stg_inst 
       (.I1(wr_pntr_gc),
        .I6(I6),
        .Q(Q_0),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_43 \gsync_stage[1].wr_stg_inst 
       (.I1(rd_pntr_gc),
        .I5(I5),
        .Q({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_44 \gsync_stage[2].rd_stg_inst 
       (.D(Q_0),
        .I6(I6),
        .Q({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_45 \gsync_stage[2].wr_stg_inst 
       (.D({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_46 \gsync_stage[3].rd_stg_inst 
       (.D({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_47 \gsync_stage[3].wr_stg_inst 
       (.D({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_48 \gsync_stage[4].rd_stg_inst 
       (.D({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_49 \gsync_stage[4].wr_stg_inst 
       (.D({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_50 \gsync_stage[5].rd_stg_inst 
       (.D({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_51 \gsync_stage[5].wr_stg_inst 
       (.D({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_52 \gsync_stage[6].rd_stg_inst 
       (.D({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst }),
        .I6(I6),
        .p_0_in(p_0_in),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_53 \gsync_stage[6].wr_stg_inst 
       (.D({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst }),
        .I5(I5),
        .O1({\n_1_gsync_stage[6].wr_stg_inst ,\n_2_gsync_stage[6].wr_stg_inst ,\n_3_gsync_stage[6].wr_stg_inst ,\n_4_gsync_stage[6].wr_stg_inst ,\n_5_gsync_stage[6].wr_stg_inst ,\n_6_gsync_stage[6].wr_stg_inst ,\n_7_gsync_stage[6].wr_stg_inst }),
        .Q(\n_0_gsync_stage[6].wr_stg_inst ),
        .wr_clk(wr_clk));
LUT4 #(
    .INIT(16'h9009)) 
     ram_empty_fb_i_i_8
       (.I0(WR_PNTR_RD[2]),
        .I1(D[1]),
        .I2(WR_PNTR_RD[1]),
        .I3(D[0]),
        .O(O1));
LUT5 #(
    .INIT(32'h55554000)) 
     ram_full_i_i_1
       (.I0(rst_full_gen_i),
        .I1(n_0_ram_full_i_i_2),
        .I2(I2),
        .I3(n_0_ram_full_i_i_4),
        .I4(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ),
        .O(ram_full_i));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_2
       (.I0(RD_PNTR_WR[5]),
        .I1(Q[3]),
        .I2(RD_PNTR_WR[7]),
        .I3(Q[5]),
        .I4(Q[4]),
        .I5(RD_PNTR_WR[6]),
        .O(n_0_ram_full_i_i_2));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_4
       (.I0(RD_PNTR_WR[2]),
        .I1(Q[0]),
        .I2(RD_PNTR_WR[3]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(RD_PNTR_WR[4]),
        .O(n_0_ram_full_i_i_4));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_full_i_i_5
       (.I0(RD_PNTR_WR[7]),
        .I1(I1[7]),
        .I2(RD_PNTR_WR[6]),
        .I3(I1[6]),
        .I4(n_0_ram_full_i_i_6),
        .I5(n_0_ram_full_i_i_7),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_6
       (.I0(RD_PNTR_WR[0]),
        .I1(I1[0]),
        .I2(RD_PNTR_WR[1]),
        .I3(I1[1]),
        .I4(I1[2]),
        .I5(RD_PNTR_WR[2]),
        .O(n_0_ram_full_i_i_6));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_7
       (.I0(RD_PNTR_WR[3]),
        .I1(I1[3]),
        .I2(RD_PNTR_WR[4]),
        .I3(I1[4]),
        .I4(I1[5]),
        .I5(RD_PNTR_WR[5]),
        .O(n_0_ram_full_i_i_7));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_7_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_6_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_5_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_4_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_3_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_2_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_1_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_0_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[7]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[0]_i_1 
       (.I0(I4[0]),
        .I1(I4[1]),
        .O(\n_0_rd_pntr_gc[0]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[1]_i_1 
       (.I0(I4[1]),
        .I1(I4[2]),
        .O(\n_0_rd_pntr_gc[1]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[2]_i_1 
       (.I0(I4[2]),
        .I1(I4[3]),
        .O(\n_0_rd_pntr_gc[2]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[3]_i_1 
       (.I0(I4[3]),
        .I1(I4[4]),
        .O(\n_0_rd_pntr_gc[3]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[4]_i_1 
       (.I0(I4[4]),
        .I1(I4[5]),
        .O(\n_0_rd_pntr_gc[4]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[5]_i_1 
       (.I0(I4[5]),
        .I1(I4[6]),
        .O(\n_0_rd_pntr_gc[5]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[6]_i_1 
       (.I0(I4[6]),
        .I1(I4[7]),
        .O(\n_0_rd_pntr_gc[6]_i_1 ));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[0]_i_1 ),
        .Q(rd_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[1]_i_1 ),
        .Q(rd_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[2]_i_1 ),
        .Q(rd_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[3]_i_1 ),
        .Q(rd_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[4]_i_1 ),
        .Q(rd_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[5]_i_1 ),
        .Q(rd_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[6]_i_1 ),
        .Q(rd_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I4[7]),
        .Q(rd_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[0]),
        .Q(WR_PNTR_RD[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[1]),
        .Q(WR_PNTR_RD[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[2]),
        .Q(WR_PNTR_RD[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[3]),
        .Q(WR_PNTR_RD[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[4]),
        .Q(WR_PNTR_RD[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[5]),
        .Q(WR_PNTR_RD[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[6]),
        .Q(WR_PNTR_RD[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[7]),
        .Q(WR_PNTR_RD[7]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[0]_i_1 
       (.I0(I3[0]),
        .I1(I3[1]),
        .O(p_0_in6_out[0]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[1]_i_1 
       (.I0(I3[1]),
        .I1(I3[2]),
        .O(p_0_in6_out[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[2]_i_1 
       (.I0(I3[2]),
        .I1(I3[3]),
        .O(p_0_in6_out[2]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[3]_i_1 
       (.I0(I3[3]),
        .I1(I3[4]),
        .O(p_0_in6_out[3]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[4]_i_1 
       (.I0(I3[4]),
        .I1(I3[5]),
        .O(p_0_in6_out[4]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[5]_i_1 
       (.I0(I3[5]),
        .I1(I3[6]),
        .O(p_0_in6_out[5]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[6]_i_1 
       (.I0(I3[6]),
        .I1(I3[7]),
        .O(p_0_in6_out[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[0]),
        .Q(wr_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[1]),
        .Q(wr_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[2]),
        .Q(wr_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[3]),
        .Q(wr_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[4]),
        .Q(wr_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[5]),
        .Q(wr_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[6]),
        .Q(wr_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I3[7]),
        .Q(wr_pntr_gc[7]));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module control_to_core_slave_axi_clk_x_pntrs_54
   (O1,
    WR_PNTR_RD,
    RD_PNTR_WR,
    ram_full_i,
    D,
    Q,
    I1,
    rst_full_gen_i,
    I2,
    I3,
    I4,
    wr_clk,
    I5,
    rd_clk,
    I6);
  output O1;
  output [7:0]WR_PNTR_RD;
  output [7:0]RD_PNTR_WR;
  output ram_full_i;
  input [1:0]D;
  input [5:0]Q;
  input [7:0]I1;
  input rst_full_gen_i;
  input I2;
  input [7:0]I3;
  input [7:0]I4;
  input wr_clk;
  input [0:0]I5;
  input rd_clk;
  input [0:0]I6;

  wire [1:0]D;
  wire [7:0]I1;
  wire I2;
  wire [7:0]I3;
  wire [7:0]I4;
  wire [0:0]I5;
  wire [0:0]I6;
  wire O1;
  wire [5:0]Q;
  wire [7:0]Q_0;
  wire [7:0]RD_PNTR_WR;
  wire [7:0]WR_PNTR_RD;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ;
  wire \n_0_gsync_stage[1].wr_stg_inst ;
  wire \n_0_gsync_stage[2].rd_stg_inst ;
  wire \n_0_gsync_stage[2].wr_stg_inst ;
  wire \n_0_gsync_stage[3].rd_stg_inst ;
  wire \n_0_gsync_stage[3].wr_stg_inst ;
  wire \n_0_gsync_stage[4].rd_stg_inst ;
  wire \n_0_gsync_stage[4].wr_stg_inst ;
  wire \n_0_gsync_stage[5].rd_stg_inst ;
  wire \n_0_gsync_stage[5].wr_stg_inst ;
  wire \n_0_gsync_stage[6].wr_stg_inst ;
  wire n_0_ram_full_i_i_2;
  wire n_0_ram_full_i_i_4;
  wire n_0_ram_full_i_i_6;
  wire n_0_ram_full_i_i_7;
  wire \n_0_rd_pntr_gc[0]_i_1 ;
  wire \n_0_rd_pntr_gc[1]_i_1 ;
  wire \n_0_rd_pntr_gc[2]_i_1 ;
  wire \n_0_rd_pntr_gc[3]_i_1 ;
  wire \n_0_rd_pntr_gc[4]_i_1 ;
  wire \n_0_rd_pntr_gc[5]_i_1 ;
  wire \n_0_rd_pntr_gc[6]_i_1 ;
  wire \n_1_gsync_stage[1].wr_stg_inst ;
  wire \n_1_gsync_stage[2].rd_stg_inst ;
  wire \n_1_gsync_stage[2].wr_stg_inst ;
  wire \n_1_gsync_stage[3].rd_stg_inst ;
  wire \n_1_gsync_stage[3].wr_stg_inst ;
  wire \n_1_gsync_stage[4].rd_stg_inst ;
  wire \n_1_gsync_stage[4].wr_stg_inst ;
  wire \n_1_gsync_stage[5].rd_stg_inst ;
  wire \n_1_gsync_stage[5].wr_stg_inst ;
  wire \n_1_gsync_stage[6].wr_stg_inst ;
  wire \n_2_gsync_stage[1].wr_stg_inst ;
  wire \n_2_gsync_stage[2].rd_stg_inst ;
  wire \n_2_gsync_stage[2].wr_stg_inst ;
  wire \n_2_gsync_stage[3].rd_stg_inst ;
  wire \n_2_gsync_stage[3].wr_stg_inst ;
  wire \n_2_gsync_stage[4].rd_stg_inst ;
  wire \n_2_gsync_stage[4].wr_stg_inst ;
  wire \n_2_gsync_stage[5].rd_stg_inst ;
  wire \n_2_gsync_stage[5].wr_stg_inst ;
  wire \n_2_gsync_stage[6].wr_stg_inst ;
  wire \n_3_gsync_stage[1].wr_stg_inst ;
  wire \n_3_gsync_stage[2].rd_stg_inst ;
  wire \n_3_gsync_stage[2].wr_stg_inst ;
  wire \n_3_gsync_stage[3].rd_stg_inst ;
  wire \n_3_gsync_stage[3].wr_stg_inst ;
  wire \n_3_gsync_stage[4].rd_stg_inst ;
  wire \n_3_gsync_stage[4].wr_stg_inst ;
  wire \n_3_gsync_stage[5].rd_stg_inst ;
  wire \n_3_gsync_stage[5].wr_stg_inst ;
  wire \n_3_gsync_stage[6].wr_stg_inst ;
  wire \n_4_gsync_stage[1].wr_stg_inst ;
  wire \n_4_gsync_stage[2].rd_stg_inst ;
  wire \n_4_gsync_stage[2].wr_stg_inst ;
  wire \n_4_gsync_stage[3].rd_stg_inst ;
  wire \n_4_gsync_stage[3].wr_stg_inst ;
  wire \n_4_gsync_stage[4].rd_stg_inst ;
  wire \n_4_gsync_stage[4].wr_stg_inst ;
  wire \n_4_gsync_stage[5].rd_stg_inst ;
  wire \n_4_gsync_stage[5].wr_stg_inst ;
  wire \n_4_gsync_stage[6].wr_stg_inst ;
  wire \n_5_gsync_stage[1].wr_stg_inst ;
  wire \n_5_gsync_stage[2].rd_stg_inst ;
  wire \n_5_gsync_stage[2].wr_stg_inst ;
  wire \n_5_gsync_stage[3].rd_stg_inst ;
  wire \n_5_gsync_stage[3].wr_stg_inst ;
  wire \n_5_gsync_stage[4].rd_stg_inst ;
  wire \n_5_gsync_stage[4].wr_stg_inst ;
  wire \n_5_gsync_stage[5].rd_stg_inst ;
  wire \n_5_gsync_stage[5].wr_stg_inst ;
  wire \n_5_gsync_stage[6].wr_stg_inst ;
  wire \n_6_gsync_stage[1].wr_stg_inst ;
  wire \n_6_gsync_stage[2].rd_stg_inst ;
  wire \n_6_gsync_stage[2].wr_stg_inst ;
  wire \n_6_gsync_stage[3].rd_stg_inst ;
  wire \n_6_gsync_stage[3].wr_stg_inst ;
  wire \n_6_gsync_stage[4].rd_stg_inst ;
  wire \n_6_gsync_stage[4].wr_stg_inst ;
  wire \n_6_gsync_stage[5].rd_stg_inst ;
  wire \n_6_gsync_stage[5].wr_stg_inst ;
  wire \n_6_gsync_stage[6].wr_stg_inst ;
  wire \n_7_gsync_stage[1].wr_stg_inst ;
  wire \n_7_gsync_stage[2].rd_stg_inst ;
  wire \n_7_gsync_stage[2].wr_stg_inst ;
  wire \n_7_gsync_stage[3].rd_stg_inst ;
  wire \n_7_gsync_stage[3].wr_stg_inst ;
  wire \n_7_gsync_stage[4].rd_stg_inst ;
  wire \n_7_gsync_stage[4].wr_stg_inst ;
  wire \n_7_gsync_stage[5].rd_stg_inst ;
  wire \n_7_gsync_stage[5].wr_stg_inst ;
  wire \n_7_gsync_stage[6].wr_stg_inst ;
  wire [7:0]p_0_in;
  wire [6:0]p_0_in6_out;
  wire ram_full_i;
  wire rd_clk;
  wire [7:0]rd_pntr_gc;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [7:0]wr_pntr_gc;

control_to_core_slave_axi_synchronizer_ff_64 \gsync_stage[1].rd_stg_inst 
       (.I1(wr_pntr_gc),
        .I6(I6),
        .Q(Q_0),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_65 \gsync_stage[1].wr_stg_inst 
       (.I1(rd_pntr_gc),
        .I5(I5),
        .Q({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_66 \gsync_stage[2].rd_stg_inst 
       (.D(Q_0),
        .I6(I6),
        .Q({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_67 \gsync_stage[2].wr_stg_inst 
       (.D({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_68 \gsync_stage[3].rd_stg_inst 
       (.D({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_69 \gsync_stage[3].wr_stg_inst 
       (.D({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_70 \gsync_stage[4].rd_stg_inst 
       (.D({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_71 \gsync_stage[4].wr_stg_inst 
       (.D({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_72 \gsync_stage[5].rd_stg_inst 
       (.D({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_73 \gsync_stage[5].wr_stg_inst 
       (.D({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_74 \gsync_stage[6].rd_stg_inst 
       (.D({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst }),
        .I6(I6),
        .p_0_in(p_0_in),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_75 \gsync_stage[6].wr_stg_inst 
       (.D({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst }),
        .I5(I5),
        .O1({\n_1_gsync_stage[6].wr_stg_inst ,\n_2_gsync_stage[6].wr_stg_inst ,\n_3_gsync_stage[6].wr_stg_inst ,\n_4_gsync_stage[6].wr_stg_inst ,\n_5_gsync_stage[6].wr_stg_inst ,\n_6_gsync_stage[6].wr_stg_inst ,\n_7_gsync_stage[6].wr_stg_inst }),
        .Q(\n_0_gsync_stage[6].wr_stg_inst ),
        .wr_clk(wr_clk));
LUT4 #(
    .INIT(16'h9009)) 
     ram_empty_fb_i_i_8
       (.I0(WR_PNTR_RD[2]),
        .I1(D[1]),
        .I2(WR_PNTR_RD[1]),
        .I3(D[0]),
        .O(O1));
LUT5 #(
    .INIT(32'h55554000)) 
     ram_full_i_i_1
       (.I0(rst_full_gen_i),
        .I1(n_0_ram_full_i_i_2),
        .I2(I2),
        .I3(n_0_ram_full_i_i_4),
        .I4(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ),
        .O(ram_full_i));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_2
       (.I0(RD_PNTR_WR[5]),
        .I1(Q[3]),
        .I2(RD_PNTR_WR[7]),
        .I3(Q[5]),
        .I4(Q[4]),
        .I5(RD_PNTR_WR[6]),
        .O(n_0_ram_full_i_i_2));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_4
       (.I0(RD_PNTR_WR[2]),
        .I1(Q[0]),
        .I2(RD_PNTR_WR[3]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(RD_PNTR_WR[4]),
        .O(n_0_ram_full_i_i_4));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_full_i_i_5
       (.I0(RD_PNTR_WR[7]),
        .I1(I1[7]),
        .I2(RD_PNTR_WR[6]),
        .I3(I1[6]),
        .I4(n_0_ram_full_i_i_6),
        .I5(n_0_ram_full_i_i_7),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_6
       (.I0(RD_PNTR_WR[0]),
        .I1(I1[0]),
        .I2(RD_PNTR_WR[1]),
        .I3(I1[1]),
        .I4(I1[2]),
        .I5(RD_PNTR_WR[2]),
        .O(n_0_ram_full_i_i_6));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_7
       (.I0(RD_PNTR_WR[3]),
        .I1(I1[3]),
        .I2(RD_PNTR_WR[4]),
        .I3(I1[4]),
        .I4(I1[5]),
        .I5(RD_PNTR_WR[5]),
        .O(n_0_ram_full_i_i_7));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_7_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_6_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_5_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_4_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_3_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_2_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_1_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_0_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[7]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[0]_i_1 
       (.I0(I4[0]),
        .I1(I4[1]),
        .O(\n_0_rd_pntr_gc[0]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[1]_i_1 
       (.I0(I4[1]),
        .I1(I4[2]),
        .O(\n_0_rd_pntr_gc[1]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[2]_i_1 
       (.I0(I4[2]),
        .I1(I4[3]),
        .O(\n_0_rd_pntr_gc[2]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[3]_i_1 
       (.I0(I4[3]),
        .I1(I4[4]),
        .O(\n_0_rd_pntr_gc[3]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[4]_i_1 
       (.I0(I4[4]),
        .I1(I4[5]),
        .O(\n_0_rd_pntr_gc[4]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[5]_i_1 
       (.I0(I4[5]),
        .I1(I4[6]),
        .O(\n_0_rd_pntr_gc[5]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[6]_i_1 
       (.I0(I4[6]),
        .I1(I4[7]),
        .O(\n_0_rd_pntr_gc[6]_i_1 ));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[0]_i_1 ),
        .Q(rd_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[1]_i_1 ),
        .Q(rd_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[2]_i_1 ),
        .Q(rd_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[3]_i_1 ),
        .Q(rd_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[4]_i_1 ),
        .Q(rd_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[5]_i_1 ),
        .Q(rd_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[6]_i_1 ),
        .Q(rd_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I4[7]),
        .Q(rd_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[0]),
        .Q(WR_PNTR_RD[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[1]),
        .Q(WR_PNTR_RD[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[2]),
        .Q(WR_PNTR_RD[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[3]),
        .Q(WR_PNTR_RD[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[4]),
        .Q(WR_PNTR_RD[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[5]),
        .Q(WR_PNTR_RD[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[6]),
        .Q(WR_PNTR_RD[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[7]),
        .Q(WR_PNTR_RD[7]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[0]_i_1 
       (.I0(I3[0]),
        .I1(I3[1]),
        .O(p_0_in6_out[0]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[1]_i_1 
       (.I0(I3[1]),
        .I1(I3[2]),
        .O(p_0_in6_out[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[2]_i_1 
       (.I0(I3[2]),
        .I1(I3[3]),
        .O(p_0_in6_out[2]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[3]_i_1 
       (.I0(I3[3]),
        .I1(I3[4]),
        .O(p_0_in6_out[3]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[4]_i_1 
       (.I0(I3[4]),
        .I1(I3[5]),
        .O(p_0_in6_out[4]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[5]_i_1 
       (.I0(I3[5]),
        .I1(I3[6]),
        .O(p_0_in6_out[5]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[6]_i_1 
       (.I0(I3[6]),
        .I1(I3[7]),
        .O(p_0_in6_out[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[0]),
        .Q(wr_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[1]),
        .Q(wr_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[2]),
        .Q(wr_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[3]),
        .Q(wr_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[4]),
        .Q(wr_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[5]),
        .Q(wr_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in6_out[6]),
        .Q(wr_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I3[7]),
        .Q(wr_pntr_gc[7]));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module control_to_core_slave_axi_clk_x_pntrs_81
   (O1,
    Q,
    O2,
    ram_full_i,
    D,
    I1,
    I2,
    rst_full_gen_i,
    I3,
    I4,
    I5,
    wr_clk,
    I6,
    rd_clk,
    I7);
  output O1;
  output [7:0]Q;
  output [7:0]O2;
  output ram_full_i;
  input [1:0]D;
  input [5:0]I1;
  input [7:0]I2;
  input rst_full_gen_i;
  input I3;
  input [7:0]I4;
  input [7:0]I5;
  input wr_clk;
  input [0:0]I6;
  input rd_clk;
  input [0:0]I7;

  wire [1:0]D;
  wire [5:0]I1;
  wire [7:0]I2;
  wire I3;
  wire [7:0]I4;
  wire [7:0]I5;
  wire [0:0]I6;
  wire [0:0]I7;
  wire O1;
  wire [7:0]O2;
  wire [7:0]Q;
  wire [7:0]Q_0;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ;
  wire \n_0_gsync_stage[1].wr_stg_inst ;
  wire \n_0_gsync_stage[2].rd_stg_inst ;
  wire \n_0_gsync_stage[2].wr_stg_inst ;
  wire \n_0_gsync_stage[3].rd_stg_inst ;
  wire \n_0_gsync_stage[3].wr_stg_inst ;
  wire \n_0_gsync_stage[4].rd_stg_inst ;
  wire \n_0_gsync_stage[4].wr_stg_inst ;
  wire \n_0_gsync_stage[5].rd_stg_inst ;
  wire \n_0_gsync_stage[5].wr_stg_inst ;
  wire \n_0_gsync_stage[6].wr_stg_inst ;
  wire n_0_ram_full_i_i_2;
  wire n_0_ram_full_i_i_4;
  wire n_0_ram_full_i_i_6;
  wire n_0_ram_full_i_i_7;
  wire \n_0_rd_pntr_gc[0]_i_1 ;
  wire \n_0_rd_pntr_gc[1]_i_1 ;
  wire \n_0_rd_pntr_gc[2]_i_1 ;
  wire \n_0_rd_pntr_gc[3]_i_1 ;
  wire \n_0_rd_pntr_gc[4]_i_1 ;
  wire \n_0_rd_pntr_gc[5]_i_1 ;
  wire \n_0_rd_pntr_gc[6]_i_1 ;
  wire \n_1_gsync_stage[1].wr_stg_inst ;
  wire \n_1_gsync_stage[2].rd_stg_inst ;
  wire \n_1_gsync_stage[2].wr_stg_inst ;
  wire \n_1_gsync_stage[3].rd_stg_inst ;
  wire \n_1_gsync_stage[3].wr_stg_inst ;
  wire \n_1_gsync_stage[4].rd_stg_inst ;
  wire \n_1_gsync_stage[4].wr_stg_inst ;
  wire \n_1_gsync_stage[5].rd_stg_inst ;
  wire \n_1_gsync_stage[5].wr_stg_inst ;
  wire \n_1_gsync_stage[6].wr_stg_inst ;
  wire \n_2_gsync_stage[1].wr_stg_inst ;
  wire \n_2_gsync_stage[2].rd_stg_inst ;
  wire \n_2_gsync_stage[2].wr_stg_inst ;
  wire \n_2_gsync_stage[3].rd_stg_inst ;
  wire \n_2_gsync_stage[3].wr_stg_inst ;
  wire \n_2_gsync_stage[4].rd_stg_inst ;
  wire \n_2_gsync_stage[4].wr_stg_inst ;
  wire \n_2_gsync_stage[5].rd_stg_inst ;
  wire \n_2_gsync_stage[5].wr_stg_inst ;
  wire \n_2_gsync_stage[6].wr_stg_inst ;
  wire \n_3_gsync_stage[1].wr_stg_inst ;
  wire \n_3_gsync_stage[2].rd_stg_inst ;
  wire \n_3_gsync_stage[2].wr_stg_inst ;
  wire \n_3_gsync_stage[3].rd_stg_inst ;
  wire \n_3_gsync_stage[3].wr_stg_inst ;
  wire \n_3_gsync_stage[4].rd_stg_inst ;
  wire \n_3_gsync_stage[4].wr_stg_inst ;
  wire \n_3_gsync_stage[5].rd_stg_inst ;
  wire \n_3_gsync_stage[5].wr_stg_inst ;
  wire \n_3_gsync_stage[6].wr_stg_inst ;
  wire \n_4_gsync_stage[1].wr_stg_inst ;
  wire \n_4_gsync_stage[2].rd_stg_inst ;
  wire \n_4_gsync_stage[2].wr_stg_inst ;
  wire \n_4_gsync_stage[3].rd_stg_inst ;
  wire \n_4_gsync_stage[3].wr_stg_inst ;
  wire \n_4_gsync_stage[4].rd_stg_inst ;
  wire \n_4_gsync_stage[4].wr_stg_inst ;
  wire \n_4_gsync_stage[5].rd_stg_inst ;
  wire \n_4_gsync_stage[5].wr_stg_inst ;
  wire \n_4_gsync_stage[6].wr_stg_inst ;
  wire \n_5_gsync_stage[1].wr_stg_inst ;
  wire \n_5_gsync_stage[2].rd_stg_inst ;
  wire \n_5_gsync_stage[2].wr_stg_inst ;
  wire \n_5_gsync_stage[3].rd_stg_inst ;
  wire \n_5_gsync_stage[3].wr_stg_inst ;
  wire \n_5_gsync_stage[4].rd_stg_inst ;
  wire \n_5_gsync_stage[4].wr_stg_inst ;
  wire \n_5_gsync_stage[5].rd_stg_inst ;
  wire \n_5_gsync_stage[5].wr_stg_inst ;
  wire \n_5_gsync_stage[6].wr_stg_inst ;
  wire \n_6_gsync_stage[1].wr_stg_inst ;
  wire \n_6_gsync_stage[2].rd_stg_inst ;
  wire \n_6_gsync_stage[2].wr_stg_inst ;
  wire \n_6_gsync_stage[3].rd_stg_inst ;
  wire \n_6_gsync_stage[3].wr_stg_inst ;
  wire \n_6_gsync_stage[4].rd_stg_inst ;
  wire \n_6_gsync_stage[4].wr_stg_inst ;
  wire \n_6_gsync_stage[5].rd_stg_inst ;
  wire \n_6_gsync_stage[5].wr_stg_inst ;
  wire \n_6_gsync_stage[6].wr_stg_inst ;
  wire \n_7_gsync_stage[1].wr_stg_inst ;
  wire \n_7_gsync_stage[2].rd_stg_inst ;
  wire \n_7_gsync_stage[2].wr_stg_inst ;
  wire \n_7_gsync_stage[3].rd_stg_inst ;
  wire \n_7_gsync_stage[3].wr_stg_inst ;
  wire \n_7_gsync_stage[4].rd_stg_inst ;
  wire \n_7_gsync_stage[4].wr_stg_inst ;
  wire \n_7_gsync_stage[5].rd_stg_inst ;
  wire \n_7_gsync_stage[5].wr_stg_inst ;
  wire \n_7_gsync_stage[6].wr_stg_inst ;
  wire [7:0]p_0_in;
  wire [6:0]p_0_in6_out;
  wire ram_full_i;
  wire rd_clk;
  wire [7:0]rd_pntr_gc;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [7:0]wr_pntr_gc;

control_to_core_slave_axi_synchronizer_ff_98 \gsync_stage[1].rd_stg_inst 
       (.I1(wr_pntr_gc),
        .I7(I7),
        .Q(Q_0),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_99 \gsync_stage[1].wr_stg_inst 
       (.I1(rd_pntr_gc),
        .I6(I6),
        .Q({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_100 \gsync_stage[2].rd_stg_inst 
       (.D(Q_0),
        .I7(I7),
        .Q({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_101 \gsync_stage[2].wr_stg_inst 
       (.D({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_102 \gsync_stage[3].rd_stg_inst 
       (.D({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst }),
        .I7(I7),
        .Q({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_103 \gsync_stage[3].wr_stg_inst 
       (.D({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_104 \gsync_stage[4].rd_stg_inst 
       (.D({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst }),
        .I7(I7),
        .Q({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_105 \gsync_stage[4].wr_stg_inst 
       (.D({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_106 \gsync_stage[5].rd_stg_inst 
       (.D({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst }),
        .I7(I7),
        .Q({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_107 \gsync_stage[5].wr_stg_inst 
       (.D({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff_108 \gsync_stage[6].rd_stg_inst 
       (.D({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst }),
        .I7(I7),
        .p_0_in(p_0_in),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff_109 \gsync_stage[6].wr_stg_inst 
       (.D({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst }),
        .I6(I6),
        .O1({\n_1_gsync_stage[6].wr_stg_inst ,\n_2_gsync_stage[6].wr_stg_inst ,\n_3_gsync_stage[6].wr_stg_inst ,\n_4_gsync_stage[6].wr_stg_inst ,\n_5_gsync_stage[6].wr_stg_inst ,\n_6_gsync_stage[6].wr_stg_inst ,\n_7_gsync_stage[6].wr_stg_inst }),
        .Q(\n_0_gsync_stage[6].wr_stg_inst ),
        .wr_clk(wr_clk));
LUT4 #(
    .INIT(16'h9009)) 
     ram_empty_fb_i_i_8
       (.I0(Q[2]),
        .I1(D[1]),
        .I2(Q[1]),
        .I3(D[0]),
        .O(O1));
LUT5 #(
    .INIT(32'h55554000)) 
     ram_full_i_i_1
       (.I0(rst_full_gen_i),
        .I1(n_0_ram_full_i_i_2),
        .I2(I3),
        .I3(n_0_ram_full_i_i_4),
        .I4(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ),
        .O(ram_full_i));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_2
       (.I0(O2[5]),
        .I1(I1[3]),
        .I2(O2[7]),
        .I3(I1[5]),
        .I4(I1[4]),
        .I5(O2[6]),
        .O(n_0_ram_full_i_i_2));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_4
       (.I0(O2[2]),
        .I1(I1[0]),
        .I2(O2[3]),
        .I3(I1[1]),
        .I4(I1[2]),
        .I5(O2[4]),
        .O(n_0_ram_full_i_i_4));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_full_i_i_5
       (.I0(O2[7]),
        .I1(I2[7]),
        .I2(O2[6]),
        .I3(I2[6]),
        .I4(n_0_ram_full_i_i_6),
        .I5(n_0_ram_full_i_i_7),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_6
       (.I0(O2[0]),
        .I1(I2[0]),
        .I2(O2[1]),
        .I3(I2[1]),
        .I4(I2[2]),
        .I5(O2[2]),
        .O(n_0_ram_full_i_i_6));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_full_i_i_7
       (.I0(O2[3]),
        .I1(I2[3]),
        .I2(O2[4]),
        .I3(I2[4]),
        .I4(I2[5]),
        .I5(O2[5]),
        .O(n_0_ram_full_i_i_7));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_7_gsync_stage[6].wr_stg_inst ),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_6_gsync_stage[6].wr_stg_inst ),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_5_gsync_stage[6].wr_stg_inst ),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_4_gsync_stage[6].wr_stg_inst ),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_3_gsync_stage[6].wr_stg_inst ),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_2_gsync_stage[6].wr_stg_inst ),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_1_gsync_stage[6].wr_stg_inst ),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_gsync_stage[6].wr_stg_inst ),
        .Q(O2[7]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[0]_i_1 
       (.I0(I5[0]),
        .I1(I5[1]),
        .O(\n_0_rd_pntr_gc[0]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[1]_i_1 
       (.I0(I5[1]),
        .I1(I5[2]),
        .O(\n_0_rd_pntr_gc[1]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[2]_i_1 
       (.I0(I5[2]),
        .I1(I5[3]),
        .O(\n_0_rd_pntr_gc[2]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[3]_i_1 
       (.I0(I5[3]),
        .I1(I5[4]),
        .O(\n_0_rd_pntr_gc[3]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[4]_i_1 
       (.I0(I5[4]),
        .I1(I5[5]),
        .O(\n_0_rd_pntr_gc[4]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[5]_i_1 
       (.I0(I5[5]),
        .I1(I5[6]),
        .O(\n_0_rd_pntr_gc[5]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[6]_i_1 
       (.I0(I5[6]),
        .I1(I5[7]),
        .O(\n_0_rd_pntr_gc[6]_i_1 ));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[0]_i_1 ),
        .Q(rd_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[1]_i_1 ),
        .Q(rd_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[2]_i_1 ),
        .Q(rd_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[3]_i_1 ),
        .Q(rd_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[4]_i_1 ),
        .Q(rd_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[5]_i_1 ),
        .Q(rd_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[6]_i_1 ),
        .Q(rd_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I5[7]),
        .Q(rd_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[0]),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[7]),
        .Q(Q[7]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[0]_i_1 
       (.I0(I4[0]),
        .I1(I4[1]),
        .O(p_0_in6_out[0]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[1]_i_1 
       (.I0(I4[1]),
        .I1(I4[2]),
        .O(p_0_in6_out[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[2]_i_1 
       (.I0(I4[2]),
        .I1(I4[3]),
        .O(p_0_in6_out[2]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[3]_i_1 
       (.I0(I4[3]),
        .I1(I4[4]),
        .O(p_0_in6_out[3]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[4]_i_1 
       (.I0(I4[4]),
        .I1(I4[5]),
        .O(p_0_in6_out[4]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[5]_i_1 
       (.I0(I4[5]),
        .I1(I4[6]),
        .O(p_0_in6_out[5]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[6]_i_1 
       (.I0(I4[6]),
        .I1(I4[7]),
        .O(p_0_in6_out[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[0]),
        .Q(wr_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[1]),
        .Q(wr_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[2]),
        .Q(wr_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[3]),
        .Q(wr_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[4]),
        .Q(wr_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[5]),
        .Q(wr_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in6_out[6]),
        .Q(wr_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I4[7]),
        .Q(wr_pntr_gc[7]));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module control_to_core_slave_axi_clk_x_pntrs__parameterized0
   (O1,
    Q,
    v1_reg,
    v1_reg_0,
    O2,
    v1_reg_1,
    I1,
    I2,
    I3,
    I4,
    I5,
    wr_clk,
    I6,
    rd_clk,
    I7);
  output O1;
  output [8:0]Q;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]O2;
  output [3:0]v1_reg_1;
  input [8:0]I1;
  input [7:0]I2;
  input [7:0]I3;
  input [7:0]I4;
  input [8:0]I5;
  input wr_clk;
  input [0:0]I6;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]I1;
  wire [7:0]I2;
  wire [7:0]I3;
  wire [7:0]I4;
  wire [8:0]I5;
  wire [0:0]I6;
  wire [0:0]I7;
  wire O1;
  wire [8:0]O2;
  wire [8:0]Q;
  wire [8:0]Q_0;
  wire \n_0_gsync_stage[1].wr_stg_inst ;
  wire \n_0_gsync_stage[2].rd_stg_inst ;
  wire \n_0_gsync_stage[2].wr_stg_inst ;
  wire \n_0_gsync_stage[3].rd_stg_inst ;
  wire \n_0_gsync_stage[3].wr_stg_inst ;
  wire \n_0_gsync_stage[4].rd_stg_inst ;
  wire \n_0_gsync_stage[4].wr_stg_inst ;
  wire \n_0_gsync_stage[5].rd_stg_inst ;
  wire \n_0_gsync_stage[5].wr_stg_inst ;
  wire \n_0_gsync_stage[6].wr_stg_inst ;
  wire \n_0_rd_pntr_gc[0]_i_1 ;
  wire \n_0_rd_pntr_gc[1]_i_1 ;
  wire \n_0_rd_pntr_gc[2]_i_1 ;
  wire \n_0_rd_pntr_gc[3]_i_1 ;
  wire \n_0_rd_pntr_gc[4]_i_1 ;
  wire \n_0_rd_pntr_gc[5]_i_1 ;
  wire \n_0_rd_pntr_gc[6]_i_1 ;
  wire \n_0_rd_pntr_gc[7]_i_1 ;
  wire \n_1_gsync_stage[1].wr_stg_inst ;
  wire \n_1_gsync_stage[2].rd_stg_inst ;
  wire \n_1_gsync_stage[2].wr_stg_inst ;
  wire \n_1_gsync_stage[3].rd_stg_inst ;
  wire \n_1_gsync_stage[3].wr_stg_inst ;
  wire \n_1_gsync_stage[4].rd_stg_inst ;
  wire \n_1_gsync_stage[4].wr_stg_inst ;
  wire \n_1_gsync_stage[5].rd_stg_inst ;
  wire \n_1_gsync_stage[5].wr_stg_inst ;
  wire \n_1_gsync_stage[6].wr_stg_inst ;
  wire \n_2_gsync_stage[1].wr_stg_inst ;
  wire \n_2_gsync_stage[2].rd_stg_inst ;
  wire \n_2_gsync_stage[2].wr_stg_inst ;
  wire \n_2_gsync_stage[3].rd_stg_inst ;
  wire \n_2_gsync_stage[3].wr_stg_inst ;
  wire \n_2_gsync_stage[4].rd_stg_inst ;
  wire \n_2_gsync_stage[4].wr_stg_inst ;
  wire \n_2_gsync_stage[5].rd_stg_inst ;
  wire \n_2_gsync_stage[5].wr_stg_inst ;
  wire \n_2_gsync_stage[6].wr_stg_inst ;
  wire \n_3_gsync_stage[1].wr_stg_inst ;
  wire \n_3_gsync_stage[2].rd_stg_inst ;
  wire \n_3_gsync_stage[2].wr_stg_inst ;
  wire \n_3_gsync_stage[3].rd_stg_inst ;
  wire \n_3_gsync_stage[3].wr_stg_inst ;
  wire \n_3_gsync_stage[4].rd_stg_inst ;
  wire \n_3_gsync_stage[4].wr_stg_inst ;
  wire \n_3_gsync_stage[5].rd_stg_inst ;
  wire \n_3_gsync_stage[5].wr_stg_inst ;
  wire \n_3_gsync_stage[6].wr_stg_inst ;
  wire \n_4_gsync_stage[1].wr_stg_inst ;
  wire \n_4_gsync_stage[2].rd_stg_inst ;
  wire \n_4_gsync_stage[2].wr_stg_inst ;
  wire \n_4_gsync_stage[3].rd_stg_inst ;
  wire \n_4_gsync_stage[3].wr_stg_inst ;
  wire \n_4_gsync_stage[4].rd_stg_inst ;
  wire \n_4_gsync_stage[4].wr_stg_inst ;
  wire \n_4_gsync_stage[5].rd_stg_inst ;
  wire \n_4_gsync_stage[5].wr_stg_inst ;
  wire \n_4_gsync_stage[6].wr_stg_inst ;
  wire \n_5_gsync_stage[1].wr_stg_inst ;
  wire \n_5_gsync_stage[2].rd_stg_inst ;
  wire \n_5_gsync_stage[2].wr_stg_inst ;
  wire \n_5_gsync_stage[3].rd_stg_inst ;
  wire \n_5_gsync_stage[3].wr_stg_inst ;
  wire \n_5_gsync_stage[4].rd_stg_inst ;
  wire \n_5_gsync_stage[4].wr_stg_inst ;
  wire \n_5_gsync_stage[5].rd_stg_inst ;
  wire \n_5_gsync_stage[5].wr_stg_inst ;
  wire \n_5_gsync_stage[6].wr_stg_inst ;
  wire \n_6_gsync_stage[1].wr_stg_inst ;
  wire \n_6_gsync_stage[2].rd_stg_inst ;
  wire \n_6_gsync_stage[2].wr_stg_inst ;
  wire \n_6_gsync_stage[3].rd_stg_inst ;
  wire \n_6_gsync_stage[3].wr_stg_inst ;
  wire \n_6_gsync_stage[4].rd_stg_inst ;
  wire \n_6_gsync_stage[4].wr_stg_inst ;
  wire \n_6_gsync_stage[5].rd_stg_inst ;
  wire \n_6_gsync_stage[5].wr_stg_inst ;
  wire \n_6_gsync_stage[6].wr_stg_inst ;
  wire \n_7_gsync_stage[1].wr_stg_inst ;
  wire \n_7_gsync_stage[2].rd_stg_inst ;
  wire \n_7_gsync_stage[2].wr_stg_inst ;
  wire \n_7_gsync_stage[3].rd_stg_inst ;
  wire \n_7_gsync_stage[3].wr_stg_inst ;
  wire \n_7_gsync_stage[4].rd_stg_inst ;
  wire \n_7_gsync_stage[4].wr_stg_inst ;
  wire \n_7_gsync_stage[5].rd_stg_inst ;
  wire \n_7_gsync_stage[5].wr_stg_inst ;
  wire \n_7_gsync_stage[6].wr_stg_inst ;
  wire \n_8_gsync_stage[1].wr_stg_inst ;
  wire \n_8_gsync_stage[2].rd_stg_inst ;
  wire \n_8_gsync_stage[2].wr_stg_inst ;
  wire \n_8_gsync_stage[3].rd_stg_inst ;
  wire \n_8_gsync_stage[3].wr_stg_inst ;
  wire \n_8_gsync_stage[4].rd_stg_inst ;
  wire \n_8_gsync_stage[4].wr_stg_inst ;
  wire \n_8_gsync_stage[5].rd_stg_inst ;
  wire \n_8_gsync_stage[5].wr_stg_inst ;
  wire \n_8_gsync_stage[6].wr_stg_inst ;
  wire [8:0]p_0_in;
  wire [7:0]p_0_in7_out;
  wire rd_clk;
  wire [8:0]rd_pntr_gc;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire [3:0]v1_reg_1;
  wire wr_clk;
  wire [8:0]wr_pntr_gc;

LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(Q[1]),
        .I1(I2[1]),
        .I2(Q[0]),
        .I3(I2[0]),
        .O(v1_reg[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(O2[1]),
        .I1(I3[1]),
        .I2(O2[0]),
        .I3(I3[0]),
        .O(v1_reg_0[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(O2[1]),
        .I1(I4[1]),
        .I2(O2[0]),
        .I3(I4[0]),
        .O(v1_reg_1[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1__0 
       (.I0(Q[3]),
        .I1(I2[3]),
        .I2(Q[2]),
        .I3(I2[2]),
        .O(v1_reg[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1__1 
       (.I0(O2[3]),
        .I1(I3[3]),
        .I2(O2[2]),
        .I3(I3[2]),
        .O(v1_reg_0[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1__2 
       (.I0(O2[3]),
        .I1(I4[3]),
        .I2(O2[2]),
        .I3(I4[2]),
        .O(v1_reg_1[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1__0 
       (.I0(Q[5]),
        .I1(I2[5]),
        .I2(Q[4]),
        .I3(I2[4]),
        .O(v1_reg[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1__1 
       (.I0(O2[5]),
        .I1(I3[5]),
        .I2(O2[4]),
        .I3(I3[4]),
        .O(v1_reg_0[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1__2 
       (.I0(O2[5]),
        .I1(I4[5]),
        .I2(O2[4]),
        .I3(I4[4]),
        .O(v1_reg_1[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1__0 
       (.I0(Q[7]),
        .I1(I2[7]),
        .I2(Q[6]),
        .I3(I2[6]),
        .O(v1_reg[3]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1__1 
       (.I0(O2[7]),
        .I1(I3[7]),
        .I2(O2[6]),
        .I3(I3[6]),
        .O(v1_reg_0[3]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1__2 
       (.I0(O2[7]),
        .I1(I4[7]),
        .I2(O2[6]),
        .I3(I4[6]),
        .O(v1_reg_1[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1__0 
       (.I0(Q[8]),
        .I1(I1[8]),
        .O(O1));
control_to_core_slave_axi_synchronizer_ff__parameterized0 \gsync_stage[1].rd_stg_inst 
       (.I1(wr_pntr_gc),
        .I7(I7),
        .Q(Q_0),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_4 \gsync_stage[1].wr_stg_inst 
       (.I1(rd_pntr_gc),
        .I6(I6),
        .Q({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst ,\n_8_gsync_stage[1].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_5 \gsync_stage[2].rd_stg_inst 
       (.D(Q_0),
        .I7(I7),
        .Q({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst ,\n_8_gsync_stage[2].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_6 \gsync_stage[2].wr_stg_inst 
       (.D({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst ,\n_8_gsync_stage[1].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst ,\n_8_gsync_stage[2].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_7 \gsync_stage[3].rd_stg_inst 
       (.D({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst ,\n_8_gsync_stage[2].rd_stg_inst }),
        .I7(I7),
        .Q({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst ,\n_8_gsync_stage[3].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_8 \gsync_stage[3].wr_stg_inst 
       (.D({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst ,\n_8_gsync_stage[2].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst ,\n_8_gsync_stage[3].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_9 \gsync_stage[4].rd_stg_inst 
       (.D({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst ,\n_8_gsync_stage[3].rd_stg_inst }),
        .I7(I7),
        .Q({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst ,\n_8_gsync_stage[4].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_10 \gsync_stage[4].wr_stg_inst 
       (.D({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst ,\n_8_gsync_stage[3].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst ,\n_8_gsync_stage[4].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_11 \gsync_stage[5].rd_stg_inst 
       (.D({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst ,\n_8_gsync_stage[4].rd_stg_inst }),
        .I7(I7),
        .Q({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst ,\n_8_gsync_stage[5].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_12 \gsync_stage[5].wr_stg_inst 
       (.D({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst ,\n_8_gsync_stage[4].wr_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst ,\n_8_gsync_stage[5].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_13 \gsync_stage[6].rd_stg_inst 
       (.D({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst ,\n_8_gsync_stage[5].rd_stg_inst }),
        .I7(I7),
        .p_0_in(p_0_in),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_14 \gsync_stage[6].wr_stg_inst 
       (.D({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst ,\n_8_gsync_stage[5].wr_stg_inst }),
        .I6(I6),
        .O1({\n_1_gsync_stage[6].wr_stg_inst ,\n_2_gsync_stage[6].wr_stg_inst ,\n_3_gsync_stage[6].wr_stg_inst ,\n_4_gsync_stage[6].wr_stg_inst ,\n_5_gsync_stage[6].wr_stg_inst ,\n_6_gsync_stage[6].wr_stg_inst ,\n_7_gsync_stage[6].wr_stg_inst ,\n_8_gsync_stage[6].wr_stg_inst }),
        .Q(\n_0_gsync_stage[6].wr_stg_inst ),
        .wr_clk(wr_clk));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_8_gsync_stage[6].wr_stg_inst ),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_7_gsync_stage[6].wr_stg_inst ),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_6_gsync_stage[6].wr_stg_inst ),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_5_gsync_stage[6].wr_stg_inst ),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_4_gsync_stage[6].wr_stg_inst ),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_3_gsync_stage[6].wr_stg_inst ),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_2_gsync_stage[6].wr_stg_inst ),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_1_gsync_stage[6].wr_stg_inst ),
        .Q(O2[7]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_gsync_stage[6].wr_stg_inst ),
        .Q(O2[8]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[0]_i_1 
       (.I0(I1[0]),
        .I1(I1[1]),
        .O(\n_0_rd_pntr_gc[0]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[1]_i_1 
       (.I0(I1[1]),
        .I1(I1[2]),
        .O(\n_0_rd_pntr_gc[1]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[2]_i_1 
       (.I0(I1[2]),
        .I1(I1[3]),
        .O(\n_0_rd_pntr_gc[2]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[3]_i_1 
       (.I0(I1[3]),
        .I1(I1[4]),
        .O(\n_0_rd_pntr_gc[3]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[4]_i_1 
       (.I0(I1[4]),
        .I1(I1[5]),
        .O(\n_0_rd_pntr_gc[4]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[5]_i_1 
       (.I0(I1[5]),
        .I1(I1[6]),
        .O(\n_0_rd_pntr_gc[5]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[6]_i_1 
       (.I0(I1[6]),
        .I1(I1[7]),
        .O(\n_0_rd_pntr_gc[6]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[7]_i_1 
       (.I0(I1[7]),
        .I1(I1[8]),
        .O(\n_0_rd_pntr_gc[7]_i_1 ));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[0]_i_1 ),
        .Q(rd_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[1]_i_1 ),
        .Q(rd_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[2]_i_1 ),
        .Q(rd_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[3]_i_1 ),
        .Q(rd_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[4]_i_1 ),
        .Q(rd_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[5]_i_1 ),
        .Q(rd_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[6]_i_1 ),
        .Q(rd_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(\n_0_rd_pntr_gc[7]_i_1 ),
        .Q(rd_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[8]),
        .Q(rd_pntr_gc[8]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[0]),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[7]),
        .Q(Q[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(p_0_in[8]),
        .Q(Q[8]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[0]_i_1 
       (.I0(I5[0]),
        .I1(I5[1]),
        .O(p_0_in7_out[0]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[1]_i_1 
       (.I0(I5[1]),
        .I1(I5[2]),
        .O(p_0_in7_out[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[2]_i_1 
       (.I0(I5[2]),
        .I1(I5[3]),
        .O(p_0_in7_out[2]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[3]_i_1 
       (.I0(I5[3]),
        .I1(I5[4]),
        .O(p_0_in7_out[3]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[4]_i_1 
       (.I0(I5[4]),
        .I1(I5[5]),
        .O(p_0_in7_out[4]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[5]_i_1 
       (.I0(I5[5]),
        .I1(I5[6]),
        .O(p_0_in7_out[5]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[6]_i_1 
       (.I0(I5[6]),
        .I1(I5[7]),
        .O(p_0_in7_out[6]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[7]_i_1 
       (.I0(I5[7]),
        .I1(I5[8]),
        .O(p_0_in7_out[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[0]),
        .Q(wr_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[1]),
        .Q(wr_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[2]),
        .Q(wr_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[3]),
        .Q(wr_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[4]),
        .Q(wr_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[5]),
        .Q(wr_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[6]),
        .Q(wr_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in7_out[7]),
        .Q(wr_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I5[8]),
        .Q(wr_pntr_gc[8]));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module control_to_core_slave_axi_clk_x_pntrs__parameterized0_15
   (O1,
    WR_PNTR_RD,
    v1_reg,
    v1_reg_0,
    RD_PNTR_WR,
    v1_reg_1,
    Q,
    I1,
    I2,
    I3,
    I4,
    wr_clk,
    I5,
    rd_clk,
    I6);
  output O1;
  output [8:0]WR_PNTR_RD;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]RD_PNTR_WR;
  output [3:0]v1_reg_1;
  input [8:0]Q;
  input [7:0]I1;
  input [7:0]I2;
  input [7:0]I3;
  input [8:0]I4;
  input wr_clk;
  input [0:0]I5;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]I1;
  wire [7:0]I2;
  wire [7:0]I3;
  wire [8:0]I4;
  wire [0:0]I5;
  wire [0:0]I6;
  wire O1;
  wire [8:0]Q;
  wire [8:0]Q_0;
  wire [8:0]RD_PNTR_WR;
  wire [8:0]WR_PNTR_RD;
  wire \n_0_gsync_stage[1].wr_stg_inst ;
  wire \n_0_gsync_stage[2].rd_stg_inst ;
  wire \n_0_gsync_stage[2].wr_stg_inst ;
  wire \n_0_gsync_stage[3].rd_stg_inst ;
  wire \n_0_gsync_stage[3].wr_stg_inst ;
  wire \n_0_gsync_stage[4].rd_stg_inst ;
  wire \n_0_gsync_stage[4].wr_stg_inst ;
  wire \n_0_gsync_stage[5].rd_stg_inst ;
  wire \n_0_gsync_stage[5].wr_stg_inst ;
  wire \n_0_gsync_stage[6].wr_stg_inst ;
  wire \n_0_rd_pntr_gc[0]_i_1 ;
  wire \n_0_rd_pntr_gc[1]_i_1 ;
  wire \n_0_rd_pntr_gc[2]_i_1 ;
  wire \n_0_rd_pntr_gc[3]_i_1 ;
  wire \n_0_rd_pntr_gc[4]_i_1 ;
  wire \n_0_rd_pntr_gc[5]_i_1 ;
  wire \n_0_rd_pntr_gc[6]_i_1 ;
  wire \n_0_rd_pntr_gc[7]_i_1 ;
  wire \n_1_gsync_stage[1].wr_stg_inst ;
  wire \n_1_gsync_stage[2].rd_stg_inst ;
  wire \n_1_gsync_stage[2].wr_stg_inst ;
  wire \n_1_gsync_stage[3].rd_stg_inst ;
  wire \n_1_gsync_stage[3].wr_stg_inst ;
  wire \n_1_gsync_stage[4].rd_stg_inst ;
  wire \n_1_gsync_stage[4].wr_stg_inst ;
  wire \n_1_gsync_stage[5].rd_stg_inst ;
  wire \n_1_gsync_stage[5].wr_stg_inst ;
  wire \n_1_gsync_stage[6].wr_stg_inst ;
  wire \n_2_gsync_stage[1].wr_stg_inst ;
  wire \n_2_gsync_stage[2].rd_stg_inst ;
  wire \n_2_gsync_stage[2].wr_stg_inst ;
  wire \n_2_gsync_stage[3].rd_stg_inst ;
  wire \n_2_gsync_stage[3].wr_stg_inst ;
  wire \n_2_gsync_stage[4].rd_stg_inst ;
  wire \n_2_gsync_stage[4].wr_stg_inst ;
  wire \n_2_gsync_stage[5].rd_stg_inst ;
  wire \n_2_gsync_stage[5].wr_stg_inst ;
  wire \n_2_gsync_stage[6].wr_stg_inst ;
  wire \n_3_gsync_stage[1].wr_stg_inst ;
  wire \n_3_gsync_stage[2].rd_stg_inst ;
  wire \n_3_gsync_stage[2].wr_stg_inst ;
  wire \n_3_gsync_stage[3].rd_stg_inst ;
  wire \n_3_gsync_stage[3].wr_stg_inst ;
  wire \n_3_gsync_stage[4].rd_stg_inst ;
  wire \n_3_gsync_stage[4].wr_stg_inst ;
  wire \n_3_gsync_stage[5].rd_stg_inst ;
  wire \n_3_gsync_stage[5].wr_stg_inst ;
  wire \n_3_gsync_stage[6].wr_stg_inst ;
  wire \n_4_gsync_stage[1].wr_stg_inst ;
  wire \n_4_gsync_stage[2].rd_stg_inst ;
  wire \n_4_gsync_stage[2].wr_stg_inst ;
  wire \n_4_gsync_stage[3].rd_stg_inst ;
  wire \n_4_gsync_stage[3].wr_stg_inst ;
  wire \n_4_gsync_stage[4].rd_stg_inst ;
  wire \n_4_gsync_stage[4].wr_stg_inst ;
  wire \n_4_gsync_stage[5].rd_stg_inst ;
  wire \n_4_gsync_stage[5].wr_stg_inst ;
  wire \n_4_gsync_stage[6].wr_stg_inst ;
  wire \n_5_gsync_stage[1].wr_stg_inst ;
  wire \n_5_gsync_stage[2].rd_stg_inst ;
  wire \n_5_gsync_stage[2].wr_stg_inst ;
  wire \n_5_gsync_stage[3].rd_stg_inst ;
  wire \n_5_gsync_stage[3].wr_stg_inst ;
  wire \n_5_gsync_stage[4].rd_stg_inst ;
  wire \n_5_gsync_stage[4].wr_stg_inst ;
  wire \n_5_gsync_stage[5].rd_stg_inst ;
  wire \n_5_gsync_stage[5].wr_stg_inst ;
  wire \n_5_gsync_stage[6].wr_stg_inst ;
  wire \n_6_gsync_stage[1].wr_stg_inst ;
  wire \n_6_gsync_stage[2].rd_stg_inst ;
  wire \n_6_gsync_stage[2].wr_stg_inst ;
  wire \n_6_gsync_stage[3].rd_stg_inst ;
  wire \n_6_gsync_stage[3].wr_stg_inst ;
  wire \n_6_gsync_stage[4].rd_stg_inst ;
  wire \n_6_gsync_stage[4].wr_stg_inst ;
  wire \n_6_gsync_stage[5].rd_stg_inst ;
  wire \n_6_gsync_stage[5].wr_stg_inst ;
  wire \n_6_gsync_stage[6].wr_stg_inst ;
  wire \n_7_gsync_stage[1].wr_stg_inst ;
  wire \n_7_gsync_stage[2].rd_stg_inst ;
  wire \n_7_gsync_stage[2].wr_stg_inst ;
  wire \n_7_gsync_stage[3].rd_stg_inst ;
  wire \n_7_gsync_stage[3].wr_stg_inst ;
  wire \n_7_gsync_stage[4].rd_stg_inst ;
  wire \n_7_gsync_stage[4].wr_stg_inst ;
  wire \n_7_gsync_stage[5].rd_stg_inst ;
  wire \n_7_gsync_stage[5].wr_stg_inst ;
  wire \n_7_gsync_stage[6].wr_stg_inst ;
  wire \n_8_gsync_stage[1].wr_stg_inst ;
  wire \n_8_gsync_stage[2].rd_stg_inst ;
  wire \n_8_gsync_stage[2].wr_stg_inst ;
  wire \n_8_gsync_stage[3].rd_stg_inst ;
  wire \n_8_gsync_stage[3].wr_stg_inst ;
  wire \n_8_gsync_stage[4].rd_stg_inst ;
  wire \n_8_gsync_stage[4].wr_stg_inst ;
  wire \n_8_gsync_stage[5].rd_stg_inst ;
  wire \n_8_gsync_stage[5].wr_stg_inst ;
  wire \n_8_gsync_stage[6].wr_stg_inst ;
  wire [8:0]p_0_in;
  wire [7:0]p_0_in7_out;
  wire rd_clk;
  wire [8:0]rd_pntr_gc;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire [3:0]v1_reg_1;
  wire wr_clk;
  wire [8:0]wr_pntr_gc;

LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(WR_PNTR_RD[1]),
        .I1(I1[1]),
        .I2(WR_PNTR_RD[0]),
        .I3(I1[0]),
        .O(v1_reg[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(RD_PNTR_WR[1]),
        .I1(I2[1]),
        .I2(RD_PNTR_WR[0]),
        .I3(I2[0]),
        .O(v1_reg_0[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(RD_PNTR_WR[1]),
        .I1(I3[1]),
        .I2(RD_PNTR_WR[0]),
        .I3(I3[0]),
        .O(v1_reg_1[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1__0 
       (.I0(WR_PNTR_RD[3]),
        .I1(I1[3]),
        .I2(WR_PNTR_RD[2]),
        .I3(I1[2]),
        .O(v1_reg[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1__1 
       (.I0(RD_PNTR_WR[3]),
        .I1(I2[3]),
        .I2(RD_PNTR_WR[2]),
        .I3(I2[2]),
        .O(v1_reg_0[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1__2 
       (.I0(RD_PNTR_WR[3]),
        .I1(I3[3]),
        .I2(RD_PNTR_WR[2]),
        .I3(I3[2]),
        .O(v1_reg_1[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1__0 
       (.I0(WR_PNTR_RD[5]),
        .I1(I1[5]),
        .I2(WR_PNTR_RD[4]),
        .I3(I1[4]),
        .O(v1_reg[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1__1 
       (.I0(RD_PNTR_WR[5]),
        .I1(I2[5]),
        .I2(RD_PNTR_WR[4]),
        .I3(I2[4]),
        .O(v1_reg_0[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1__2 
       (.I0(RD_PNTR_WR[5]),
        .I1(I3[5]),
        .I2(RD_PNTR_WR[4]),
        .I3(I3[4]),
        .O(v1_reg_1[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1__0 
       (.I0(WR_PNTR_RD[7]),
        .I1(I1[7]),
        .I2(WR_PNTR_RD[6]),
        .I3(I1[6]),
        .O(v1_reg[3]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1__1 
       (.I0(RD_PNTR_WR[7]),
        .I1(I2[7]),
        .I2(RD_PNTR_WR[6]),
        .I3(I2[6]),
        .O(v1_reg_0[3]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1__2 
       (.I0(RD_PNTR_WR[7]),
        .I1(I3[7]),
        .I2(RD_PNTR_WR[6]),
        .I3(I3[6]),
        .O(v1_reg_1[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1__0 
       (.I0(WR_PNTR_RD[8]),
        .I1(Q[8]),
        .O(O1));
control_to_core_slave_axi_synchronizer_ff__parameterized0_29 \gsync_stage[1].rd_stg_inst 
       (.I1(wr_pntr_gc),
        .I6(I6),
        .Q(Q_0),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_30 \gsync_stage[1].wr_stg_inst 
       (.I1(rd_pntr_gc),
        .I5(I5),
        .Q({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst ,\n_8_gsync_stage[1].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_31 \gsync_stage[2].rd_stg_inst 
       (.D(Q_0),
        .I6(I6),
        .Q({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst ,\n_8_gsync_stage[2].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_32 \gsync_stage[2].wr_stg_inst 
       (.D({\n_0_gsync_stage[1].wr_stg_inst ,\n_1_gsync_stage[1].wr_stg_inst ,\n_2_gsync_stage[1].wr_stg_inst ,\n_3_gsync_stage[1].wr_stg_inst ,\n_4_gsync_stage[1].wr_stg_inst ,\n_5_gsync_stage[1].wr_stg_inst ,\n_6_gsync_stage[1].wr_stg_inst ,\n_7_gsync_stage[1].wr_stg_inst ,\n_8_gsync_stage[1].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst ,\n_8_gsync_stage[2].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_33 \gsync_stage[3].rd_stg_inst 
       (.D({\n_0_gsync_stage[2].rd_stg_inst ,\n_1_gsync_stage[2].rd_stg_inst ,\n_2_gsync_stage[2].rd_stg_inst ,\n_3_gsync_stage[2].rd_stg_inst ,\n_4_gsync_stage[2].rd_stg_inst ,\n_5_gsync_stage[2].rd_stg_inst ,\n_6_gsync_stage[2].rd_stg_inst ,\n_7_gsync_stage[2].rd_stg_inst ,\n_8_gsync_stage[2].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst ,\n_8_gsync_stage[3].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_34 \gsync_stage[3].wr_stg_inst 
       (.D({\n_0_gsync_stage[2].wr_stg_inst ,\n_1_gsync_stage[2].wr_stg_inst ,\n_2_gsync_stage[2].wr_stg_inst ,\n_3_gsync_stage[2].wr_stg_inst ,\n_4_gsync_stage[2].wr_stg_inst ,\n_5_gsync_stage[2].wr_stg_inst ,\n_6_gsync_stage[2].wr_stg_inst ,\n_7_gsync_stage[2].wr_stg_inst ,\n_8_gsync_stage[2].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst ,\n_8_gsync_stage[3].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_35 \gsync_stage[4].rd_stg_inst 
       (.D({\n_0_gsync_stage[3].rd_stg_inst ,\n_1_gsync_stage[3].rd_stg_inst ,\n_2_gsync_stage[3].rd_stg_inst ,\n_3_gsync_stage[3].rd_stg_inst ,\n_4_gsync_stage[3].rd_stg_inst ,\n_5_gsync_stage[3].rd_stg_inst ,\n_6_gsync_stage[3].rd_stg_inst ,\n_7_gsync_stage[3].rd_stg_inst ,\n_8_gsync_stage[3].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst ,\n_8_gsync_stage[4].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_36 \gsync_stage[4].wr_stg_inst 
       (.D({\n_0_gsync_stage[3].wr_stg_inst ,\n_1_gsync_stage[3].wr_stg_inst ,\n_2_gsync_stage[3].wr_stg_inst ,\n_3_gsync_stage[3].wr_stg_inst ,\n_4_gsync_stage[3].wr_stg_inst ,\n_5_gsync_stage[3].wr_stg_inst ,\n_6_gsync_stage[3].wr_stg_inst ,\n_7_gsync_stage[3].wr_stg_inst ,\n_8_gsync_stage[3].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst ,\n_8_gsync_stage[4].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_37 \gsync_stage[5].rd_stg_inst 
       (.D({\n_0_gsync_stage[4].rd_stg_inst ,\n_1_gsync_stage[4].rd_stg_inst ,\n_2_gsync_stage[4].rd_stg_inst ,\n_3_gsync_stage[4].rd_stg_inst ,\n_4_gsync_stage[4].rd_stg_inst ,\n_5_gsync_stage[4].rd_stg_inst ,\n_6_gsync_stage[4].rd_stg_inst ,\n_7_gsync_stage[4].rd_stg_inst ,\n_8_gsync_stage[4].rd_stg_inst }),
        .I6(I6),
        .Q({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst ,\n_8_gsync_stage[5].rd_stg_inst }),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_38 \gsync_stage[5].wr_stg_inst 
       (.D({\n_0_gsync_stage[4].wr_stg_inst ,\n_1_gsync_stage[4].wr_stg_inst ,\n_2_gsync_stage[4].wr_stg_inst ,\n_3_gsync_stage[4].wr_stg_inst ,\n_4_gsync_stage[4].wr_stg_inst ,\n_5_gsync_stage[4].wr_stg_inst ,\n_6_gsync_stage[4].wr_stg_inst ,\n_7_gsync_stage[4].wr_stg_inst ,\n_8_gsync_stage[4].wr_stg_inst }),
        .I5(I5),
        .Q({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst ,\n_8_gsync_stage[5].wr_stg_inst }),
        .wr_clk(wr_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_39 \gsync_stage[6].rd_stg_inst 
       (.D({\n_0_gsync_stage[5].rd_stg_inst ,\n_1_gsync_stage[5].rd_stg_inst ,\n_2_gsync_stage[5].rd_stg_inst ,\n_3_gsync_stage[5].rd_stg_inst ,\n_4_gsync_stage[5].rd_stg_inst ,\n_5_gsync_stage[5].rd_stg_inst ,\n_6_gsync_stage[5].rd_stg_inst ,\n_7_gsync_stage[5].rd_stg_inst ,\n_8_gsync_stage[5].rd_stg_inst }),
        .I6(I6),
        .p_0_in(p_0_in),
        .rd_clk(rd_clk));
control_to_core_slave_axi_synchronizer_ff__parameterized0_40 \gsync_stage[6].wr_stg_inst 
       (.D({\n_0_gsync_stage[5].wr_stg_inst ,\n_1_gsync_stage[5].wr_stg_inst ,\n_2_gsync_stage[5].wr_stg_inst ,\n_3_gsync_stage[5].wr_stg_inst ,\n_4_gsync_stage[5].wr_stg_inst ,\n_5_gsync_stage[5].wr_stg_inst ,\n_6_gsync_stage[5].wr_stg_inst ,\n_7_gsync_stage[5].wr_stg_inst ,\n_8_gsync_stage[5].wr_stg_inst }),
        .I5(I5),
        .O1({\n_1_gsync_stage[6].wr_stg_inst ,\n_2_gsync_stage[6].wr_stg_inst ,\n_3_gsync_stage[6].wr_stg_inst ,\n_4_gsync_stage[6].wr_stg_inst ,\n_5_gsync_stage[6].wr_stg_inst ,\n_6_gsync_stage[6].wr_stg_inst ,\n_7_gsync_stage[6].wr_stg_inst ,\n_8_gsync_stage[6].wr_stg_inst }),
        .Q(\n_0_gsync_stage[6].wr_stg_inst ),
        .wr_clk(wr_clk));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_8_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_7_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_6_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_5_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_4_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_3_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_2_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_1_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[7]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_bin_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(\n_0_gsync_stage[6].wr_stg_inst ),
        .Q(RD_PNTR_WR[8]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[0]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\n_0_rd_pntr_gc[0]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\n_0_rd_pntr_gc[1]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\n_0_rd_pntr_gc[2]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[3]_i_1 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\n_0_rd_pntr_gc[3]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\n_0_rd_pntr_gc[4]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\n_0_rd_pntr_gc[5]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[6]_i_1 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\n_0_rd_pntr_gc[6]_i_1 ));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_gc[7]_i_1 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\n_0_rd_pntr_gc[7]_i_1 ));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[0]_i_1 ),
        .Q(rd_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[1]_i_1 ),
        .Q(rd_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[2]_i_1 ),
        .Q(rd_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[3]_i_1 ),
        .Q(rd_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[4]_i_1 ),
        .Q(rd_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[5]_i_1 ),
        .Q(rd_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[6]_i_1 ),
        .Q(rd_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(\n_0_rd_pntr_gc[7]_i_1 ),
        .Q(rd_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \rd_pntr_gc_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(Q[8]),
        .Q(rd_pntr_gc[8]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[0]),
        .Q(WR_PNTR_RD[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[1]),
        .Q(WR_PNTR_RD[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[2]),
        .Q(WR_PNTR_RD[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[3]),
        .Q(WR_PNTR_RD[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[4]),
        .Q(WR_PNTR_RD[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[5]),
        .Q(WR_PNTR_RD[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[6]),
        .Q(WR_PNTR_RD[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[7]),
        .Q(WR_PNTR_RD[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_bin_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(p_0_in[8]),
        .Q(WR_PNTR_RD[8]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[0]_i_1 
       (.I0(I4[0]),
        .I1(I4[1]),
        .O(p_0_in7_out[0]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[1]_i_1 
       (.I0(I4[1]),
        .I1(I4[2]),
        .O(p_0_in7_out[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[2]_i_1 
       (.I0(I4[2]),
        .I1(I4[3]),
        .O(p_0_in7_out[2]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[3]_i_1 
       (.I0(I4[3]),
        .I1(I4[4]),
        .O(p_0_in7_out[3]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[4]_i_1 
       (.I0(I4[4]),
        .I1(I4[5]),
        .O(p_0_in7_out[4]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[5]_i_1 
       (.I0(I4[5]),
        .I1(I4[6]),
        .O(p_0_in7_out[5]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[6]_i_1 
       (.I0(I4[6]),
        .I1(I4[7]),
        .O(p_0_in7_out[6]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_gc[7]_i_1 
       (.I0(I4[7]),
        .I1(I4[8]),
        .O(p_0_in7_out[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[0]),
        .Q(wr_pntr_gc[0]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[1]),
        .Q(wr_pntr_gc[1]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[2]),
        .Q(wr_pntr_gc[2]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[3]),
        .Q(wr_pntr_gc[3]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[4]),
        .Q(wr_pntr_gc[4]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[5]),
        .Q(wr_pntr_gc[5]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[6]),
        .Q(wr_pntr_gc[6]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(p_0_in7_out[7]),
        .Q(wr_pntr_gc[7]));
FDCE #(
    .INIT(1'b0)) 
     \wr_pntr_gc_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I4[8]),
        .Q(wr_pntr_gc[8]));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0
   (comp1,
    v1_reg,
    I1);
  output comp1;
  input [3:0]v1_reg;
  input I1;

  wire I1;
  wire comp1;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I1}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_1
   (comp2,
    v1_reg_0,
    I2);
  output comp2;
  input [3:0]v1_reg_0;
  input I2;

  wire I2;
  wire comp2;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg_0;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I2}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_2
   (comp0,
    v1_reg_0,
    I1);
  output comp0;
  input [3:0]v1_reg_0;
  input I1;

  wire I1;
  wire comp0;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg_0;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I1}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_22
   (comp1,
    v1_reg,
    I1);
  output comp1;
  input [3:0]v1_reg;
  input I1;

  wire I1;
  wire comp1;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I1}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_23
   (comp2,
    v1_reg_0,
    I2);
  output comp2;
  input [3:0]v1_reg_0;
  input I2;

  wire I2;
  wire comp2;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg_0;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I2}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_27
   (comp0,
    v1_reg_0,
    I1);
  output comp0;
  input [3:0]v1_reg_0;
  input I1;

  wire I1;
  wire comp0;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg_0;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I1}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_28
   (comp1,
    v1_reg,
    I2);
  output comp1;
  input [3:0]v1_reg;
  input I2;

  wire I2;
  wire comp1;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I2}));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module control_to_core_slave_axi_compare__parameterized0_3
   (comp1,
    v1_reg,
    I2);
  output comp1;
  input [3:0]v1_reg;
  input I2;

  wire I2;
  wire comp1;
  wire \n_0_gmux.gm[3].gms.ms ;
  wire [3:0]v1_reg;
  wire [2:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\n_0_gmux.gm[3].gms.ms ,\NLW_gmux.gm[0].gm1.m1_CARRY4_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
(* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
   (* box_type = "PRIMITIVE" *) 
   CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\n_0_gmux.gm[3].gms.ms ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],I2}));
endmodule

(* ORIG_REF_NAME = "dmem" *) 
module control_to_core_slave_axi_dmem
   (p_0_out,
    p_0_out_0,
    I1,
    rd_clk,
    Q,
    I2,
    I3,
    wr_clk,
    din,
    I4,
    O3,
    O4,
    I5,
    I6,
    I7);
  output [2:0]p_0_out;
  output [2:0]p_0_out_0;
  input I1;
  input rd_clk;
  input [0:0]Q;
  input I2;
  input I3;
  input wr_clk;
  input [2:0]din;
  input I4;
  input [7:0]O3;
  input [5:0]O4;
  input I5;
  input I6;
  input I7;

  wire I1;
  wire I2;
  wire I3;
  wire I4;
  wire I5;
  wire I6;
  wire I7;
  wire [7:0]O3;
  wire [5:0]O4;
  wire [0:0]Q;
  wire [2:0]din;
  wire n_0_RAM_reg_0_63_0_2;
  wire n_0_RAM_reg_128_191_0_2;
  wire n_0_RAM_reg_192_255_0_2;
  wire n_0_RAM_reg_64_127_0_2;
  wire n_1_RAM_reg_0_63_0_2;
  wire n_1_RAM_reg_128_191_0_2;
  wire n_1_RAM_reg_192_255_0_2;
  wire n_1_RAM_reg_64_127_0_2;
  wire n_2_RAM_reg_0_63_0_2;
  wire n_2_RAM_reg_128_191_0_2;
  wire n_2_RAM_reg_192_255_0_2;
  wire n_2_RAM_reg_64_127_0_2;
  wire [2:0]p_0_out;
  wire [2:0]p_0_out_0;
  wire rd_clk;
  wire wr_clk;
  wire NLW_RAM_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_RAM_reg_128_191_0_2_DOD_UNCONNECTED;
  wire NLW_RAM_reg_192_255_0_2_DOD_UNCONNECTED;
  wire NLW_RAM_reg_64_127_0_2_DOD_UNCONNECTED;

RAM64M RAM_reg_0_63_0_2
       (.ADDRA(O3[5:0]),
        .ADDRB(O3[5:0]),
        .ADDRC(O3[5:0]),
        .ADDRD(O4),
        .DIA(din[0]),
        .DIB(din[1]),
        .DIC(din[2]),
        .DID(1'b0),
        .DOA(n_0_RAM_reg_0_63_0_2),
        .DOB(n_1_RAM_reg_0_63_0_2),
        .DOC(n_2_RAM_reg_0_63_0_2),
        .DOD(NLW_RAM_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(wr_clk),
        .WE(I4));
RAM64M RAM_reg_128_191_0_2
       (.ADDRA(O3[5:0]),
        .ADDRB(O3[5:0]),
        .ADDRC(O3[5:0]),
        .ADDRD(O4),
        .DIA(din[0]),
        .DIB(din[1]),
        .DIC(din[2]),
        .DID(1'b0),
        .DOA(n_0_RAM_reg_128_191_0_2),
        .DOB(n_1_RAM_reg_128_191_0_2),
        .DOC(n_2_RAM_reg_128_191_0_2),
        .DOD(NLW_RAM_reg_128_191_0_2_DOD_UNCONNECTED),
        .WCLK(wr_clk),
        .WE(I6));
RAM64M RAM_reg_192_255_0_2
       (.ADDRA(O3[5:0]),
        .ADDRB(O3[5:0]),
        .ADDRC(O3[5:0]),
        .ADDRD(O4),
        .DIA(din[0]),
        .DIB(din[1]),
        .DIC(din[2]),
        .DID(1'b0),
        .DOA(n_0_RAM_reg_192_255_0_2),
        .DOB(n_1_RAM_reg_192_255_0_2),
        .DOC(n_2_RAM_reg_192_255_0_2),
        .DOD(NLW_RAM_reg_192_255_0_2_DOD_UNCONNECTED),
        .WCLK(wr_clk),
        .WE(I7));
RAM64M RAM_reg_64_127_0_2
       (.ADDRA(O3[5:0]),
        .ADDRB(O3[5:0]),
        .ADDRC(O3[5:0]),
        .ADDRD(O4),
        .DIA(din[0]),
        .DIB(din[1]),
        .DIC(din[2]),
        .DID(1'b0),
        .DOA(n_0_RAM_reg_64_127_0_2),
        .DOB(n_1_RAM_reg_64_127_0_2),
        .DOC(n_2_RAM_reg_64_127_0_2),
        .DOD(NLW_RAM_reg_64_127_0_2_DOD_UNCONNECTED),
        .WCLK(wr_clk),
        .WE(I5));
LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
     \gpr1.dout_i[0]_i_2 
       (.I0(n_0_RAM_reg_192_255_0_2),
        .I1(n_0_RAM_reg_128_191_0_2),
        .I2(O3[7]),
        .I3(n_0_RAM_reg_64_127_0_2),
        .I4(O3[6]),
        .I5(n_0_RAM_reg_0_63_0_2),
        .O(p_0_out_0[0]));
LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
     \gpr1.dout_i[1]_i_2 
       (.I0(n_1_RAM_reg_192_255_0_2),
        .I1(n_1_RAM_reg_128_191_0_2),
        .I2(O3[7]),
        .I3(n_1_RAM_reg_64_127_0_2),
        .I4(O3[6]),
        .I5(n_1_RAM_reg_0_63_0_2),
        .O(p_0_out_0[1]));
LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
     \gpr1.dout_i[2]_i_2 
       (.I0(n_2_RAM_reg_192_255_0_2),
        .I1(n_2_RAM_reg_128_191_0_2),
        .I2(O3[7]),
        .I3(n_2_RAM_reg_64_127_0_2),
        .I4(O3[6]),
        .I5(n_2_RAM_reg_0_63_0_2),
        .O(p_0_out_0[2]));
FDCE #(
    .INIT(1'b0)) 
     \gpr1.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(I3),
        .Q(p_0_out[0]));
FDCE #(
    .INIT(1'b0)) 
     \gpr1.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(I2),
        .Q(p_0_out[1]));
FDCE #(
    .INIT(1'b0)) 
     \gpr1.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(I1),
        .Q(p_0_out[2]));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module control_to_core_slave_axi_fifo_generator_ramfifo
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [47:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [47:0]din;
  input rst;

  wire RD_RST;
  wire WR_RST;
  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire \gwas.wsts/ram_full_i ;
  wire \n_0_gntv_or_sync_fifo.gcx.clkx ;
  wire \n_2_gntv_or_sync_fifo.gl0.wr ;
  wire \n_9_gntv_or_sync_fifo.gl0.wr ;
  wire [7:0]p_0_out;
  wire p_15_out;
  wire [7:0]p_1_out;
  wire [7:0]p_20_out;
  wire [7:0]p_8_out;
  wire [7:0]p_9_out;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire [2:1]rd_pntr_plus1;
  wire [1:0]rd_rst_i;
  wire rst;
  wire rst_d2;
  wire rst_full_gen_i;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire wr_en;
  wire [7:2]wr_pntr_plus2;
  wire [0:0]wr_rst_i;

control_to_core_slave_axi_clk_x_pntrs_54 \gntv_or_sync_fifo.gcx.clkx 
       (.D(rd_pntr_plus1),
        .I1(p_8_out),
        .I2(\n_2_gntv_or_sync_fifo.gl0.wr ),
        .I3(p_9_out),
        .I4(p_20_out),
        .I5(wr_rst_i),
        .I6(rd_rst_i[1]),
        .O1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_0_out),
        .WR_PNTR_RD(p_1_out),
        .ram_full_i(\gwas.wsts/ram_full_i ),
        .rd_clk(rd_clk),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
control_to_core_slave_axi_rd_logic_55 \gntv_or_sync_fifo.gl0.rd 
       (.E(p_15_out),
        .I1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .O1(rd_pntr_plus1),
        .O2(p_20_out),
        .Q({RD_RST,rd_rst_i[0]}),
        .WR_PNTR_RD(p_1_out),
        .empty(empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
control_to_core_slave_axi_wr_logic_56 \gntv_or_sync_fifo.gl0.wr 
       (.I1(WR_RST),
        .O1(\n_2_gntv_or_sync_fifo.gl0.wr ),
        .O2(p_8_out),
        .O3(p_9_out),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_0_out),
        .WEBWE(\n_9_gntv_or_sync_fifo.gl0.wr ),
        .full(full),
        .prog_full(prog_full),
        .ram_full_i(\gwas.wsts/ram_full_i ),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
control_to_core_slave_axi_memory \gntv_or_sync_fifo.mem 
       (.E(p_15_out),
        .O2(p_20_out),
        .O3(p_9_out),
        .Q(rd_rst_i[0]),
        .WEBWE(\n_9_gntv_or_sync_fifo.gl0.wr ),
        .din(din),
        .dout(dout),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
control_to_core_slave_axi_reset_blk_ramfifo_57 rstblk
       (.O1({RD_RST,rd_rst_i}),
        .Q({WR_RST,wr_rst_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module control_to_core_slave_axi_fifo_generator_ramfifo_80
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [47:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [47:0]din;
  input rst;

  wire RD_RST;
  wire WR_RST;
  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire \gwas.wsts/ram_full_i ;
  wire \n_0_gntv_or_sync_fifo.gcx.clkx ;
  wire \n_2_gntv_or_sync_fifo.gl0.wr ;
  wire \n_9_gntv_or_sync_fifo.gl0.wr ;
  wire [7:0]p_0_out;
  wire p_15_out;
  wire [7:0]p_1_out;
  wire [7:0]p_20_out;
  wire [7:0]p_8_out;
  wire [7:0]p_9_out;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire [2:1]rd_pntr_plus1;
  wire [1:0]rd_rst_i;
  wire rst;
  wire rst_d2;
  wire rst_full_gen_i;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire wr_en;
  wire [7:2]wr_pntr_plus2;
  wire [0:0]wr_rst_i;

control_to_core_slave_axi_clk_x_pntrs_81 \gntv_or_sync_fifo.gcx.clkx 
       (.D(rd_pntr_plus1),
        .I1(wr_pntr_plus2),
        .I2(p_8_out),
        .I3(\n_2_gntv_or_sync_fifo.gl0.wr ),
        .I4(p_9_out),
        .I5(p_20_out),
        .I6(wr_rst_i),
        .I7(rd_rst_i[1]),
        .O1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .O2(p_0_out),
        .Q(p_1_out),
        .ram_full_i(\gwas.wsts/ram_full_i ),
        .rd_clk(rd_clk),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
control_to_core_slave_axi_rd_logic_82 \gntv_or_sync_fifo.gl0.rd 
       (.E(p_15_out),
        .I1(p_1_out),
        .I2(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .O1(rd_pntr_plus1),
        .O2(p_20_out),
        .Q({RD_RST,rd_rst_i[0]}),
        .empty(empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
control_to_core_slave_axi_wr_logic_83 \gntv_or_sync_fifo.gl0.wr 
       (.I1(WR_RST),
        .O1(\n_2_gntv_or_sync_fifo.gl0.wr ),
        .O2(p_0_out),
        .O3(p_8_out),
        .O4(p_9_out),
        .Q(wr_pntr_plus2),
        .WEBWE(\n_9_gntv_or_sync_fifo.gl0.wr ),
        .full(full),
        .prog_full(prog_full),
        .ram_full_i(\gwas.wsts/ram_full_i ),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
control_to_core_slave_axi_memory_84 \gntv_or_sync_fifo.mem 
       (.E(p_15_out),
        .O2(p_20_out),
        .O4(p_9_out),
        .Q(rd_rst_i[0]),
        .WEBWE(\n_9_gntv_or_sync_fifo.gl0.wr ),
        .din(din),
        .dout(dout),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
control_to_core_slave_axi_reset_blk_ramfifo_85 rstblk
       (.O1({RD_RST,rd_rst_i}),
        .Q({WR_RST,wr_rst_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module control_to_core_slave_axi_fifo_generator_ramfifo__parameterized0
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    rd_clk,
    wr_clk,
    din,
    rst,
    wr_en);
  output [39:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input rd_clk;
  input wr_clk;
  input [39:0]din;
  input rst;
  input wr_en;

  wire RD_RST;
  wire WR_RST;
  wire [39:0]din;
  wire [39:0]dout;
  wire empty;
  wire full;
  wire [3:0]\gras.rsts/c1/v1_reg ;
  wire [3:0]\gwas.wsts/c1/v1_reg ;
  wire [3:0]\gwas.wsts/c2/v1_reg ;
  wire \n_0_gntv_or_sync_fifo.gcx.clkx ;
  wire [8:0]p_0_out;
  wire p_15_out;
  wire [8:0]p_1_out;
  wire [8:0]p_20_out;
  wire p_3_out;
  wire [7:0]p_8_out;
  wire [8:0]p_9_out;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire [7:0]rd_pntr_plus1;
  wire [1:0]rd_rst_i;
  wire rst;
  wire rst_d2;
  wire rst_full_gen_i;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire wr_en;
  wire [7:0]wr_pntr_plus2;
  wire [0:0]wr_rst_i;

control_to_core_slave_axi_clk_x_pntrs__parameterized0 \gntv_or_sync_fifo.gcx.clkx 
       (.I1(p_20_out),
        .I2(rd_pntr_plus1),
        .I3(p_8_out),
        .I4(wr_pntr_plus2),
        .I5(p_9_out),
        .I6(wr_rst_i),
        .I7(rd_rst_i[1]),
        .O1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .O2(p_0_out),
        .Q(p_1_out),
        .rd_clk(rd_clk),
        .v1_reg(\gras.rsts/c1/v1_reg ),
        .v1_reg_0(\gwas.wsts/c1/v1_reg ),
        .v1_reg_1(\gwas.wsts/c2/v1_reg ),
        .wr_clk(wr_clk));
control_to_core_slave_axi_rd_logic__parameterized0 \gntv_or_sync_fifo.gl0.rd 
       (.E(p_15_out),
        .I1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .I2(p_1_out),
        .O1(rd_pntr_plus1),
        .O2(p_20_out),
        .Q({RD_RST,rd_rst_i[0]}),
        .empty(empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\gras.rsts/c1/v1_reg ));
control_to_core_slave_axi_wr_logic__parameterized0 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_3_out),
        .I1(WR_RST),
        .O1(wr_pntr_plus2),
        .O2(p_0_out),
        .O3(p_9_out),
        .Q(p_8_out),
        .full(full),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .v1_reg(\gwas.wsts/c1/v1_reg ),
        .v1_reg_0(\gwas.wsts/c2/v1_reg ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
control_to_core_slave_axi_memory__parameterized0 \gntv_or_sync_fifo.mem 
       (.E(p_3_out),
        .I1(p_15_out),
        .O2(p_20_out),
        .O3(p_9_out),
        .Q(rd_rst_i[0]),
        .din(din),
        .dout(dout),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
control_to_core_slave_axi_reset_blk_ramfifo rstblk
       (.O1({RD_RST,rd_rst_i}),
        .Q({WR_RST,wr_rst_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module control_to_core_slave_axi_fifo_generator_ramfifo__parameterized1
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    rd_clk,
    wr_clk,
    din,
    rst,
    wr_en);
  output [35:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input rd_clk;
  input wr_clk;
  input [35:0]din;
  input rst;
  input wr_en;

  wire RD_RST;
  wire WR_RST;
  wire [35:0]din;
  wire [35:0]dout;
  wire empty;
  wire full;
  wire [3:0]\gras.rsts/c1/v1_reg ;
  wire [3:0]\gwas.wsts/c1/v1_reg ;
  wire [3:0]\gwas.wsts/c2/v1_reg ;
  wire \n_0_gntv_or_sync_fifo.gcx.clkx ;
  wire [8:0]p_0_out;
  wire p_15_out;
  wire [8:0]p_1_out;
  wire [8:0]p_20_out;
  wire p_3_out;
  wire [7:0]p_8_out;
  wire [8:0]p_9_out;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire [7:0]rd_pntr_plus1;
  wire [1:0]rd_rst_i;
  wire rst;
  wire rst_d2;
  wire rst_full_gen_i;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire wr_en;
  wire [7:0]wr_pntr_plus2;
  wire [0:0]wr_rst_i;

control_to_core_slave_axi_clk_x_pntrs__parameterized0_15 \gntv_or_sync_fifo.gcx.clkx 
       (.I1(rd_pntr_plus1),
        .I2(p_8_out),
        .I3(wr_pntr_plus2),
        .I4(p_9_out),
        .I5(wr_rst_i),
        .I6(rd_rst_i[1]),
        .O1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .Q(p_20_out),
        .RD_PNTR_WR(p_0_out),
        .WR_PNTR_RD(p_1_out),
        .rd_clk(rd_clk),
        .v1_reg(\gras.rsts/c1/v1_reg ),
        .v1_reg_0(\gwas.wsts/c1/v1_reg ),
        .v1_reg_1(\gwas.wsts/c2/v1_reg ),
        .wr_clk(wr_clk));
control_to_core_slave_axi_rd_logic__parameterized0_16 \gntv_or_sync_fifo.gl0.rd 
       (.E(p_15_out),
        .I1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .O1(rd_pntr_plus1),
        .O2(p_20_out),
        .Q({RD_RST,rd_rst_i[0]}),
        .WR_PNTR_RD(p_1_out),
        .empty(empty),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .v1_reg(\gras.rsts/c1/v1_reg ));
control_to_core_slave_axi_wr_logic__parameterized0_17 \gntv_or_sync_fifo.gl0.wr 
       (.E(p_3_out),
        .I1(WR_RST),
        .O1(wr_pntr_plus2),
        .O2(p_9_out),
        .Q(p_8_out),
        .RD_PNTR_WR(p_0_out),
        .full(full),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .v1_reg(\gwas.wsts/c1/v1_reg ),
        .v1_reg_0(\gwas.wsts/c2/v1_reg ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
control_to_core_slave_axi_memory__parameterized1 \gntv_or_sync_fifo.mem 
       (.E(p_3_out),
        .I1(p_9_out),
        .I2(p_15_out),
        .O2(p_20_out),
        .Q(rd_rst_i[0]),
        .din(din),
        .dout(dout),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
control_to_core_slave_axi_reset_blk_ramfifo_18 rstblk
       (.O1({RD_RST,rd_rst_i}),
        .Q({WR_RST,wr_rst_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module control_to_core_slave_axi_fifo_generator_ramfifo__parameterized2
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    rst,
    din);
  output [2:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input rst;
  input [2:0]din;

  wire RD_RST;
  wire WR_RST;
  wire [2:0]din;
  wire [2:0]dout;
  wire empty;
  wire full;
  wire [2:0]\gdm.dm/p_0_out ;
  wire [0:0]\gr1.rfwft/curr_fwft_state ;
  wire \gwas.wsts/ram_full_i ;
  wire \n_0_gntv_or_sync_fifo.gcx.clkx ;
  wire \n_13_gntv_or_sync_fifo.gl0.rd ;
  wire \n_14_gntv_or_sync_fifo.gl0.rd ;
  wire \n_15_gntv_or_sync_fifo.gl0.rd ;
  wire \n_17_gntv_or_sync_fifo.gl0.wr ;
  wire \n_26_gntv_or_sync_fifo.gl0.wr ;
  wire \n_27_gntv_or_sync_fifo.gl0.wr ;
  wire \n_28_gntv_or_sync_fifo.gl0.wr ;
  wire \n_2_gntv_or_sync_fifo.gl0.wr ;
  wire \n_3_gntv_or_sync_fifo.gl0.rd ;
  wire [7:0]p_0_out;
  wire [2:0]p_0_out_0;
  wire [7:0]p_1_out;
  wire [7:0]p_20_out;
  wire [7:0]p_8_out;
  wire [7:0]p_9_out;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire [2:1]rd_pntr_plus1;
  wire [1:0]rd_rst_i;
  wire rst;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_en;
  wire [7:2]wr_pntr_plus2;
  wire [0:0]wr_rst_i;

control_to_core_slave_axi_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.D(rd_pntr_plus1),
        .I1(p_8_out),
        .I2(\n_2_gntv_or_sync_fifo.gl0.wr ),
        .I3(p_9_out),
        .I4(p_20_out),
        .I5(wr_rst_i),
        .I6(rd_rst_i[1]),
        .O1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_0_out),
        .WR_PNTR_RD(p_1_out),
        .ram_full_i(\gwas.wsts/ram_full_i ),
        .rd_clk(rd_clk),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
control_to_core_slave_axi_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.I1(\n_0_gntv_or_sync_fifo.gcx.clkx ),
        .O1(rd_pntr_plus1),
        .O2({\n_3_gntv_or_sync_fifo.gl0.rd ,\gr1.rfwft/curr_fwft_state }),
        .O3(p_20_out),
        .O4(\n_13_gntv_or_sync_fifo.gl0.rd ),
        .O5(\n_14_gntv_or_sync_fifo.gl0.rd ),
        .O6(\n_15_gntv_or_sync_fifo.gl0.rd ),
        .Q(RD_RST),
        .WR_PNTR_RD(p_1_out),
        .empty(empty),
        .p_0_out(\gdm.dm/p_0_out ),
        .p_0_out_0(p_0_out_0),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
control_to_core_slave_axi_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.I1(WR_RST),
        .O1(\n_2_gntv_or_sync_fifo.gl0.wr ),
        .O2(p_8_out),
        .O3(\n_17_gntv_or_sync_fifo.gl0.wr ),
        .O4(p_9_out),
        .O5(\n_26_gntv_or_sync_fifo.gl0.wr ),
        .O6(\n_27_gntv_or_sync_fifo.gl0.wr ),
        .O7(\n_28_gntv_or_sync_fifo.gl0.wr ),
        .Q(wr_pntr_plus2),
        .RD_PNTR_WR(p_0_out),
        .full(full),
        .prog_full(prog_full),
        .ram_full_i(\gwas.wsts/ram_full_i ),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
control_to_core_slave_axi_memory__parameterized2 \gntv_or_sync_fifo.mem 
       (.I1(\n_13_gntv_or_sync_fifo.gl0.rd ),
        .I2(\n_14_gntv_or_sync_fifo.gl0.rd ),
        .I3(\n_15_gntv_or_sync_fifo.gl0.rd ),
        .I4(\n_17_gntv_or_sync_fifo.gl0.wr ),
        .I5(\n_26_gntv_or_sync_fifo.gl0.wr ),
        .I6(\n_27_gntv_or_sync_fifo.gl0.wr ),
        .I7(\n_28_gntv_or_sync_fifo.gl0.wr ),
        .O2({\n_3_gntv_or_sync_fifo.gl0.rd ,\gr1.rfwft/curr_fwft_state }),
        .O3(p_20_out),
        .O4(p_9_out[5:0]),
        .Q(rd_rst_i[0]),
        .din(din),
        .dout(dout),
        .p_0_out(p_0_out_0),
        .p_0_out_0(\gdm.dm/p_0_out ),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .wr_clk(wr_clk));
control_to_core_slave_axi_reset_blk_ramfifo__parameterized0 rstblk
       (.O1({RD_RST,rd_rst_i}),
        .Q({WR_RST,wr_rst_i}),
        .rd_clk(rd_clk),
        .rst(rst),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module control_to_core_slave_axi_fifo_generator_top
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [47:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [47:0]din;
  input rst;

  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_ramfifo \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module control_to_core_slave_axi_fifo_generator_top_79
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [47:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [47:0]din;
  input rst;

  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_ramfifo_80 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module control_to_core_slave_axi_fifo_generator_top__parameterized0
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    rd_clk,
    wr_clk,
    din,
    rst,
    wr_en);
  output [39:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input rd_clk;
  input wr_clk;
  input [39:0]din;
  input rst;
  input wr_en;

  wire [39:0]din;
  wire [39:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_ramfifo__parameterized0 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module control_to_core_slave_axi_fifo_generator_top__parameterized1
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    rd_clk,
    wr_clk,
    din,
    rst,
    wr_en);
  output [35:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input rd_clk;
  input wr_clk;
  input [35:0]din;
  input rst;
  input wr_en;

  wire [35:0]din;
  wire [35:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_ramfifo__parameterized1 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module control_to_core_slave_axi_fifo_generator_top__parameterized2
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    rst,
    din);
  output [2:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input rst;
  input [2:0]din;

  wire [2:0]din;
  wire [2:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_ramfifo__parameterized2 \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) (* C_DATA_COUNT_WIDTH = "8" *) 
(* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "48" *) (* C_DOUT_RST_VAL = "0" *) 
(* C_DOUT_WIDTH = "48" *) (* C_ENABLE_RLOCS = "0" *) (* C_FAMILY = "virtex7" *) 
(* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) (* C_HAS_ALMOST_FULL = "0" *) 
(* C_HAS_BACKUP = "0" *) (* C_HAS_DATA_COUNT = "0" *) (* C_HAS_INT_CLK = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SRST = "0" *) 
(* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) (* C_HAS_WR_ACK = "0" *) 
(* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) (* C_IMPLEMENTATION_TYPE = "2" *) 
(* C_INIT_WR_PNTR_VAL = "0" *) (* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_PRELOAD_LATENCY = "0" *) 
(* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x72" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
(* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) (* C_PROG_FULL_THRESH_ASSERT_VAL = "128" *) 
(* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) (* C_PROG_FULL_TYPE = "1" *) (* C_RD_DATA_COUNT_WIDTH = "8" *) 
(* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "8" *) 
(* C_UNDERFLOW_LOW = "0" *) (* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) 
(* C_USE_EMBEDDED_REG = "0" *) (* C_USE_PIPELINE_REG = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_VALID_LOW = "0" *) 
(* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) (* C_WR_DEPTH = "256" *) 
(* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) (* C_WR_RESPONSE_LATENCY = "1" *) 
(* C_MSGON_VAL = "1" *) (* C_ENABLE_RST_SYNC = "1" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_SYNCHRONIZER_STAGE = "6" *) (* C_INTERFACE_TYPE = "0" *) (* C_AXI_TYPE = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_MASTER_CE = "0" *) (* C_ADD_NGC_CONSTRAINT = "0" *) (* C_USE_COMMON_OVERFLOW = "0" *) 
(* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) (* C_AXI_ID_WIDTH = "4" *) 
(* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_LEN_WIDTH = "4" *) 
(* C_AXI_LOCK_WIDTH = "4" *) (* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_AWUSER = "0" *) 
(* C_HAS_AXI_WUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) (* C_HAS_AXI_ARUSER = "0" *) 
(* C_HAS_AXI_RUSER = "0" *) (* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) 
(* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TUSER = "0" *) (* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_AXIS_TDATA_WIDTH = "64" *) 
(* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "4" *) (* C_AXIS_TUSER_WIDTH = "4" *) 
(* C_AXIS_TSTRB_WIDTH = "4" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_WACH_TYPE = "0" *) 
(* C_WDCH_TYPE = "0" *) (* C_WRCH_TYPE = "0" *) (* C_RACH_TYPE = "0" *) 
(* C_RDCH_TYPE = "0" *) (* C_AXIS_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_APPLICATION_TYPE_WACH = "0" *) 
(* C_APPLICATION_TYPE_WDCH = "0" *) (* C_APPLICATION_TYPE_WRCH = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_ECC_RACH = "0" *) 
(* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
(* C_ERROR_INJECTION_TYPE_RDCH = "0" *) (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_DIN_WIDTH_WACH = "32" *) 
(* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) (* C_DIN_WIDTH_RACH = "32" *) 
(* C_DIN_WIDTH_RDCH = "64" *) (* C_DIN_WIDTH_AXIS = "1" *) (* C_WR_DEPTH_WACH = "16" *) 
(* C_WR_DEPTH_WDCH = "1024" *) (* C_WR_DEPTH_WRCH = "16" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_PNTR_WIDTH_WACH = "4" *) 
(* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) 
(* C_WR_PNTR_WIDTH_RDCH = "10" *) (* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) 
(* C_HAS_DATA_COUNTS_WDCH = "0" *) (* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_PROG_FLAGS_RACH = "0" *) 
(* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) (* C_PROG_FULL_TYPE_WACH = "0" *) 
(* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) 
(* C_PROG_FULL_TYPE_RDCH = "0" *) (* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
(* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
(* C_PROG_EMPTY_TYPE_RDCH = "0" *) (* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_REG_SLICE_MODE_WACH = "0" *) 
(* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) 
(* C_REG_SLICE_MODE_RDCH = "0" *) (* C_REG_SLICE_MODE_AXIS = "0" *) (* ORIG_REF_NAME = "fifo_generator_v12_0" *) 
module control_to_core_slave_axi_fifo_generator_v12_0
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [47:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [47:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [3:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [3:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [3:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [3:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axi_ar_injectdbiterr;
  wire axi_ar_injectsbiterr;
  wire [3:0]axi_ar_prog_empty_thresh;
  wire [3:0]axi_ar_prog_full_thresh;
  wire axi_aw_injectdbiterr;
  wire axi_aw_injectsbiterr;
  wire [3:0]axi_aw_prog_empty_thresh;
  wire [3:0]axi_aw_prog_full_thresh;
  wire axi_b_injectdbiterr;
  wire axi_b_injectsbiterr;
  wire [3:0]axi_b_prog_empty_thresh;
  wire [3:0]axi_b_prog_full_thresh;
  wire axi_r_injectdbiterr;
  wire axi_r_injectsbiterr;
  wire [9:0]axi_r_prog_empty_thresh;
  wire [9:0]axi_r_prog_full_thresh;
  wire axi_w_injectdbiterr;
  wire axi_w_injectsbiterr;
  wire [9:0]axi_w_prog_empty_thresh;
  wire [9:0]axi_w_prog_full_thresh;
  wire axis_injectdbiterr;
  wire axis_injectsbiterr;
  wire [9:0]axis_prog_empty_thresh;
  wire [9:0]axis_prog_full_thresh;
  wire backup;
  wire backup_marker;
  wire clk;
  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire injectdbiterr;
  wire injectsbiterr;
  wire int_clk;
  wire m_aclk;
  wire m_aclk_en;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [3:0]m_axi_bid;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_buser;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [3:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_ruser;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axis_tready;
  wire [7:0]prog_empty_thresh;
  wire [7:0]prog_empty_thresh_assert;
  wire [7:0]prog_empty_thresh_negate;
  wire prog_full;
  wire [7:0]prog_full_thresh;
  wire [7:0]prog_full_thresh_assert;
  wire [7:0]prog_full_thresh_negate;
  wire rd_clk;
  wire rd_en;
  wire rd_rst;
  wire rst;
  wire s_aclk;
  wire s_aclk_en;
  wire s_aresetn;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [3:0]s_axi_arid;
  wire [3:0]s_axi_arlen;
  wire [3:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [3:0]s_axi_awid;
  wire [3:0]s_axi_awlen;
  wire [3:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire [3:0]s_axi_wid;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire [0:0]s_axi_wuser;
  wire s_axi_wvalid;
  wire [63:0]s_axis_tdata;
  wire [3:0]s_axis_tdest;
  wire [7:0]s_axis_tid;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire [3:0]s_axis_tstrb;
  wire [3:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire srst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[3] = \<const0> ;
  assign m_axi_arlock[2] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[3] = \<const0> ;
  assign m_axi_awlock[2] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
GND GND
       (.G(\<const0> ));
VCC VCC
       (.P(\<const1> ));
control_to_core_slave_axi_fifo_generator_v12_0_synth_78 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "8" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "48" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "48" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_FAMILY = "virtex7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_BACKUP = "0" *) (* C_HAS_DATA_COUNT = "0" *) 
(* C_HAS_INT_CLK = "0" *) (* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) 
(* C_HAS_RD_DATA_COUNT = "0" *) (* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_MEMORY_TYPE = "1" *) 
(* C_MIF_FILE_NAME = "BlankString" *) (* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "128" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_RD_DATA_COUNT_WIDTH = "8" *) (* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) 
(* C_RD_PNTR_WIDTH = "8" *) (* C_UNDERFLOW_LOW = "0" *) (* C_USE_DOUT_RST = "1" *) 
(* C_USE_ECC = "0" *) (* C_USE_EMBEDDED_REG = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_POWER_SAVING_MODE = "0" *) (* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) 
(* C_WR_DEPTH = "256" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* C_MSGON_VAL = "1" *) (* C_ENABLE_RST_SYNC = "1" *) 
(* C_ERROR_INJECTION_TYPE = "0" *) (* C_SYNCHRONIZER_STAGE = "6" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_AXI_TYPE = "0" *) (* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) 
(* C_HAS_SLAVE_CE = "0" *) (* C_HAS_MASTER_CE = "0" *) (* C_ADD_NGC_CONSTRAINT = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_AXI_ID_WIDTH = "4" *) (* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_DATA_WIDTH = "64" *) 
(* C_AXI_LEN_WIDTH = "4" *) (* C_AXI_LOCK_WIDTH = "4" *) (* C_HAS_AXI_ID = "0" *) 
(* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_RUSER = "0" *) (* C_AXI_ARUSER_WIDTH = "1" *) 
(* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_WUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_RUSER_WIDTH = "1" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TID = "0" *) 
(* C_HAS_AXIS_TDEST = "0" *) (* C_HAS_AXIS_TUSER = "0" *) (* C_HAS_AXIS_TREADY = "1" *) 
(* C_HAS_AXIS_TLAST = "0" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) 
(* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) (* C_AXIS_TKEEP_WIDTH = "4" *) 
(* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) (* C_WRCH_TYPE = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_AXIS_TYPE = "0" *) 
(* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RACH = "1" *) (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
(* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) (* C_APPLICATION_TYPE_WRCH = "0" *) 
(* C_APPLICATION_TYPE_RACH = "0" *) (* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
(* C_USE_ECC_WACH = "0" *) (* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) (* C_DIN_WIDTH_AXIS = "1" *) 
(* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) (* C_WR_DEPTH_WRCH = "16" *) 
(* C_WR_DEPTH_RACH = "16" *) (* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
(* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
(* C_HAS_DATA_COUNTS_RACH = "0" *) (* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_WACH = "0" *) (* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) (* C_PROG_FULL_TYPE_AXIS = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) (* C_REG_SLICE_MODE_AXIS = "0" *) 
module control_to_core_slave_axi_fifo_generator_v12_0__2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [47:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [47:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [3:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [3:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [3:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [3:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axi_ar_injectdbiterr;
  wire axi_ar_injectsbiterr;
  wire [3:0]axi_ar_prog_empty_thresh;
  wire [3:0]axi_ar_prog_full_thresh;
  wire axi_aw_injectdbiterr;
  wire axi_aw_injectsbiterr;
  wire [3:0]axi_aw_prog_empty_thresh;
  wire [3:0]axi_aw_prog_full_thresh;
  wire axi_b_injectdbiterr;
  wire axi_b_injectsbiterr;
  wire [3:0]axi_b_prog_empty_thresh;
  wire [3:0]axi_b_prog_full_thresh;
  wire axi_r_injectdbiterr;
  wire axi_r_injectsbiterr;
  wire [9:0]axi_r_prog_empty_thresh;
  wire [9:0]axi_r_prog_full_thresh;
  wire axi_w_injectdbiterr;
  wire axi_w_injectsbiterr;
  wire [9:0]axi_w_prog_empty_thresh;
  wire [9:0]axi_w_prog_full_thresh;
  wire axis_injectdbiterr;
  wire axis_injectsbiterr;
  wire [9:0]axis_prog_empty_thresh;
  wire [9:0]axis_prog_full_thresh;
  wire backup;
  wire backup_marker;
  wire clk;
  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire injectdbiterr;
  wire injectsbiterr;
  wire int_clk;
  wire m_aclk;
  wire m_aclk_en;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [3:0]m_axi_bid;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_buser;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [3:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_ruser;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axis_tready;
  wire [7:0]prog_empty_thresh;
  wire [7:0]prog_empty_thresh_assert;
  wire [7:0]prog_empty_thresh_negate;
  wire prog_full;
  wire [7:0]prog_full_thresh;
  wire [7:0]prog_full_thresh_assert;
  wire [7:0]prog_full_thresh_negate;
  wire rd_clk;
  wire rd_en;
  wire rd_rst;
  wire rst;
  wire s_aclk;
  wire s_aclk_en;
  wire s_aresetn;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [3:0]s_axi_arid;
  wire [3:0]s_axi_arlen;
  wire [3:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [3:0]s_axi_awid;
  wire [3:0]s_axi_awlen;
  wire [3:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire [3:0]s_axi_wid;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire [0:0]s_axi_wuser;
  wire s_axi_wvalid;
  wire [63:0]s_axis_tdata;
  wire [3:0]s_axis_tdest;
  wire [7:0]s_axis_tid;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire [3:0]s_axis_tstrb;
  wire [3:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire srst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[3] = \<const0> ;
  assign m_axi_arlock[2] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[3] = \<const0> ;
  assign m_axi_awlock[2] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
GND GND
       (.G(\<const0> ));
VCC VCC
       (.P(\<const1> ));
control_to_core_slave_axi_fifo_generator_v12_0_synth inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "9" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "40" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "40" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_FAMILY = "virtex7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_BACKUP = "0" *) (* C_HAS_DATA_COUNT = "0" *) 
(* C_HAS_INT_CLK = "0" *) (* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) 
(* C_HAS_RD_DATA_COUNT = "0" *) (* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_MEMORY_TYPE = "1" *) 
(* C_MIF_FILE_NAME = "BlankString" *) (* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "384" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_RD_DATA_COUNT_WIDTH = "9" *) (* C_RD_DEPTH = "512" *) (* C_RD_FREQ = "1" *) 
(* C_RD_PNTR_WIDTH = "9" *) (* C_UNDERFLOW_LOW = "0" *) (* C_USE_DOUT_RST = "1" *) 
(* C_USE_ECC = "0" *) (* C_USE_EMBEDDED_REG = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_POWER_SAVING_MODE = "0" *) (* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "9" *) 
(* C_WR_DEPTH = "512" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "9" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* C_MSGON_VAL = "1" *) (* C_ENABLE_RST_SYNC = "1" *) 
(* C_ERROR_INJECTION_TYPE = "0" *) (* C_SYNCHRONIZER_STAGE = "6" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_AXI_TYPE = "0" *) (* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) 
(* C_HAS_SLAVE_CE = "0" *) (* C_HAS_MASTER_CE = "0" *) (* C_ADD_NGC_CONSTRAINT = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_AXI_ID_WIDTH = "4" *) (* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_DATA_WIDTH = "64" *) 
(* C_AXI_LEN_WIDTH = "4" *) (* C_AXI_LOCK_WIDTH = "4" *) (* C_HAS_AXI_ID = "0" *) 
(* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_RUSER = "0" *) (* C_AXI_ARUSER_WIDTH = "1" *) 
(* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_WUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_RUSER_WIDTH = "1" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TID = "0" *) 
(* C_HAS_AXIS_TDEST = "0" *) (* C_HAS_AXIS_TUSER = "0" *) (* C_HAS_AXIS_TREADY = "1" *) 
(* C_HAS_AXIS_TLAST = "0" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) 
(* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) (* C_AXIS_TKEEP_WIDTH = "4" *) 
(* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) (* C_WRCH_TYPE = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_AXIS_TYPE = "0" *) 
(* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RACH = "1" *) (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
(* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) (* C_APPLICATION_TYPE_WRCH = "0" *) 
(* C_APPLICATION_TYPE_RACH = "0" *) (* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
(* C_USE_ECC_WACH = "0" *) (* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) (* C_DIN_WIDTH_AXIS = "1" *) 
(* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) (* C_WR_DEPTH_WRCH = "16" *) 
(* C_WR_DEPTH_RACH = "16" *) (* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
(* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
(* C_HAS_DATA_COUNTS_RACH = "0" *) (* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_WACH = "0" *) (* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) (* C_PROG_FULL_TYPE_AXIS = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) (* C_REG_SLICE_MODE_AXIS = "0" *) 
module control_to_core_slave_axi_fifo_generator_v12_0__parameterized0
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [39:0]din;
  input wr_en;
  input rd_en;
  input [8:0]prog_empty_thresh;
  input [8:0]prog_empty_thresh_assert;
  input [8:0]prog_empty_thresh_negate;
  input [8:0]prog_full_thresh;
  input [8:0]prog_full_thresh_assert;
  input [8:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [39:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [8:0]data_count;
  output [8:0]rd_data_count;
  output [8:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [3:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [3:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [3:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [3:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axi_ar_injectdbiterr;
  wire axi_ar_injectsbiterr;
  wire [3:0]axi_ar_prog_empty_thresh;
  wire [3:0]axi_ar_prog_full_thresh;
  wire axi_aw_injectdbiterr;
  wire axi_aw_injectsbiterr;
  wire [3:0]axi_aw_prog_empty_thresh;
  wire [3:0]axi_aw_prog_full_thresh;
  wire axi_b_injectdbiterr;
  wire axi_b_injectsbiterr;
  wire [3:0]axi_b_prog_empty_thresh;
  wire [3:0]axi_b_prog_full_thresh;
  wire axi_r_injectdbiterr;
  wire axi_r_injectsbiterr;
  wire [9:0]axi_r_prog_empty_thresh;
  wire [9:0]axi_r_prog_full_thresh;
  wire axi_w_injectdbiterr;
  wire axi_w_injectsbiterr;
  wire [9:0]axi_w_prog_empty_thresh;
  wire [9:0]axi_w_prog_full_thresh;
  wire axis_injectdbiterr;
  wire axis_injectsbiterr;
  wire [9:0]axis_prog_empty_thresh;
  wire [9:0]axis_prog_full_thresh;
  wire backup;
  wire backup_marker;
  wire clk;
  wire [39:0]din;
  wire [39:0]dout;
  wire empty;
  wire full;
  wire injectdbiterr;
  wire injectsbiterr;
  wire int_clk;
  wire m_aclk;
  wire m_aclk_en;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [3:0]m_axi_bid;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_buser;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [3:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_ruser;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axis_tready;
  wire [8:0]prog_empty_thresh;
  wire [8:0]prog_empty_thresh_assert;
  wire [8:0]prog_empty_thresh_negate;
  wire prog_full;
  wire [8:0]prog_full_thresh;
  wire [8:0]prog_full_thresh_assert;
  wire [8:0]prog_full_thresh_negate;
  wire rd_clk;
  wire rd_en;
  wire rd_rst;
  wire rst;
  wire s_aclk;
  wire s_aclk_en;
  wire s_aresetn;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [3:0]s_axi_arid;
  wire [3:0]s_axi_arlen;
  wire [3:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [3:0]s_axi_awid;
  wire [3:0]s_axi_awlen;
  wire [3:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire [3:0]s_axi_wid;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire [0:0]s_axi_wuser;
  wire s_axi_wvalid;
  wire [63:0]s_axis_tdata;
  wire [3:0]s_axis_tdest;
  wire [7:0]s_axis_tid;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire [3:0]s_axis_tstrb;
  wire [3:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire srst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[3] = \<const0> ;
  assign m_axi_arlock[2] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[3] = \<const0> ;
  assign m_axi_awlock[2] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
GND GND
       (.G(\<const0> ));
VCC VCC
       (.P(\<const1> ));
control_to_core_slave_axi_fifo_generator_v12_0_synth__parameterized0 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "9" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "36" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "36" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_FAMILY = "virtex7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_BACKUP = "0" *) (* C_HAS_DATA_COUNT = "0" *) 
(* C_HAS_INT_CLK = "0" *) (* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) 
(* C_HAS_RD_DATA_COUNT = "0" *) (* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_MEMORY_TYPE = "1" *) 
(* C_MIF_FILE_NAME = "BlankString" *) (* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "384" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_RD_DATA_COUNT_WIDTH = "9" *) (* C_RD_DEPTH = "512" *) (* C_RD_FREQ = "1" *) 
(* C_RD_PNTR_WIDTH = "9" *) (* C_UNDERFLOW_LOW = "0" *) (* C_USE_DOUT_RST = "1" *) 
(* C_USE_ECC = "0" *) (* C_USE_EMBEDDED_REG = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_POWER_SAVING_MODE = "0" *) (* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "9" *) 
(* C_WR_DEPTH = "512" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "9" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* C_MSGON_VAL = "1" *) (* C_ENABLE_RST_SYNC = "1" *) 
(* C_ERROR_INJECTION_TYPE = "0" *) (* C_SYNCHRONIZER_STAGE = "6" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_AXI_TYPE = "0" *) (* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) 
(* C_HAS_SLAVE_CE = "0" *) (* C_HAS_MASTER_CE = "0" *) (* C_ADD_NGC_CONSTRAINT = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_AXI_ID_WIDTH = "4" *) (* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_DATA_WIDTH = "64" *) 
(* C_AXI_LEN_WIDTH = "4" *) (* C_AXI_LOCK_WIDTH = "4" *) (* C_HAS_AXI_ID = "0" *) 
(* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_RUSER = "0" *) (* C_AXI_ARUSER_WIDTH = "1" *) 
(* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_WUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_RUSER_WIDTH = "1" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TID = "0" *) 
(* C_HAS_AXIS_TDEST = "0" *) (* C_HAS_AXIS_TUSER = "0" *) (* C_HAS_AXIS_TREADY = "1" *) 
(* C_HAS_AXIS_TLAST = "0" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) 
(* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) (* C_AXIS_TKEEP_WIDTH = "4" *) 
(* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) (* C_WRCH_TYPE = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_AXIS_TYPE = "0" *) 
(* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RACH = "1" *) (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
(* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) (* C_APPLICATION_TYPE_WRCH = "0" *) 
(* C_APPLICATION_TYPE_RACH = "0" *) (* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
(* C_USE_ECC_WACH = "0" *) (* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) (* C_DIN_WIDTH_AXIS = "1" *) 
(* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) (* C_WR_DEPTH_WRCH = "16" *) 
(* C_WR_DEPTH_RACH = "16" *) (* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
(* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
(* C_HAS_DATA_COUNTS_RACH = "0" *) (* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_WACH = "0" *) (* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) (* C_PROG_FULL_TYPE_AXIS = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) (* C_REG_SLICE_MODE_AXIS = "0" *) 
module control_to_core_slave_axi_fifo_generator_v12_0__parameterized1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [35:0]din;
  input wr_en;
  input rd_en;
  input [8:0]prog_empty_thresh;
  input [8:0]prog_empty_thresh_assert;
  input [8:0]prog_empty_thresh_negate;
  input [8:0]prog_full_thresh;
  input [8:0]prog_full_thresh_assert;
  input [8:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [35:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [8:0]data_count;
  output [8:0]rd_data_count;
  output [8:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [3:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [3:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [3:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [3:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axi_ar_injectdbiterr;
  wire axi_ar_injectsbiterr;
  wire [3:0]axi_ar_prog_empty_thresh;
  wire [3:0]axi_ar_prog_full_thresh;
  wire axi_aw_injectdbiterr;
  wire axi_aw_injectsbiterr;
  wire [3:0]axi_aw_prog_empty_thresh;
  wire [3:0]axi_aw_prog_full_thresh;
  wire axi_b_injectdbiterr;
  wire axi_b_injectsbiterr;
  wire [3:0]axi_b_prog_empty_thresh;
  wire [3:0]axi_b_prog_full_thresh;
  wire axi_r_injectdbiterr;
  wire axi_r_injectsbiterr;
  wire [9:0]axi_r_prog_empty_thresh;
  wire [9:0]axi_r_prog_full_thresh;
  wire axi_w_injectdbiterr;
  wire axi_w_injectsbiterr;
  wire [9:0]axi_w_prog_empty_thresh;
  wire [9:0]axi_w_prog_full_thresh;
  wire axis_injectdbiterr;
  wire axis_injectsbiterr;
  wire [9:0]axis_prog_empty_thresh;
  wire [9:0]axis_prog_full_thresh;
  wire backup;
  wire backup_marker;
  wire clk;
  wire [35:0]din;
  wire [35:0]dout;
  wire empty;
  wire full;
  wire injectdbiterr;
  wire injectsbiterr;
  wire int_clk;
  wire m_aclk;
  wire m_aclk_en;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [3:0]m_axi_bid;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_buser;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [3:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_ruser;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axis_tready;
  wire [8:0]prog_empty_thresh;
  wire [8:0]prog_empty_thresh_assert;
  wire [8:0]prog_empty_thresh_negate;
  wire prog_full;
  wire [8:0]prog_full_thresh;
  wire [8:0]prog_full_thresh_assert;
  wire [8:0]prog_full_thresh_negate;
  wire rd_clk;
  wire rd_en;
  wire rd_rst;
  wire rst;
  wire s_aclk;
  wire s_aclk_en;
  wire s_aresetn;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [3:0]s_axi_arid;
  wire [3:0]s_axi_arlen;
  wire [3:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [3:0]s_axi_awid;
  wire [3:0]s_axi_awlen;
  wire [3:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire [3:0]s_axi_wid;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire [0:0]s_axi_wuser;
  wire s_axi_wvalid;
  wire [63:0]s_axis_tdata;
  wire [3:0]s_axis_tdest;
  wire [7:0]s_axis_tid;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire [3:0]s_axis_tstrb;
  wire [3:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire srst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[3] = \<const0> ;
  assign m_axi_arlock[2] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[3] = \<const0> ;
  assign m_axi_awlock[2] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
GND GND
       (.G(\<const0> ));
VCC VCC
       (.P(\<const1> ));
control_to_core_slave_axi_fifo_generator_v12_0_synth__parameterized1 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "8" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "3" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "3" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_FAMILY = "virtex7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_BACKUP = "0" *) (* C_HAS_DATA_COUNT = "0" *) 
(* C_HAS_INT_CLK = "0" *) (* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) 
(* C_HAS_RD_DATA_COUNT = "0" *) (* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_MEMORY_TYPE = "2" *) 
(* C_MIF_FILE_NAME = "BlankString" *) (* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x72" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "128" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "254" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_RD_DATA_COUNT_WIDTH = "8" *) (* C_RD_DEPTH = "256" *) (* C_RD_FREQ = "1" *) 
(* C_RD_PNTR_WIDTH = "8" *) (* C_UNDERFLOW_LOW = "0" *) (* C_USE_DOUT_RST = "1" *) 
(* C_USE_ECC = "0" *) (* C_USE_EMBEDDED_REG = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_POWER_SAVING_MODE = "0" *) (* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "8" *) 
(* C_WR_DEPTH = "256" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "8" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* C_MSGON_VAL = "1" *) (* C_ENABLE_RST_SYNC = "1" *) 
(* C_ERROR_INJECTION_TYPE = "0" *) (* C_SYNCHRONIZER_STAGE = "6" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_AXI_TYPE = "0" *) (* C_HAS_AXI_WR_CHANNEL = "0" *) (* C_HAS_AXI_RD_CHANNEL = "0" *) 
(* C_HAS_SLAVE_CE = "0" *) (* C_HAS_MASTER_CE = "0" *) (* C_ADD_NGC_CONSTRAINT = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_AXI_ID_WIDTH = "4" *) (* C_AXI_ADDR_WIDTH = "32" *) (* C_AXI_DATA_WIDTH = "64" *) 
(* C_AXI_LEN_WIDTH = "4" *) (* C_AXI_LOCK_WIDTH = "4" *) (* C_HAS_AXI_ID = "0" *) 
(* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_RUSER = "0" *) (* C_AXI_ARUSER_WIDTH = "1" *) 
(* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_WUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_RUSER_WIDTH = "1" *) (* C_HAS_AXIS_TDATA = "0" *) (* C_HAS_AXIS_TID = "0" *) 
(* C_HAS_AXIS_TDEST = "0" *) (* C_HAS_AXIS_TUSER = "0" *) (* C_HAS_AXIS_TREADY = "1" *) 
(* C_HAS_AXIS_TLAST = "0" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) 
(* C_AXIS_TDATA_WIDTH = "64" *) (* C_AXIS_TID_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) (* C_AXIS_TKEEP_WIDTH = "4" *) 
(* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) (* C_WRCH_TYPE = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_AXIS_TYPE = "0" *) 
(* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RACH = "1" *) (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
(* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) (* C_APPLICATION_TYPE_WRCH = "0" *) 
(* C_APPLICATION_TYPE_RACH = "0" *) (* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "512x36" *) (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
(* C_USE_ECC_WACH = "0" *) (* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) (* C_DIN_WIDTH_AXIS = "1" *) 
(* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) (* C_WR_DEPTH_WRCH = "16" *) 
(* C_WR_DEPTH_RACH = "16" *) (* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_AXIS = "1024" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
(* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
(* C_HAS_DATA_COUNTS_RACH = "0" *) (* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_WACH = "0" *) (* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) (* C_PROG_FULL_TYPE_AXIS = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) (* C_REG_SLICE_MODE_AXIS = "0" *) 
module control_to_core_slave_axi_fifo_generator_v12_0__parameterized2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [2:0]din;
  input wr_en;
  input rd_en;
  input [7:0]prog_empty_thresh;
  input [7:0]prog_empty_thresh_assert;
  input [7:0]prog_empty_thresh_negate;
  input [7:0]prog_full_thresh;
  input [7:0]prog_full_thresh_assert;
  input [7:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [2:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [7:0]data_count;
  output [7:0]rd_data_count;
  output [7:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [3:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [3:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [3:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [3:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [3:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [3:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [3:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [3:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [3:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [3:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [3:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [3:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [3:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [3:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [3:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [3:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [3:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [3:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [63:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [7:0]s_axis_tid;
  input [3:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [63:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [7:0]m_axis_tid;
  output [3:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axi_ar_injectdbiterr;
  wire axi_ar_injectsbiterr;
  wire [3:0]axi_ar_prog_empty_thresh;
  wire [3:0]axi_ar_prog_full_thresh;
  wire axi_aw_injectdbiterr;
  wire axi_aw_injectsbiterr;
  wire [3:0]axi_aw_prog_empty_thresh;
  wire [3:0]axi_aw_prog_full_thresh;
  wire axi_b_injectdbiterr;
  wire axi_b_injectsbiterr;
  wire [3:0]axi_b_prog_empty_thresh;
  wire [3:0]axi_b_prog_full_thresh;
  wire axi_r_injectdbiterr;
  wire axi_r_injectsbiterr;
  wire [9:0]axi_r_prog_empty_thresh;
  wire [9:0]axi_r_prog_full_thresh;
  wire axi_w_injectdbiterr;
  wire axi_w_injectsbiterr;
  wire [9:0]axi_w_prog_empty_thresh;
  wire [9:0]axi_w_prog_full_thresh;
  wire axis_injectdbiterr;
  wire axis_injectsbiterr;
  wire [9:0]axis_prog_empty_thresh;
  wire [9:0]axis_prog_full_thresh;
  wire backup;
  wire backup_marker;
  wire clk;
  wire [2:0]din;
  wire [2:0]dout;
  wire empty;
  wire full;
  wire injectdbiterr;
  wire injectsbiterr;
  wire int_clk;
  wire m_aclk;
  wire m_aclk_en;
  wire m_axi_arready;
  wire m_axi_awready;
  wire [3:0]m_axi_bid;
  wire [1:0]m_axi_bresp;
  wire [0:0]m_axi_buser;
  wire m_axi_bvalid;
  wire [63:0]m_axi_rdata;
  wire [3:0]m_axi_rid;
  wire m_axi_rlast;
  wire [1:0]m_axi_rresp;
  wire [0:0]m_axi_ruser;
  wire m_axi_rvalid;
  wire m_axi_wready;
  wire m_axis_tready;
  wire [7:0]prog_empty_thresh;
  wire [7:0]prog_empty_thresh_assert;
  wire [7:0]prog_empty_thresh_negate;
  wire prog_full;
  wire [7:0]prog_full_thresh;
  wire [7:0]prog_full_thresh_assert;
  wire [7:0]prog_full_thresh_negate;
  wire rd_clk;
  wire rd_en;
  wire rd_rst;
  wire rst;
  wire s_aclk;
  wire s_aclk_en;
  wire s_aresetn;
  wire [31:0]s_axi_araddr;
  wire [1:0]s_axi_arburst;
  wire [3:0]s_axi_arcache;
  wire [3:0]s_axi_arid;
  wire [3:0]s_axi_arlen;
  wire [3:0]s_axi_arlock;
  wire [2:0]s_axi_arprot;
  wire [3:0]s_axi_arqos;
  wire [3:0]s_axi_arregion;
  wire [2:0]s_axi_arsize;
  wire [0:0]s_axi_aruser;
  wire s_axi_arvalid;
  wire [31:0]s_axi_awaddr;
  wire [1:0]s_axi_awburst;
  wire [3:0]s_axi_awcache;
  wire [3:0]s_axi_awid;
  wire [3:0]s_axi_awlen;
  wire [3:0]s_axi_awlock;
  wire [2:0]s_axi_awprot;
  wire [3:0]s_axi_awqos;
  wire [3:0]s_axi_awregion;
  wire [2:0]s_axi_awsize;
  wire [0:0]s_axi_awuser;
  wire s_axi_awvalid;
  wire s_axi_bready;
  wire s_axi_rready;
  wire [63:0]s_axi_wdata;
  wire [3:0]s_axi_wid;
  wire s_axi_wlast;
  wire [7:0]s_axi_wstrb;
  wire [0:0]s_axi_wuser;
  wire s_axi_wvalid;
  wire [63:0]s_axis_tdata;
  wire [3:0]s_axis_tdest;
  wire [7:0]s_axis_tid;
  wire [3:0]s_axis_tkeep;
  wire s_axis_tlast;
  wire [3:0]s_axis_tstrb;
  wire [3:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire srst;
  wire wr_clk;
  wire wr_en;
  wire wr_rst;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[3] = \<const0> ;
  assign m_axi_arid[2] = \<const0> ;
  assign m_axi_arid[1] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[3] = \<const0> ;
  assign m_axi_arlock[2] = \<const0> ;
  assign m_axi_arlock[1] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[3] = \<const0> ;
  assign m_axi_awid[2] = \<const0> ;
  assign m_axi_awid[1] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[3] = \<const0> ;
  assign m_axi_awlock[2] = \<const0> ;
  assign m_axi_awlock[1] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[3] = \<const0> ;
  assign m_axi_wid[2] = \<const0> ;
  assign m_axi_wid[1] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[63] = \<const0> ;
  assign m_axis_tdata[62] = \<const0> ;
  assign m_axis_tdata[61] = \<const0> ;
  assign m_axis_tdata[60] = \<const0> ;
  assign m_axis_tdata[59] = \<const0> ;
  assign m_axis_tdata[58] = \<const0> ;
  assign m_axis_tdata[57] = \<const0> ;
  assign m_axis_tdata[56] = \<const0> ;
  assign m_axis_tdata[55] = \<const0> ;
  assign m_axis_tdata[54] = \<const0> ;
  assign m_axis_tdata[53] = \<const0> ;
  assign m_axis_tdata[52] = \<const0> ;
  assign m_axis_tdata[51] = \<const0> ;
  assign m_axis_tdata[50] = \<const0> ;
  assign m_axis_tdata[49] = \<const0> ;
  assign m_axis_tdata[48] = \<const0> ;
  assign m_axis_tdata[47] = \<const0> ;
  assign m_axis_tdata[46] = \<const0> ;
  assign m_axis_tdata[45] = \<const0> ;
  assign m_axis_tdata[44] = \<const0> ;
  assign m_axis_tdata[43] = \<const0> ;
  assign m_axis_tdata[42] = \<const0> ;
  assign m_axis_tdata[41] = \<const0> ;
  assign m_axis_tdata[40] = \<const0> ;
  assign m_axis_tdata[39] = \<const0> ;
  assign m_axis_tdata[38] = \<const0> ;
  assign m_axis_tdata[37] = \<const0> ;
  assign m_axis_tdata[36] = \<const0> ;
  assign m_axis_tdata[35] = \<const0> ;
  assign m_axis_tdata[34] = \<const0> ;
  assign m_axis_tdata[33] = \<const0> ;
  assign m_axis_tdata[32] = \<const0> ;
  assign m_axis_tdata[31] = \<const0> ;
  assign m_axis_tdata[30] = \<const0> ;
  assign m_axis_tdata[29] = \<const0> ;
  assign m_axis_tdata[28] = \<const0> ;
  assign m_axis_tdata[27] = \<const0> ;
  assign m_axis_tdata[26] = \<const0> ;
  assign m_axis_tdata[25] = \<const0> ;
  assign m_axis_tdata[24] = \<const0> ;
  assign m_axis_tdata[23] = \<const0> ;
  assign m_axis_tdata[22] = \<const0> ;
  assign m_axis_tdata[21] = \<const0> ;
  assign m_axis_tdata[20] = \<const0> ;
  assign m_axis_tdata[19] = \<const0> ;
  assign m_axis_tdata[18] = \<const0> ;
  assign m_axis_tdata[17] = \<const0> ;
  assign m_axis_tdata[16] = \<const0> ;
  assign m_axis_tdata[15] = \<const0> ;
  assign m_axis_tdata[14] = \<const0> ;
  assign m_axis_tdata[13] = \<const0> ;
  assign m_axis_tdata[12] = \<const0> ;
  assign m_axis_tdata[11] = \<const0> ;
  assign m_axis_tdata[10] = \<const0> ;
  assign m_axis_tdata[9] = \<const0> ;
  assign m_axis_tdata[8] = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[3] = \<const0> ;
  assign m_axis_tdest[2] = \<const0> ;
  assign m_axis_tdest[1] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[7] = \<const0> ;
  assign m_axis_tid[6] = \<const0> ;
  assign m_axis_tid[5] = \<const0> ;
  assign m_axis_tid[4] = \<const0> ;
  assign m_axis_tid[3] = \<const0> ;
  assign m_axis_tid[2] = \<const0> ;
  assign m_axis_tid[1] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[3] = \<const0> ;
  assign s_axi_bid[2] = \<const0> ;
  assign s_axi_bid[1] = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[3] = \<const0> ;
  assign s_axi_rid[2] = \<const0> ;
  assign s_axi_rid[1] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
GND GND
       (.G(\<const0> ));
VCC VCC
       (.P(\<const1> ));
control_to_core_slave_axi_fifo_generator_v12_0_synth__parameterized2 inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0_synth" *) 
module control_to_core_slave_axi_fifo_generator_v12_0_synth
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [47:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [47:0]din;
  input rst;

  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_top \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0_synth" *) 
module control_to_core_slave_axi_fifo_generator_v12_0_synth_78
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [47:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [47:0]din;
  input rst;

  wire [47:0]din;
  wire [47:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_top_79 \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0_synth" *) 
module control_to_core_slave_axi_fifo_generator_v12_0_synth__parameterized0
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    rd_clk,
    wr_clk,
    din,
    rst,
    wr_en);
  output [39:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input rd_clk;
  input wr_clk;
  input [39:0]din;
  input rst;
  input wr_en;

  wire [39:0]din;
  wire [39:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_top__parameterized0 \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0_synth" *) 
module control_to_core_slave_axi_fifo_generator_v12_0_synth__parameterized1
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    rd_clk,
    wr_clk,
    din,
    rst,
    wr_en);
  output [35:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input rd_clk;
  input wr_clk;
  input [35:0]din;
  input rst;
  input wr_en;

  wire [35:0]din;
  wire [35:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_top__parameterized1 \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v12_0_synth" *) 
module control_to_core_slave_axi_fifo_generator_v12_0_synth__parameterized2
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    rst,
    din);
  output [2:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input rst;
  input [2:0]din;

  wire [2:0]din;
  wire [2:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_fifo_generator_top__parameterized2 \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module control_to_core_slave_axi_memory
   (dout,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O3,
    din,
    E);
  output [47:0]dout;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O3;
  input [47:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire [47:0]dout;
  wire [47:0]doutb;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized0 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[0]),
        .Q(dout[0]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[10]),
        .Q(dout[10]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[11]),
        .Q(dout[11]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[12]),
        .Q(dout[12]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[13]),
        .Q(dout[13]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[14]),
        .Q(dout[14]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[15]),
        .Q(dout[15]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[16]),
        .Q(dout[16]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[17]),
        .Q(dout[17]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[18]),
        .Q(dout[18]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[19]),
        .Q(dout[19]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[1]),
        .Q(dout[1]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[20]),
        .Q(dout[20]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[21]),
        .Q(dout[21]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[22]),
        .Q(dout[22]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[23]),
        .Q(dout[23]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[24]),
        .Q(dout[24]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[25]),
        .Q(dout[25]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[26]),
        .Q(dout[26]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[27]),
        .Q(dout[27]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[28]),
        .Q(dout[28]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[29]),
        .Q(dout[29]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[2]),
        .Q(dout[2]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[30]),
        .Q(dout[30]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[31]),
        .Q(dout[31]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[32]),
        .Q(dout[32]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[33]),
        .Q(dout[33]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[34] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[34]),
        .Q(dout[34]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[35] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[35]),
        .Q(dout[35]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[36] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[36]),
        .Q(dout[36]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[37] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[37]),
        .Q(dout[37]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[38] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[38]),
        .Q(dout[38]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[39] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[39]),
        .Q(dout[39]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[3]),
        .Q(dout[3]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[40] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[40]),
        .Q(dout[40]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[41] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[41]),
        .Q(dout[41]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[42] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[42]),
        .Q(dout[42]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[43] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[43]),
        .Q(dout[43]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[44] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[44]),
        .Q(dout[44]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[45] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[45]),
        .Q(dout[45]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[46] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[46]),
        .Q(dout[46]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[47] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[47]),
        .Q(dout[47]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[4]),
        .Q(dout[4]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[5]),
        .Q(dout[5]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[6]),
        .Q(dout[6]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[7]),
        .Q(dout[7]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[8]),
        .Q(dout[8]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[9]),
        .Q(dout[9]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module control_to_core_slave_axi_memory_84
   (dout,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    WEBWE,
    wr_clk,
    O2,
    O4,
    din,
    E);
  output [47:0]dout;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]WEBWE;
  input wr_clk;
  input [7:0]O2;
  input [7:0]O4;
  input [47:0]din;
  input [0:0]E;

  wire [0:0]E;
  wire [7:0]O2;
  wire [7:0]O4;
  wire [0:0]Q;
  wire [0:0]WEBWE;
  wire [47:0]din;
  wire [47:0]dout;
  wire [47:0]doutb;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized0_86 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .O2(O2),
        .O4(O4),
        .Q(Q),
        .WEBWE(WEBWE),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[0]),
        .Q(dout[0]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[10]),
        .Q(dout[10]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[11]),
        .Q(dout[11]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[12]),
        .Q(dout[12]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[13]),
        .Q(dout[13]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[14]),
        .Q(dout[14]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[15]),
        .Q(dout[15]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[16]),
        .Q(dout[16]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[17]),
        .Q(dout[17]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[18]),
        .Q(dout[18]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[19]),
        .Q(dout[19]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[1]),
        .Q(dout[1]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[20]),
        .Q(dout[20]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[21]),
        .Q(dout[21]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[22]),
        .Q(dout[22]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[23]),
        .Q(dout[23]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[24]),
        .Q(dout[24]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[25]),
        .Q(dout[25]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[26]),
        .Q(dout[26]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[27]),
        .Q(dout[27]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[28]),
        .Q(dout[28]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[29]),
        .Q(dout[29]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[2]),
        .Q(dout[2]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[30]),
        .Q(dout[30]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[31]),
        .Q(dout[31]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[32]),
        .Q(dout[32]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[33]),
        .Q(dout[33]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[34] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[34]),
        .Q(dout[34]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[35] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[35]),
        .Q(dout[35]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[36] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[36]),
        .Q(dout[36]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[37] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[37]),
        .Q(dout[37]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[38] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[38]),
        .Q(dout[38]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[39] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[39]),
        .Q(dout[39]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[3]),
        .Q(dout[3]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[40] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[40]),
        .Q(dout[40]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[41] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[41]),
        .Q(dout[41]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[42] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[42]),
        .Q(dout[42]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[43] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[43]),
        .Q(dout[43]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[44] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[44]),
        .Q(dout[44]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[45] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[45]),
        .Q(dout[45]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[46] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[46]),
        .Q(dout[46]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[47] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[47]),
        .Q(dout[47]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[4]),
        .Q(dout[4]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[5]),
        .Q(dout[5]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[6]),
        .Q(dout[6]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[7]),
        .Q(dout[7]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[8]),
        .Q(dout[8]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(E),
        .D(doutb[9]),
        .Q(dout[9]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module control_to_core_slave_axi_memory__parameterized0
   (dout,
    tmp_ram_rd_en,
    rd_clk,
    Q,
    E,
    wr_clk,
    O2,
    O3,
    din,
    I1);
  output [39:0]dout;
  input tmp_ram_rd_en;
  input rd_clk;
  input [0:0]Q;
  input [0:0]E;
  input wr_clk;
  input [8:0]O2;
  input [8:0]O3;
  input [39:0]din;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [0:0]Q;
  wire [39:0]din;
  wire [39:0]dout;
  wire [39:0]doutb;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized2 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .E(E),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[0]),
        .Q(dout[0]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[10]),
        .Q(dout[10]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[11]),
        .Q(dout[11]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[12]),
        .Q(dout[12]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[13]),
        .Q(dout[13]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[14]),
        .Q(dout[14]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[15]),
        .Q(dout[15]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[16]),
        .Q(dout[16]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[17]),
        .Q(dout[17]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[18]),
        .Q(dout[18]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[19]),
        .Q(dout[19]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[1]),
        .Q(dout[1]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[20]),
        .Q(dout[20]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[21]),
        .Q(dout[21]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[22]),
        .Q(dout[22]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[23]),
        .Q(dout[23]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[24]),
        .Q(dout[24]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[25]),
        .Q(dout[25]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[26]),
        .Q(dout[26]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[27]),
        .Q(dout[27]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[28]),
        .Q(dout[28]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[29]),
        .Q(dout[29]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[2]),
        .Q(dout[2]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[30]),
        .Q(dout[30]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[31]),
        .Q(dout[31]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[32]),
        .Q(dout[32]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[33]),
        .Q(dout[33]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[34] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[34]),
        .Q(dout[34]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[35] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[35]),
        .Q(dout[35]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[36] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[36]),
        .Q(dout[36]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[37] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[37]),
        .Q(dout[37]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[38] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[38]),
        .Q(dout[38]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[39] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[39]),
        .Q(dout[39]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[3]),
        .Q(dout[3]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[4]),
        .Q(dout[4]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[5]),
        .Q(dout[5]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[6]),
        .Q(dout[6]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[7]),
        .Q(dout[7]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[8]),
        .Q(dout[8]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(I1),
        .D(doutb[9]),
        .Q(dout[9]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module control_to_core_slave_axi_memory__parameterized1
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    O2,
    I1,
    din,
    I2);
  output [35:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]O2;
  input [8:0]I1;
  input [35:0]din;
  input [0:0]I2;

  wire [0:0]E;
  wire [8:0]I1;
  wire [0:0]I2;
  wire [8:0]O2;
  wire [0:0]Q;
  wire [35:0]din;
  wire [35:0]dout;
  wire [35:0]doutb;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

control_to_core_slave_axi_blk_mem_gen_v8_2__parameterized4 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .E(E),
        .I1(I1),
        .O2(O2),
        .Q(Q),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[0]),
        .Q(dout[0]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[10]),
        .Q(dout[10]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[11]),
        .Q(dout[11]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[12]),
        .Q(dout[12]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[13]),
        .Q(dout[13]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[14]),
        .Q(dout[14]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[15]),
        .Q(dout[15]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[16]),
        .Q(dout[16]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[17]),
        .Q(dout[17]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[18]),
        .Q(dout[18]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[19]),
        .Q(dout[19]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[1]),
        .Q(dout[1]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[20]),
        .Q(dout[20]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[21]),
        .Q(dout[21]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[22]),
        .Q(dout[22]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[23]),
        .Q(dout[23]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[24]),
        .Q(dout[24]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[25]),
        .Q(dout[25]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[26]),
        .Q(dout[26]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[27]),
        .Q(dout[27]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[28]),
        .Q(dout[28]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[29]),
        .Q(dout[29]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[2]),
        .Q(dout[2]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[30]),
        .Q(dout[30]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[31]),
        .Q(dout[31]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[32]),
        .Q(dout[32]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[33]),
        .Q(dout[33]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[34] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[34]),
        .Q(dout[34]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[35] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[35]),
        .Q(dout[35]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[3]),
        .Q(dout[3]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[4]),
        .Q(dout[4]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[5]),
        .Q(dout[5]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[6]),
        .Q(dout[6]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[7]),
        .Q(dout[7]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[8]),
        .Q(dout[8]),
        .R(Q));
FDRE #(
    .INIT(1'b0)) 
     \goreg_bm.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(I2),
        .D(doutb[9]),
        .Q(dout[9]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module control_to_core_slave_axi_memory__parameterized2
   (p_0_out,
    p_0_out_0,
    dout,
    I1,
    rd_clk,
    Q,
    I2,
    I3,
    wr_clk,
    din,
    I4,
    O3,
    O4,
    I5,
    I6,
    I7,
    O2,
    rd_en);
  output [2:0]p_0_out;
  output [2:0]p_0_out_0;
  output [2:0]dout;
  input I1;
  input rd_clk;
  input [0:0]Q;
  input I2;
  input I3;
  input wr_clk;
  input [2:0]din;
  input I4;
  input [7:0]O3;
  input [5:0]O4;
  input I5;
  input I6;
  input I7;
  input [1:0]O2;
  input rd_en;

  wire I1;
  wire I2;
  wire I3;
  wire I4;
  wire I5;
  wire I6;
  wire I7;
  wire [1:0]O2;
  wire [7:0]O3;
  wire [5:0]O4;
  wire [0:0]Q;
  wire [2:0]din;
  wire [2:0]dout;
  wire \n_0_goreg_dm.dout_i[0]_i_1 ;
  wire \n_0_goreg_dm.dout_i[1]_i_1 ;
  wire \n_0_goreg_dm.dout_i[2]_i_1 ;
  wire [2:0]p_0_out;
  wire [2:0]p_0_out_0;
  wire rd_clk;
  wire rd_en;
  wire wr_clk;

control_to_core_slave_axi_dmem \gdm.dm 
       (.I1(I1),
        .I2(I2),
        .I3(I3),
        .I4(I4),
        .I5(I5),
        .I6(I6),
        .I7(I7),
        .O3(O3),
        .O4(O4),
        .Q(Q),
        .din(din),
        .p_0_out(p_0_out),
        .p_0_out_0(p_0_out_0),
        .rd_clk(rd_clk),
        .wr_clk(wr_clk));
LUT5 #(
    .INIT(32'hBBFB8808)) 
     \goreg_dm.dout_i[0]_i_1 
       (.I0(p_0_out[0]),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(dout[0]),
        .O(\n_0_goreg_dm.dout_i[0]_i_1 ));
LUT5 #(
    .INIT(32'hBBFB8808)) 
     \goreg_dm.dout_i[1]_i_1 
       (.I0(p_0_out[1]),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(dout[1]),
        .O(\n_0_goreg_dm.dout_i[1]_i_1 ));
LUT5 #(
    .INIT(32'hBBFB8808)) 
     \goreg_dm.dout_i[2]_i_1 
       (.I0(p_0_out[2]),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(dout[2]),
        .O(\n_0_goreg_dm.dout_i[2]_i_1 ));
FDCE #(
    .INIT(1'b0)) 
     \goreg_dm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(\n_0_goreg_dm.dout_i[0]_i_1 ),
        .Q(dout[0]));
FDCE #(
    .INIT(1'b0)) 
     \goreg_dm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(\n_0_goreg_dm.dout_i[1]_i_1 ),
        .Q(dout[1]));
FDCE #(
    .INIT(1'b0)) 
     \goreg_dm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(\n_0_goreg_dm.dout_i[2]_i_1 ),
        .Q(dout[2]));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module control_to_core_slave_axi_rd_bin_cntr
   (Q,
    O3,
    O1,
    WR_PNTR_RD,
    I1,
    I2,
    E,
    rd_clk,
    I3);
  output [2:0]Q;
  output [7:0]O3;
  output O1;
  input [7:0]WR_PNTR_RD;
  input I1;
  input I2;
  input [0:0]E;
  input rd_clk;
  input [0:0]I3;

  wire [0:0]E;
  wire I1;
  wire I2;
  wire [0:0]I3;
  wire O1;
  wire [7:0]O3;
  wire [2:0]Q;
  wire [7:0]WR_PNTR_RD;
  wire \gras.rsts/comp0 ;
  wire \n_0_gc0.count[7]_i_2 ;
  wire n_0_ram_empty_fb_i_i_3;
  wire n_0_ram_empty_fb_i_i_4;
  wire n_0_ram_empty_fb_i_i_5;
  wire n_0_ram_empty_fb_i_i_6;
  wire [7:0]plusOp__0;
  wire rd_clk;
  wire [7:3]rd_pntr_plus1;

LUT1 #(
    .INIT(2'h1)) 
     \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
LUT3 #(
    .INIT(8'h78)) 
     \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
LUT4 #(
    .INIT(16'h7F80)) 
     \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp__0[3]));
LUT5 #(
    .INIT(32'h7FFF8000)) 
     \gc0.count[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[3]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp__0[4]));
LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
     \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(rd_pntr_plus1[4]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp__0[5]));
LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[6]_i_1 
       (.I0(\n_0_gc0.count[7]_i_2 ),
        .I1(rd_pntr_plus1[6]),
        .O(plusOp__0[6]));
LUT3 #(
    .INIT(8'h78)) 
     \gc0.count[7]_i_1 
       (.I0(\n_0_gc0.count[7]_i_2 ),
        .I1(rd_pntr_plus1[6]),
        .I2(rd_pntr_plus1[7]),
        .O(plusOp__0[7]));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gc0.count[7]_i_2 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(rd_pntr_plus1[4]),
        .O(\n_0_gc0.count[7]_i_2 ));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(Q[0]),
        .Q(O3[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(Q[1]),
        .Q(O3[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(Q[2]),
        .Q(O3[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[3]),
        .Q(O3[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[4]),
        .Q(O3[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[5]),
        .Q(O3[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[6]),
        .Q(O3[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[7]),
        .Q(O3[7]));
FDPE #(
    .INIT(1'b1)) 
     \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(I3),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[3]),
        .Q(rd_pntr_plus1[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[4]),
        .Q(rd_pntr_plus1[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[5]),
        .Q(rd_pntr_plus1[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[6]),
        .Q(rd_pntr_plus1[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[7]),
        .Q(rd_pntr_plus1[7]));
LUT3 #(
    .INIT(8'hEA)) 
     ram_empty_fb_i_i_1
       (.I0(\gras.rsts/comp0 ),
        .I1(n_0_ram_empty_fb_i_i_3),
        .I2(n_0_ram_empty_fb_i_i_4),
        .O(O1));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_empty_fb_i_i_2
       (.I0(O3[7]),
        .I1(WR_PNTR_RD[7]),
        .I2(O3[6]),
        .I3(WR_PNTR_RD[6]),
        .I4(n_0_ram_empty_fb_i_i_5),
        .I5(n_0_ram_empty_fb_i_i_6),
        .O(\gras.rsts/comp0 ));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_3
       (.I0(rd_pntr_plus1[5]),
        .I1(WR_PNTR_RD[5]),
        .I2(rd_pntr_plus1[7]),
        .I3(WR_PNTR_RD[7]),
        .I4(WR_PNTR_RD[6]),
        .I5(rd_pntr_plus1[6]),
        .O(n_0_ram_empty_fb_i_i_3));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_empty_fb_i_i_4
       (.I0(rd_pntr_plus1[3]),
        .I1(WR_PNTR_RD[3]),
        .I2(rd_pntr_plus1[4]),
        .I3(WR_PNTR_RD[4]),
        .I4(I1),
        .I5(I2),
        .O(n_0_ram_empty_fb_i_i_4));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_5
       (.I0(O3[0]),
        .I1(WR_PNTR_RD[0]),
        .I2(O3[1]),
        .I3(WR_PNTR_RD[1]),
        .I4(WR_PNTR_RD[2]),
        .I5(O3[2]),
        .O(n_0_ram_empty_fb_i_i_5));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_6
       (.I0(O3[3]),
        .I1(WR_PNTR_RD[3]),
        .I2(O3[4]),
        .I3(WR_PNTR_RD[4]),
        .I4(WR_PNTR_RD[5]),
        .I5(O3[5]),
        .O(n_0_ram_empty_fb_i_i_6));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module control_to_core_slave_axi_rd_bin_cntr_63
   (Q,
    O2,
    O1,
    WR_PNTR_RD,
    I1,
    I2,
    E,
    rd_clk,
    I3);
  output [2:0]Q;
  output [7:0]O2;
  output O1;
  input [7:0]WR_PNTR_RD;
  input I1;
  input I2;
  input [0:0]E;
  input rd_clk;
  input [0:0]I3;

  wire [0:0]E;
  wire I1;
  wire I2;
  wire [0:0]I3;
  wire O1;
  wire [7:0]O2;
  wire [2:0]Q;
  wire [7:0]WR_PNTR_RD;
  wire \gras.rsts/comp0 ;
  wire \n_0_gc0.count[7]_i_2 ;
  wire n_0_ram_empty_fb_i_i_3;
  wire n_0_ram_empty_fb_i_i_4;
  wire n_0_ram_empty_fb_i_i_5;
  wire n_0_ram_empty_fb_i_i_6;
  wire [7:0]plusOp__0;
  wire rd_clk;
  wire [7:3]rd_pntr_plus1;

LUT1 #(
    .INIT(2'h1)) 
     \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
(* SOFT_HLUTNM = "soft_lutpair21" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
(* SOFT_HLUTNM = "soft_lutpair21" *) 
   LUT3 #(
    .INIT(8'h78)) 
     \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
(* SOFT_HLUTNM = "soft_lutpair20" *) 
   LUT4 #(
    .INIT(16'h7F80)) 
     \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp__0[3]));
(* SOFT_HLUTNM = "soft_lutpair20" *) 
   LUT5 #(
    .INIT(32'h7FFF8000)) 
     \gc0.count[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[3]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp__0[4]));
LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
     \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(rd_pntr_plus1[4]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp__0[5]));
(* SOFT_HLUTNM = "soft_lutpair22" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[6]_i_1 
       (.I0(\n_0_gc0.count[7]_i_2 ),
        .I1(rd_pntr_plus1[6]),
        .O(plusOp__0[6]));
(* SOFT_HLUTNM = "soft_lutpair22" *) 
   LUT3 #(
    .INIT(8'h78)) 
     \gc0.count[7]_i_1 
       (.I0(\n_0_gc0.count[7]_i_2 ),
        .I1(rd_pntr_plus1[6]),
        .I2(rd_pntr_plus1[7]),
        .O(plusOp__0[7]));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gc0.count[7]_i_2 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(rd_pntr_plus1[4]),
        .O(\n_0_gc0.count[7]_i_2 ));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(Q[0]),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(Q[1]),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(Q[2]),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[3]),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[4]),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[5]),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[6]),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(rd_pntr_plus1[7]),
        .Q(O2[7]));
FDPE #(
    .INIT(1'b1)) 
     \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(I3),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[3]),
        .Q(rd_pntr_plus1[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[4]),
        .Q(rd_pntr_plus1[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[5]),
        .Q(rd_pntr_plus1[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[6]),
        .Q(rd_pntr_plus1[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I3),
        .D(plusOp__0[7]),
        .Q(rd_pntr_plus1[7]));
LUT3 #(
    .INIT(8'hEA)) 
     ram_empty_fb_i_i_1
       (.I0(\gras.rsts/comp0 ),
        .I1(n_0_ram_empty_fb_i_i_3),
        .I2(n_0_ram_empty_fb_i_i_4),
        .O(O1));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_empty_fb_i_i_2
       (.I0(O2[7]),
        .I1(WR_PNTR_RD[7]),
        .I2(O2[6]),
        .I3(WR_PNTR_RD[6]),
        .I4(n_0_ram_empty_fb_i_i_5),
        .I5(n_0_ram_empty_fb_i_i_6),
        .O(\gras.rsts/comp0 ));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_3
       (.I0(rd_pntr_plus1[5]),
        .I1(WR_PNTR_RD[5]),
        .I2(rd_pntr_plus1[7]),
        .I3(WR_PNTR_RD[7]),
        .I4(WR_PNTR_RD[6]),
        .I5(rd_pntr_plus1[6]),
        .O(n_0_ram_empty_fb_i_i_3));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_empty_fb_i_i_4
       (.I0(rd_pntr_plus1[3]),
        .I1(WR_PNTR_RD[3]),
        .I2(rd_pntr_plus1[4]),
        .I3(WR_PNTR_RD[4]),
        .I4(I1),
        .I5(I2),
        .O(n_0_ram_empty_fb_i_i_4));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_5
       (.I0(O2[0]),
        .I1(WR_PNTR_RD[0]),
        .I2(O2[1]),
        .I3(WR_PNTR_RD[1]),
        .I4(WR_PNTR_RD[2]),
        .I5(O2[2]),
        .O(n_0_ram_empty_fb_i_i_5));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_6
       (.I0(O2[3]),
        .I1(WR_PNTR_RD[3]),
        .I2(O2[4]),
        .I3(WR_PNTR_RD[4]),
        .I4(WR_PNTR_RD[5]),
        .I5(O2[5]),
        .O(n_0_ram_empty_fb_i_i_6));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module control_to_core_slave_axi_rd_bin_cntr_97
   (Q,
    O2,
    O1,
    I1,
    I2,
    I3,
    E,
    rd_clk,
    I4);
  output [2:0]Q;
  output [7:0]O2;
  output O1;
  input [7:0]I1;
  input I2;
  input I3;
  input [0:0]E;
  input rd_clk;
  input [0:0]I4;

  wire [0:0]E;
  wire [7:0]I1;
  wire I2;
  wire I3;
  wire [0:0]I4;
  wire O1;
  wire [7:0]O2;
  wire [2:0]Q;
  wire \gras.rsts/comp0 ;
  wire \n_0_gc0.count[7]_i_2 ;
  wire n_0_ram_empty_fb_i_i_3;
  wire n_0_ram_empty_fb_i_i_4;
  wire n_0_ram_empty_fb_i_i_5;
  wire n_0_ram_empty_fb_i_i_6;
  wire [7:0]plusOp__0;
  wire rd_clk;
  wire [7:3]rd_pntr_plus1;

LUT1 #(
    .INIT(2'h1)) 
     \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
(* SOFT_HLUTNM = "soft_lutpair9" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
(* SOFT_HLUTNM = "soft_lutpair9" *) 
   LUT3 #(
    .INIT(8'h78)) 
     \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
(* SOFT_HLUTNM = "soft_lutpair8" *) 
   LUT4 #(
    .INIT(16'h7F80)) 
     \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp__0[3]));
(* SOFT_HLUTNM = "soft_lutpair8" *) 
   LUT5 #(
    .INIT(32'h7FFF8000)) 
     \gc0.count[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(rd_pntr_plus1[3]),
        .I4(rd_pntr_plus1[4]),
        .O(plusOp__0[4]));
LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
     \gc0.count[5]_i_1 
       (.I0(rd_pntr_plus1[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(rd_pntr_plus1[4]),
        .I5(rd_pntr_plus1[5]),
        .O(plusOp__0[5]));
(* SOFT_HLUTNM = "soft_lutpair10" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[6]_i_1 
       (.I0(\n_0_gc0.count[7]_i_2 ),
        .I1(rd_pntr_plus1[6]),
        .O(plusOp__0[6]));
(* SOFT_HLUTNM = "soft_lutpair10" *) 
   LUT3 #(
    .INIT(8'h78)) 
     \gc0.count[7]_i_1 
       (.I0(\n_0_gc0.count[7]_i_2 ),
        .I1(rd_pntr_plus1[6]),
        .I2(rd_pntr_plus1[7]),
        .O(plusOp__0[7]));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gc0.count[7]_i_2 
       (.I0(rd_pntr_plus1[5]),
        .I1(rd_pntr_plus1[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(rd_pntr_plus1[4]),
        .O(\n_0_gc0.count[7]_i_2 ));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(Q[0]),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(Q[1]),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(Q[2]),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(rd_pntr_plus1[3]),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(rd_pntr_plus1[4]),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(rd_pntr_plus1[5]),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(rd_pntr_plus1[6]),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(rd_pntr_plus1[7]),
        .Q(O2[7]));
FDPE #(
    .INIT(1'b1)) 
     \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(I4),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[3]),
        .Q(rd_pntr_plus1[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[4]),
        .Q(rd_pntr_plus1[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[5]),
        .Q(rd_pntr_plus1[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[6]),
        .Q(rd_pntr_plus1[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I4),
        .D(plusOp__0[7]),
        .Q(rd_pntr_plus1[7]));
LUT3 #(
    .INIT(8'hEA)) 
     ram_empty_fb_i_i_1
       (.I0(\gras.rsts/comp0 ),
        .I1(n_0_ram_empty_fb_i_i_3),
        .I2(n_0_ram_empty_fb_i_i_4),
        .O(O1));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_empty_fb_i_i_2
       (.I0(O2[7]),
        .I1(I1[7]),
        .I2(O2[6]),
        .I3(I1[6]),
        .I4(n_0_ram_empty_fb_i_i_5),
        .I5(n_0_ram_empty_fb_i_i_6),
        .O(\gras.rsts/comp0 ));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_3
       (.I0(rd_pntr_plus1[5]),
        .I1(I1[5]),
        .I2(rd_pntr_plus1[7]),
        .I3(I1[7]),
        .I4(I1[6]),
        .I5(rd_pntr_plus1[6]),
        .O(n_0_ram_empty_fb_i_i_3));
LUT6 #(
    .INIT(64'h9009000000000000)) 
     ram_empty_fb_i_i_4
       (.I0(rd_pntr_plus1[3]),
        .I1(I1[3]),
        .I2(rd_pntr_plus1[4]),
        .I3(I1[4]),
        .I4(I2),
        .I5(I3),
        .O(n_0_ram_empty_fb_i_i_4));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_5
       (.I0(O2[0]),
        .I1(I1[0]),
        .I2(O2[1]),
        .I3(I1[1]),
        .I4(I1[2]),
        .I5(O2[2]),
        .O(n_0_ram_empty_fb_i_i_5));
LUT6 #(
    .INIT(64'h9009000000009009)) 
     ram_empty_fb_i_i_6
       (.I0(O2[3]),
        .I1(I1[3]),
        .I2(O2[4]),
        .I3(I1[4]),
        .I4(I1[5]),
        .I5(O2[5]),
        .O(n_0_ram_empty_fb_i_i_6));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module control_to_core_slave_axi_rd_bin_cntr__parameterized0
   (O1,
    Q,
    v1_reg,
    O2,
    I2,
    E,
    rd_clk,
    I1);
  output O1;
  output [7:0]Q;
  output [3:0]v1_reg;
  output [8:0]O2;
  input [8:0]I2;
  input [0:0]E;
  input rd_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [8:0]I2;
  wire O1;
  wire [8:0]O2;
  wire [7:0]Q;
  wire \n_0_gc0.count[8]_i_2 ;
  wire [8:0]plusOp__0;
  wire rd_clk;
  wire [8:8]rd_pntr_plus1;
  wire [3:0]v1_reg;

LUT1 #(
    .INIT(2'h1)) 
     \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
(* SOFT_HLUTNM = "soft_lutpair66" *) 
   LUT3 #(
    .INIT(8'h6A)) 
     \gc0.count[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(plusOp__0[2]));
(* SOFT_HLUTNM = "soft_lutpair64" *) 
   LUT4 #(
    .INIT(16'h7F80)) 
     \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
(* SOFT_HLUTNM = "soft_lutpair64" *) 
   LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gc0.count[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[3]),
        .O(plusOp__0[4]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gc0.count[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[4]),
        .O(plusOp__0[5]));
(* SOFT_HLUTNM = "soft_lutpair65" *) 
   LUT4 #(
    .INIT(16'h6AAA)) 
     \gc0.count[6]_i_1 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(\n_0_gc0.count[8]_i_2 ),
        .I3(Q[5]),
        .O(plusOp__0[6]));
(* SOFT_HLUTNM = "soft_lutpair65" *) 
   LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gc0.count[7]_i_1 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\n_0_gc0.count[8]_i_2 ),
        .I3(Q[4]),
        .I4(Q[6]),
        .O(plusOp__0[7]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gc0.count[8]_i_1 
       (.I0(rd_pntr_plus1),
        .I1(Q[6]),
        .I2(Q[4]),
        .I3(\n_0_gc0.count[8]_i_2 ),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(plusOp__0[8]));
(* SOFT_HLUTNM = "soft_lutpair66" *) 
   LUT4 #(
    .INIT(16'h8000)) 
     \gc0.count[8]_i_2 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\n_0_gc0.count[8]_i_2 ));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[0]),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[1]),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[2]),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[3]),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[4]),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[5]),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[6]),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[7]),
        .Q(O2[7]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(rd_pntr_plus1),
        .Q(O2[8]));
FDPE #(
    .INIT(1'b1)) 
     \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(I1),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[7]),
        .Q(Q[7]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[8]),
        .Q(rd_pntr_plus1));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1 
       (.I0(O2[1]),
        .I1(I2[1]),
        .I2(O2[0]),
        .I3(I2[0]),
        .O(v1_reg[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1 
       (.I0(O2[3]),
        .I1(I2[3]),
        .I2(O2[2]),
        .I3(I2[2]),
        .O(v1_reg[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1 
       (.I0(O2[5]),
        .I1(I2[5]),
        .I2(O2[4]),
        .I3(I2[4]),
        .O(v1_reg[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1 
       (.I0(O2[7]),
        .I1(I2[7]),
        .I2(O2[6]),
        .I3(I2[6]),
        .O(v1_reg[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1 
       (.I0(rd_pntr_plus1),
        .I1(I2[8]),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module control_to_core_slave_axi_rd_bin_cntr__parameterized0_26
   (O1,
    Q,
    v1_reg,
    O2,
    WR_PNTR_RD,
    E,
    rd_clk,
    I1);
  output O1;
  output [7:0]Q;
  output [3:0]v1_reg;
  output [8:0]O2;
  input [8:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire O1;
  wire [8:0]O2;
  wire [7:0]Q;
  wire [8:0]WR_PNTR_RD;
  wire \n_0_gc0.count[8]_i_2 ;
  wire [8:0]plusOp__0;
  wire rd_clk;
  wire [8:8]rd_pntr_plus1;
  wire [3:0]v1_reg;

LUT1 #(
    .INIT(2'h1)) 
     \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
LUT3 #(
    .INIT(8'h6A)) 
     \gc0.count[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(plusOp__0[2]));
LUT4 #(
    .INIT(16'h7F80)) 
     \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gc0.count[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[3]),
        .O(plusOp__0[4]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gc0.count[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .I5(Q[4]),
        .O(plusOp__0[5]));
LUT4 #(
    .INIT(16'h6AAA)) 
     \gc0.count[6]_i_1 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(\n_0_gc0.count[8]_i_2 ),
        .I3(Q[5]),
        .O(plusOp__0[6]));
LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gc0.count[7]_i_1 
       (.I0(Q[7]),
        .I1(Q[5]),
        .I2(\n_0_gc0.count[8]_i_2 ),
        .I3(Q[4]),
        .I4(Q[6]),
        .O(plusOp__0[7]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gc0.count[8]_i_1 
       (.I0(rd_pntr_plus1),
        .I1(Q[6]),
        .I2(Q[4]),
        .I3(\n_0_gc0.count[8]_i_2 ),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(plusOp__0[8]));
LUT4 #(
    .INIT(16'h8000)) 
     \gc0.count[8]_i_2 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\n_0_gc0.count[8]_i_2 ));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[0]),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[1]),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[2]),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[3]),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[4]),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[5]),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[6]),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[7]),
        .Q(O2[7]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_d1_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(rd_pntr_plus1),
        .Q(O2[8]));
FDPE #(
    .INIT(1'b1)) 
     \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(I1),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[7]),
        .Q(Q[7]));
FDCE #(
    .INIT(1'b0)) 
     \gc0.count_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__0[8]),
        .Q(rd_pntr_plus1));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[0].gm1.m1_i_1 
       (.I0(O2[1]),
        .I1(WR_PNTR_RD[1]),
        .I2(O2[0]),
        .I3(WR_PNTR_RD[0]),
        .O(v1_reg[0]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[1].gms.ms_i_1 
       (.I0(O2[3]),
        .I1(WR_PNTR_RD[3]),
        .I2(O2[2]),
        .I3(WR_PNTR_RD[2]),
        .O(v1_reg[1]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[2].gms.ms_i_1 
       (.I0(O2[5]),
        .I1(WR_PNTR_RD[5]),
        .I2(O2[4]),
        .I3(WR_PNTR_RD[4]),
        .O(v1_reg[2]));
LUT4 #(
    .INIT(16'h9009)) 
     \gmux.gm[3].gms.ms_i_1 
       (.I0(O2[7]),
        .I1(WR_PNTR_RD[7]),
        .I2(O2[6]),
        .I3(WR_PNTR_RD[6]),
        .O(v1_reg[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1 
       (.I0(rd_pntr_plus1),
        .I1(WR_PNTR_RD[8]),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module control_to_core_slave_axi_rd_fwft
   (empty,
    E,
    O1,
    tmp_ram_rd_en,
    O2,
    rd_clk,
    Q,
    rd_en,
    p_18_out,
    comp0,
    comp1);
  output empty;
  output [0:0]E;
  output O1;
  output tmp_ram_rd_en;
  output [0:0]O2;
  input rd_clk;
  input [1:0]Q;
  input rd_en;
  input p_18_out;
  input comp0;
  input comp1;

  wire [0:0]E;
  wire O1;
  wire [0:0]O2;
  wire [1:0]Q;
  wire comp0;
  wire comp1;
  wire [0:0]curr_fwft_state;
  wire empty;
  wire empty_fwft_fb;
  wire empty_fwft_i0;
  wire \n_0_gpregsm1.curr_fwft_state[0]_i_1 ;
  wire \n_0_gpregsm1.curr_fwft_state[1]_i_1 ;
  wire \n_0_gpregsm1.curr_fwft_state_reg[1] ;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;

LUT5 #(
    .INIT(32'hAAAAEFFF)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_1 
       (.I0(Q[0]),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .I3(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I4(p_18_out),
        .O(tmp_ram_rd_en));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_fb_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty_fwft_fb));
(* SOFT_HLUTNM = "soft_lutpair63" *) 
   LUT4 #(
    .INIT(16'hCF08)) 
     empty_fwft_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(empty_fwft_fb),
        .O(empty_fwft_i0));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty));
(* SOFT_HLUTNM = "soft_lutpair62" *) 
   LUT4 #(
    .INIT(16'h5515)) 
     \gc0.count_d1[8]_i_1 
       (.I0(p_18_out),
        .I1(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I2(curr_fwft_state),
        .I3(rd_en),
        .O(E));
LUT3 #(
    .INIT(8'h8A)) 
     \goreg_bm.dout_i[39]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .O(O2));
(* SOFT_HLUTNM = "soft_lutpair63" *) 
   LUT3 #(
    .INIT(8'hBA)) 
     \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .O(\n_0_gpregsm1.curr_fwft_state[0]_i_1 ));
(* SOFT_HLUTNM = "soft_lutpair62" *) 
   LUT4 #(
    .INIT(16'h08FF)) 
     \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(curr_fwft_state),
        .I2(rd_en),
        .I3(p_18_out),
        .O(\n_0_gpregsm1.curr_fwft_state[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(\n_0_gpregsm1.curr_fwft_state[0]_i_1 ),
        .Q(curr_fwft_state));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(\n_0_gpregsm1.curr_fwft_state[1]_i_1 ),
        .Q(\n_0_gpregsm1.curr_fwft_state_reg[1] ));
LUT6 #(
    .INIT(64'hBBBBABBBAAAAAAAA)) 
     ram_empty_fb_i_i_1
       (.I0(comp0),
        .I1(p_18_out),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(curr_fwft_state),
        .I4(rd_en),
        .I5(comp1),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module control_to_core_slave_axi_rd_fwft_24
   (empty,
    E,
    O1,
    tmp_ram_rd_en,
    O2,
    rd_clk,
    Q,
    rd_en,
    p_18_out,
    comp0,
    comp1);
  output empty;
  output [0:0]E;
  output O1;
  output tmp_ram_rd_en;
  output [0:0]O2;
  input rd_clk;
  input [1:0]Q;
  input rd_en;
  input p_18_out;
  input comp0;
  input comp1;

  wire [0:0]E;
  wire O1;
  wire [0:0]O2;
  wire [1:0]Q;
  wire comp0;
  wire comp1;
  wire [0:0]curr_fwft_state;
  wire empty;
  wire empty_fwft_fb;
  wire empty_fwft_i0;
  wire \n_0_gpregsm1.curr_fwft_state[0]_i_1 ;
  wire \n_0_gpregsm1.curr_fwft_state[1]_i_1 ;
  wire \n_0_gpregsm1.curr_fwft_state_reg[1] ;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;

LUT5 #(
    .INIT(32'hAAAAEFFF)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(Q[0]),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .I3(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I4(p_18_out),
        .O(tmp_ram_rd_en));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_fb_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty_fwft_fb));
(* SOFT_HLUTNM = "soft_lutpair44" *) 
   LUT4 #(
    .INIT(16'hCF08)) 
     empty_fwft_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(empty_fwft_fb),
        .O(empty_fwft_i0));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty));
(* SOFT_HLUTNM = "soft_lutpair43" *) 
   LUT4 #(
    .INIT(16'h5515)) 
     \gc0.count_d1[8]_i_1 
       (.I0(p_18_out),
        .I1(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I2(curr_fwft_state),
        .I3(rd_en),
        .O(E));
(* SOFT_HLUTNM = "soft_lutpair44" *) 
   LUT3 #(
    .INIT(8'h8A)) 
     \goreg_bm.dout_i[35]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .O(O2));
LUT3 #(
    .INIT(8'hBA)) 
     \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .O(\n_0_gpregsm1.curr_fwft_state[0]_i_1 ));
LUT4 #(
    .INIT(16'h08FF)) 
     \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(curr_fwft_state),
        .I2(rd_en),
        .I3(p_18_out),
        .O(\n_0_gpregsm1.curr_fwft_state[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(\n_0_gpregsm1.curr_fwft_state[0]_i_1 ),
        .Q(curr_fwft_state));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(\n_0_gpregsm1.curr_fwft_state[1]_i_1 ),
        .Q(\n_0_gpregsm1.curr_fwft_state_reg[1] ));
(* SOFT_HLUTNM = "soft_lutpair43" *) 
   LUT6 #(
    .INIT(64'hBBBBABBBAAAAAAAA)) 
     ram_empty_fb_i_i_1
       (.I0(comp0),
        .I1(p_18_out),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(curr_fwft_state),
        .I4(rd_en),
        .I5(comp1),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module control_to_core_slave_axi_rd_fwft_42
   (empty,
    O1,
    O2,
    O4,
    O5,
    O6,
    E,
    rd_clk,
    Q,
    p_18_out,
    rd_en,
    WR_PNTR_RD,
    I1,
    p_0_out,
    p_0_out_0);
  output empty;
  output O1;
  output [1:0]O2;
  output O4;
  output O5;
  output O6;
  output [0:0]E;
  input rd_clk;
  input [0:0]Q;
  input p_18_out;
  input rd_en;
  input [0:0]WR_PNTR_RD;
  input [0:0]I1;
  input [2:0]p_0_out;
  input [2:0]p_0_out_0;

  wire [0:0]E;
  wire [0:0]I1;
  wire O1;
  wire [1:0]O2;
  wire O4;
  wire O5;
  wire O6;
  wire [0:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire empty;
  wire empty_fwft_fb;
  wire empty_fwft_i0;
  wire [1:0]next_fwft_state;
  wire [2:0]p_0_out;
  wire [2:0]p_0_out_0;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;

(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_fb_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q),
        .Q(empty_fwft_fb));
(* SOFT_HLUTNM = "soft_lutpair32" *) 
   LUT4 #(
    .INIT(16'hBA22)) 
     empty_fwft_i_i_1
       (.I0(empty_fwft_fb),
        .I1(O2[1]),
        .I2(rd_en),
        .I3(O2[0]),
        .O(empty_fwft_i0));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q),
        .Q(empty));
(* SOFT_HLUTNM = "soft_lutpair31" *) 
   LUT4 #(
    .INIT(16'h00BF)) 
     \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(O2[0]),
        .I2(O2[1]),
        .I3(p_18_out),
        .O(E));
(* SOFT_HLUTNM = "soft_lutpair32" *) 
   LUT6 #(
    .INIT(64'hFFFFAAEA0000AA2A)) 
     \gpr1.dout_i[0]_i_1 
       (.I0(p_0_out[0]),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(p_18_out),
        .I5(p_0_out_0[0]),
        .O(O6));
(* SOFT_HLUTNM = "soft_lutpair31" *) 
   LUT6 #(
    .INIT(64'hFFFFAAEA0000AA2A)) 
     \gpr1.dout_i[1]_i_1 
       (.I0(p_0_out[1]),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(p_18_out),
        .I5(p_0_out_0[1]),
        .O(O5));
(* SOFT_HLUTNM = "soft_lutpair30" *) 
   LUT6 #(
    .INIT(64'hFFFFAAEA0000AA2A)) 
     \gpr1.dout_i[2]_i_1 
       (.I0(p_0_out[2]),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(p_18_out),
        .I5(p_0_out_0[2]),
        .O(O4));
LUT3 #(
    .INIT(8'hBA)) 
     \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(O2[1]),
        .I1(rd_en),
        .I2(O2[0]),
        .O(next_fwft_state[0]));
LUT4 #(
    .INIT(16'h40FF)) 
     \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(O2[0]),
        .I2(O2[1]),
        .I3(p_18_out),
        .O(next_fwft_state[1]));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[0]),
        .Q(O2[0]));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[1]),
        .Q(O2[1]));
(* SOFT_HLUTNM = "soft_lutpair30" *) 
   LUT6 #(
    .INIT(64'h5515000000005515)) 
     ram_empty_fb_i_i_7
       (.I0(p_18_out),
        .I1(O2[1]),
        .I2(O2[0]),
        .I3(rd_en),
        .I4(WR_PNTR_RD),
        .I5(I1),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module control_to_core_slave_axi_rd_fwft_61
   (empty,
    O1,
    tmp_ram_rd_en,
    E,
    O2,
    rd_clk,
    Q,
    p_18_out,
    rd_en,
    WR_PNTR_RD,
    I1);
  output empty;
  output O1;
  output tmp_ram_rd_en;
  output [0:0]E;
  output [0:0]O2;
  input rd_clk;
  input [1:0]Q;
  input p_18_out;
  input rd_en;
  input [0:0]WR_PNTR_RD;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire O1;
  wire [0:0]O2;
  wire [1:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire [0:0]curr_fwft_state;
  wire empty;
  wire empty_fwft_fb;
  wire empty_fwft_i0;
  wire \n_0_gpregsm1.curr_fwft_state_reg[1] ;
  wire [1:0]next_fwft_state;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;

LUT5 #(
    .INIT(32'hBABBBBBB)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_1 
       (.I0(Q[0]),
        .I1(p_18_out),
        .I2(rd_en),
        .I3(curr_fwft_state),
        .I4(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .O(tmp_ram_rd_en));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_fb_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty_fwft_fb));
(* SOFT_HLUTNM = "soft_lutpair19" *) 
   LUT4 #(
    .INIT(16'hBA22)) 
     empty_fwft_i_i_1
       (.I0(empty_fwft_fb),
        .I1(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I2(rd_en),
        .I3(curr_fwft_state),
        .O(empty_fwft_i0));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty));
(* SOFT_HLUTNM = "soft_lutpair18" *) 
   LUT4 #(
    .INIT(16'h00BF)) 
     \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(p_18_out),
        .O(E));
(* SOFT_HLUTNM = "soft_lutpair19" *) 
   LUT3 #(
    .INIT(8'hA2)) 
     \goreg_bm.dout_i[47]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(curr_fwft_state),
        .I2(rd_en),
        .O(O2));
LUT3 #(
    .INIT(8'hBA)) 
     \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .O(next_fwft_state[0]));
(* SOFT_HLUTNM = "soft_lutpair18" *) 
   LUT4 #(
    .INIT(16'h40FF)) 
     \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(p_18_out),
        .O(next_fwft_state[1]));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(next_fwft_state[1]),
        .Q(\n_0_gpregsm1.curr_fwft_state_reg[1] ));
LUT6 #(
    .INIT(64'h5515000000005515)) 
     ram_empty_fb_i_i_7
       (.I0(p_18_out),
        .I1(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I2(curr_fwft_state),
        .I3(rd_en),
        .I4(WR_PNTR_RD),
        .I5(I1),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module control_to_core_slave_axi_rd_fwft_95
   (empty,
    O1,
    tmp_ram_rd_en,
    E,
    O2,
    rd_clk,
    Q,
    p_18_out,
    rd_en,
    I1,
    I2);
  output empty;
  output O1;
  output tmp_ram_rd_en;
  output [0:0]E;
  output [0:0]O2;
  input rd_clk;
  input [1:0]Q;
  input p_18_out;
  input rd_en;
  input [0:0]I1;
  input [0:0]I2;

  wire [0:0]E;
  wire [0:0]I1;
  wire [0:0]I2;
  wire O1;
  wire [0:0]O2;
  wire [1:0]Q;
  wire [0:0]curr_fwft_state;
  wire empty;
  wire empty_fwft_fb;
  wire empty_fwft_i0;
  wire \n_0_gpregsm1.curr_fwft_state_reg[1] ;
  wire [1:0]next_fwft_state;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;

LUT5 #(
    .INIT(32'hBABBBBBB)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_1 
       (.I0(Q[0]),
        .I1(p_18_out),
        .I2(rd_en),
        .I3(curr_fwft_state),
        .I4(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .O(tmp_ram_rd_en));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_fb_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty_fwft_fb));
(* SOFT_HLUTNM = "soft_lutpair7" *) 
   LUT4 #(
    .INIT(16'hBA22)) 
     empty_fwft_i_i_1
       (.I0(empty_fwft_fb),
        .I1(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I2(rd_en),
        .I3(curr_fwft_state),
        .O(empty_fwft_i0));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q[1]),
        .Q(empty));
(* SOFT_HLUTNM = "soft_lutpair6" *) 
   LUT4 #(
    .INIT(16'h00BF)) 
     \gc0.count_d1[7]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(p_18_out),
        .O(E));
(* SOFT_HLUTNM = "soft_lutpair7" *) 
   LUT3 #(
    .INIT(8'hA2)) 
     \goreg_bm.dout_i[47]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(curr_fwft_state),
        .I2(rd_en),
        .O(O2));
LUT3 #(
    .INIT(8'hBA)) 
     \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I1(rd_en),
        .I2(curr_fwft_state),
        .O(next_fwft_state[0]));
(* SOFT_HLUTNM = "soft_lutpair6" *) 
   LUT4 #(
    .INIT(16'h40FF)) 
     \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(rd_en),
        .I1(curr_fwft_state),
        .I2(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I3(p_18_out),
        .O(next_fwft_state[1]));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state));
(* equivalent_register_removal = "no" *) 
   FDCE #(
    .INIT(1'b0)) 
     \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(Q[1]),
        .D(next_fwft_state[1]),
        .Q(\n_0_gpregsm1.curr_fwft_state_reg[1] ));
LUT6 #(
    .INIT(64'h5515000000005515)) 
     ram_empty_fb_i_i_7
       (.I0(p_18_out),
        .I1(\n_0_gpregsm1.curr_fwft_state_reg[1] ),
        .I2(curr_fwft_state),
        .I3(rd_en),
        .I4(I1),
        .I5(I2),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module control_to_core_slave_axi_rd_logic
   (empty,
    O1,
    O2,
    O3,
    O4,
    O5,
    O6,
    rd_clk,
    Q,
    WR_PNTR_RD,
    I1,
    rd_en,
    p_0_out,
    p_0_out_0);
  output empty;
  output [1:0]O1;
  output [1:0]O2;
  output [7:0]O3;
  output O4;
  output O5;
  output O6;
  input rd_clk;
  input [0:0]Q;
  input [7:0]WR_PNTR_RD;
  input I1;
  input rd_en;
  input [2:0]p_0_out;
  input [2:0]p_0_out_0;

  wire I1;
  wire [1:0]O1;
  wire [1:0]O2;
  wire [7:0]O3;
  wire O4;
  wire O5;
  wire O6;
  wire [0:0]Q;
  wire [7:0]WR_PNTR_RD;
  wire empty;
  wire n_11_rpntr;
  wire \n_1_gr1.rfwft ;
  wire [2:0]p_0_out;
  wire [2:0]p_0_out_0;
  wire p_14_out;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire [0:0]rd_pntr_plus1;

control_to_core_slave_axi_rd_fwft_42 \gr1.rfwft 
       (.E(p_14_out),
        .I1(rd_pntr_plus1),
        .O1(\n_1_gr1.rfwft ),
        .O2(O2),
        .O4(O4),
        .O5(O5),
        .O6(O6),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD[0]),
        .empty(empty),
        .p_0_out(p_0_out),
        .p_0_out_0(p_0_out_0),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en));
control_to_core_slave_axi_rd_status_flags_as \gras.rsts 
       (.I1(n_11_rpntr),
        .Q(Q),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk));
control_to_core_slave_axi_rd_bin_cntr rpntr
       (.E(p_14_out),
        .I1(\n_1_gr1.rfwft ),
        .I2(I1),
        .I3(Q),
        .O1(n_11_rpntr),
        .O3(O3),
        .Q({O1,rd_pntr_plus1}),
        .WR_PNTR_RD(WR_PNTR_RD),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module control_to_core_slave_axi_rd_logic_55
   (empty,
    O1,
    O2,
    tmp_ram_rd_en,
    E,
    rd_clk,
    Q,
    WR_PNTR_RD,
    I1,
    rd_en);
  output empty;
  output [1:0]O1;
  output [7:0]O2;
  output tmp_ram_rd_en;
  output [0:0]E;
  input rd_clk;
  input [1:0]Q;
  input [7:0]WR_PNTR_RD;
  input I1;
  input rd_en;

  wire [0:0]E;
  wire I1;
  wire [1:0]O1;
  wire [7:0]O2;
  wire [1:0]Q;
  wire [7:0]WR_PNTR_RD;
  wire empty;
  wire n_11_rpntr;
  wire \n_1_gr1.rfwft ;
  wire p_14_out;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire [0:0]rd_pntr_plus1;
  wire tmp_ram_rd_en;

control_to_core_slave_axi_rd_fwft_61 \gr1.rfwft 
       (.E(p_14_out),
        .I1(rd_pntr_plus1),
        .O1(\n_1_gr1.rfwft ),
        .O2(E),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD[0]),
        .empty(empty),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
control_to_core_slave_axi_rd_status_flags_as_62 \gras.rsts 
       (.I1(n_11_rpntr),
        .Q(Q[1]),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk));
control_to_core_slave_axi_rd_bin_cntr_63 rpntr
       (.E(p_14_out),
        .I1(\n_1_gr1.rfwft ),
        .I2(I1),
        .I3(Q[1]),
        .O1(n_11_rpntr),
        .O2(O2),
        .Q({O1,rd_pntr_plus1}),
        .WR_PNTR_RD(WR_PNTR_RD),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module control_to_core_slave_axi_rd_logic_82
   (empty,
    O1,
    O2,
    tmp_ram_rd_en,
    E,
    rd_clk,
    Q,
    I1,
    I2,
    rd_en);
  output empty;
  output [1:0]O1;
  output [7:0]O2;
  output tmp_ram_rd_en;
  output [0:0]E;
  input rd_clk;
  input [1:0]Q;
  input [7:0]I1;
  input I2;
  input rd_en;

  wire [0:0]E;
  wire [7:0]I1;
  wire I2;
  wire [1:0]O1;
  wire [7:0]O2;
  wire [1:0]Q;
  wire empty;
  wire n_11_rpntr;
  wire \n_1_gr1.rfwft ;
  wire p_14_out;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire [0:0]rd_pntr_plus1;
  wire tmp_ram_rd_en;

control_to_core_slave_axi_rd_fwft_95 \gr1.rfwft 
       (.E(p_14_out),
        .I1(I1[0]),
        .I2(rd_pntr_plus1),
        .O1(\n_1_gr1.rfwft ),
        .O2(E),
        .Q(Q),
        .empty(empty),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
control_to_core_slave_axi_rd_status_flags_as_96 \gras.rsts 
       (.I1(n_11_rpntr),
        .Q(Q[1]),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk));
control_to_core_slave_axi_rd_bin_cntr_97 rpntr
       (.E(p_14_out),
        .I1(I1),
        .I2(\n_1_gr1.rfwft ),
        .I3(I2),
        .I4(Q[1]),
        .O1(n_11_rpntr),
        .O2(O2),
        .Q({O1,rd_pntr_plus1}),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module control_to_core_slave_axi_rd_logic__parameterized0
   (empty,
    O1,
    tmp_ram_rd_en,
    E,
    O2,
    I1,
    v1_reg,
    rd_clk,
    Q,
    rd_en,
    I2);
  output empty;
  output [7:0]O1;
  output tmp_ram_rd_en;
  output [0:0]E;
  output [8:0]O2;
  input I1;
  input [3:0]v1_reg;
  input rd_clk;
  input [1:0]Q;
  input rd_en;
  input [8:0]I2;

  wire [0:0]E;
  wire I1;
  wire [8:0]I2;
  wire [7:0]O1;
  wire [8:0]O2;
  wire [1:0]Q;
  wire [3:0]\c0/v1_reg ;
  wire comp0;
  wire comp1;
  wire empty;
  wire n_0_rpntr;
  wire \n_1_gr1.rfwft ;
  wire \n_2_gr1.rfwft ;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;
  wire [3:0]v1_reg;

control_to_core_slave_axi_rd_fwft \gr1.rfwft 
       (.E(\n_1_gr1.rfwft ),
        .O1(\n_2_gr1.rfwft ),
        .O2(E),
        .Q(Q),
        .comp0(comp0),
        .comp1(comp1),
        .empty(empty),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
control_to_core_slave_axi_rd_status_flags_as__parameterized0 \gras.rsts 
       (.I1(I1),
        .I2(n_0_rpntr),
        .I3(\n_2_gr1.rfwft ),
        .Q(Q[1]),
        .comp0(comp0),
        .comp1(comp1),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .v1_reg(v1_reg),
        .v1_reg_0(\c0/v1_reg ));
control_to_core_slave_axi_rd_bin_cntr__parameterized0 rpntr
       (.E(\n_1_gr1.rfwft ),
        .I1(Q[1]),
        .I2(I2),
        .O1(n_0_rpntr),
        .O2(O2),
        .Q(O1),
        .rd_clk(rd_clk),
        .v1_reg(\c0/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module control_to_core_slave_axi_rd_logic__parameterized0_16
   (empty,
    O1,
    tmp_ram_rd_en,
    E,
    O2,
    I1,
    v1_reg,
    rd_clk,
    Q,
    rd_en,
    WR_PNTR_RD);
  output empty;
  output [7:0]O1;
  output tmp_ram_rd_en;
  output [0:0]E;
  output [8:0]O2;
  input I1;
  input [3:0]v1_reg;
  input rd_clk;
  input [1:0]Q;
  input rd_en;
  input [8:0]WR_PNTR_RD;

  wire [0:0]E;
  wire I1;
  wire [7:0]O1;
  wire [8:0]O2;
  wire [1:0]Q;
  wire [8:0]WR_PNTR_RD;
  wire [3:0]\c0/v1_reg ;
  wire comp0;
  wire comp1;
  wire empty;
  wire n_0_rpntr;
  wire \n_1_gr1.rfwft ;
  wire \n_2_gr1.rfwft ;
  wire p_18_out;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;
  wire [3:0]v1_reg;

control_to_core_slave_axi_rd_fwft_24 \gr1.rfwft 
       (.E(\n_1_gr1.rfwft ),
        .O1(\n_2_gr1.rfwft ),
        .O2(E),
        .Q(Q),
        .comp0(comp0),
        .comp1(comp1),
        .empty(empty),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
control_to_core_slave_axi_rd_status_flags_as__parameterized0_25 \gras.rsts 
       (.I1(I1),
        .I2(n_0_rpntr),
        .I3(\n_2_gr1.rfwft ),
        .Q(Q[1]),
        .comp0(comp0),
        .comp1(comp1),
        .p_18_out(p_18_out),
        .rd_clk(rd_clk),
        .v1_reg(v1_reg),
        .v1_reg_0(\c0/v1_reg ));
control_to_core_slave_axi_rd_bin_cntr__parameterized0_26 rpntr
       (.E(\n_1_gr1.rfwft ),
        .I1(Q[1]),
        .O1(n_0_rpntr),
        .O2(O2),
        .Q(O1),
        .WR_PNTR_RD(WR_PNTR_RD),
        .rd_clk(rd_clk),
        .v1_reg(\c0/v1_reg ));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module control_to_core_slave_axi_rd_status_flags_as
   (p_18_out,
    I1,
    rd_clk,
    Q);
  output p_18_out;
  input I1;
  input rd_clk;
  input [0:0]Q;

  wire I1;
  wire [0:0]Q;
  wire p_18_out;
  wire rd_clk;

(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(I1),
        .PRE(Q),
        .Q(p_18_out));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module control_to_core_slave_axi_rd_status_flags_as_62
   (p_18_out,
    I1,
    rd_clk,
    Q);
  output p_18_out;
  input I1;
  input rd_clk;
  input [0:0]Q;

  wire I1;
  wire [0:0]Q;
  wire p_18_out;
  wire rd_clk;

(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(I1),
        .PRE(Q),
        .Q(p_18_out));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module control_to_core_slave_axi_rd_status_flags_as_96
   (p_18_out,
    I1,
    rd_clk,
    Q);
  output p_18_out;
  input I1;
  input rd_clk;
  input [0:0]Q;

  wire I1;
  wire [0:0]Q;
  wire p_18_out;
  wire rd_clk;

(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(I1),
        .PRE(Q),
        .Q(p_18_out));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module control_to_core_slave_axi_rd_status_flags_as__parameterized0
   (comp0,
    comp1,
    p_18_out,
    v1_reg_0,
    I1,
    v1_reg,
    I2,
    I3,
    rd_clk,
    Q);
  output comp0;
  output comp1;
  output p_18_out;
  input [3:0]v1_reg_0;
  input I1;
  input [3:0]v1_reg;
  input I2;
  input I3;
  input rd_clk;
  input [0:0]Q;

  wire I1;
  wire I2;
  wire I3;
  wire [0:0]Q;
  wire comp0;
  wire comp1;
  wire p_18_out;
  wire rd_clk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

control_to_core_slave_axi_compare__parameterized0_2 c0
       (.I1(I1),
        .comp0(comp0),
        .v1_reg_0(v1_reg_0));
control_to_core_slave_axi_compare__parameterized0_3 c1
       (.I2(I2),
        .comp1(comp1),
        .v1_reg(v1_reg));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(I3),
        .PRE(Q),
        .Q(p_18_out));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module control_to_core_slave_axi_rd_status_flags_as__parameterized0_25
   (comp0,
    comp1,
    p_18_out,
    v1_reg_0,
    I1,
    v1_reg,
    I2,
    I3,
    rd_clk,
    Q);
  output comp0;
  output comp1;
  output p_18_out;
  input [3:0]v1_reg_0;
  input I1;
  input [3:0]v1_reg;
  input I2;
  input I3;
  input rd_clk;
  input [0:0]Q;

  wire I1;
  wire I2;
  wire I3;
  wire [0:0]Q;
  wire comp0;
  wire comp1;
  wire p_18_out;
  wire rd_clk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

control_to_core_slave_axi_compare__parameterized0_27 c0
       (.I1(I1),
        .comp0(comp0),
        .v1_reg_0(v1_reg_0));
control_to_core_slave_axi_compare__parameterized0_28 c1
       (.I2(I2),
        .comp1(comp1),
        .v1_reg(v1_reg));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(I3),
        .PRE(Q),
        .Q(p_18_out));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module control_to_core_slave_axi_reset_blk_ramfifo
   (rst_d2,
    rst_full_gen_i,
    Q,
    O1,
    wr_clk,
    rst,
    rd_clk);
  output rst_d2;
  output rst_full_gen_i;
  output [1:0]Q;
  output [2:0]O1;
  input wr_clk;
  input rst;
  input rd_clk;

  wire [2:0]O1;
  wire [1:0]Q;
  wire \n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ;
  wire \n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d1;
  wire rd_rst_asreg_d2;
  wire rst;
  wire rst_d1;
  wire rst_d2;
  wire rst_d3;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d1;
  wire wr_rst_asreg_d2;

FDCE #(
    .INIT(1'b0)) 
     \grstd1.grst_full.grst_f.RST_FULL_GEN_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst),
        .D(rst_d3),
        .Q(rst_full_gen_i));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_d1));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst),
        .Q(rst_d2));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(rst),
        .Q(rst_d3));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(rd_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg_d1),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(rd_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(rd_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[1]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(wr_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg_d1),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(wr_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(wr_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[1]));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module control_to_core_slave_axi_reset_blk_ramfifo_18
   (rst_d2,
    rst_full_gen_i,
    Q,
    O1,
    wr_clk,
    rst,
    rd_clk);
  output rst_d2;
  output rst_full_gen_i;
  output [1:0]Q;
  output [2:0]O1;
  input wr_clk;
  input rst;
  input rd_clk;

  wire [2:0]O1;
  wire [1:0]Q;
  wire \n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ;
  wire \n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d1;
  wire rd_rst_asreg_d2;
  wire rst;
  wire rst_d1;
  wire rst_d2;
  wire rst_d3;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d1;
  wire wr_rst_asreg_d2;

FDCE #(
    .INIT(1'b0)) 
     \grstd1.grst_full.grst_f.RST_FULL_GEN_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst),
        .D(rst_d3),
        .Q(rst_full_gen_i));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_d1));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst),
        .Q(rst_d2));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(rst),
        .Q(rst_d3));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(rd_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg_d1),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(rd_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(rd_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[1]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(wr_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg_d1),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(wr_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(wr_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[1]));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module control_to_core_slave_axi_reset_blk_ramfifo_57
   (rst_d2,
    rst_full_gen_i,
    Q,
    O1,
    wr_clk,
    rst,
    rd_clk);
  output rst_d2;
  output rst_full_gen_i;
  output [1:0]Q;
  output [2:0]O1;
  input wr_clk;
  input rst;
  input rd_clk;

  wire [2:0]O1;
  wire [1:0]Q;
  wire \n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ;
  wire \n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d1;
  wire rd_rst_asreg_d2;
  wire rst;
  wire rst_d1;
  wire rst_d2;
  wire rst_d3;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d1;
  wire wr_rst_asreg_d2;

FDCE #(
    .INIT(1'b0)) 
     \grstd1.grst_full.grst_f.RST_FULL_GEN_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst),
        .D(rst_d3),
        .Q(rst_full_gen_i));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_d1));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst),
        .Q(rst_d2));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(rst),
        .Q(rst_d3));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(rd_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg_d1),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(rd_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(rd_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[1]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(wr_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg_d1),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(wr_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(wr_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[1]));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module control_to_core_slave_axi_reset_blk_ramfifo_85
   (rst_d2,
    rst_full_gen_i,
    Q,
    O1,
    wr_clk,
    rst,
    rd_clk);
  output rst_d2;
  output rst_full_gen_i;
  output [1:0]Q;
  output [2:0]O1;
  input wr_clk;
  input rst;
  input rd_clk;

  wire [2:0]O1;
  wire [1:0]Q;
  wire \n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ;
  wire \n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d1;
  wire rd_rst_asreg_d2;
  wire rst;
  wire rst_d1;
  wire rst_d2;
  wire rst_d3;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d1;
  wire wr_rst_asreg_d2;

FDCE #(
    .INIT(1'b0)) 
     \grstd1.grst_full.grst_f.RST_FULL_GEN_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst),
        .D(rst_d3),
        .Q(rst_full_gen_i));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_d1));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst),
        .Q(rst_d2));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(rst),
        .Q(rst_d3));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(rd_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg_d1),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(rd_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(rd_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[1]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(wr_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg_d1),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(wr_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(wr_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[1]));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module control_to_core_slave_axi_reset_blk_ramfifo__parameterized0
   (rst_d2,
    rst_full_gen_i,
    Q,
    O1,
    wr_clk,
    rst,
    rd_clk);
  output rst_d2;
  output rst_full_gen_i;
  output [1:0]Q;
  output [2:0]O1;
  input wr_clk;
  input rst;
  input rd_clk;

  wire [2:0]O1;
  wire [1:0]Q;
  wire \n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ;
  wire \n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ;
  wire rd_clk;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d1;
  wire rd_rst_asreg_d2;
  wire rst;
  wire rst_d1;
  wire rst_d2;
  wire rst_d3;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d1;
  wire wr_rst_asreg_d2;

FDCE #(
    .INIT(1'b0)) 
     \grstd1.grst_full.grst_f.RST_FULL_GEN_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst),
        .D(rst_d3),
        .Q(rst_full_gen_i));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_d1));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst),
        .Q(rst_d2));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE #(
    .INIT(1'b1)) 
     \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(rst),
        .Q(rst_d3));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(rd_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg_d1),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(rd_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(rd_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[1]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 ),
        .Q(O1[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(wr_rst_asreg_d1),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDRE #(
    .INIT(1'b0)) 
     \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg_d1),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDPE \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(wr_rst_asreg_d1),
        .D(1'b0),
        .PRE(rst),
        .Q(wr_rst_asreg));
LUT2 #(
    .INIT(4'h2)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[0]));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\n_0_ngwrdrst.grst.g7serrst.wr_rst_reg[1]_i_1 ),
        .Q(Q[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff
   (Q,
    I1,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]I1;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]I1;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_100
   (Q,
    D,
    rd_clk,
    I7);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [7:0]D;
  wire [0:0]I7;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_101
   (Q,
    D,
    wr_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_102
   (Q,
    D,
    rd_clk,
    I7);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [7:0]D;
  wire [0:0]I7;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_103
   (Q,
    D,
    wr_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_104
   (Q,
    D,
    rd_clk,
    I7);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [7:0]D;
  wire [0:0]I7;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_105
   (Q,
    D,
    wr_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_106
   (Q,
    D,
    rd_clk,
    I7);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [7:0]D;
  wire [0:0]I7;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_107
   (Q,
    D,
    wr_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_108
   (p_0_in,
    D,
    rd_clk,
    I7);
  output [7:0]p_0_in;
  input [7:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [7:0]D;
  wire [0:0]I7;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire [7:0]p_0_in;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(p_0_in[7]));
(* SOFT_HLUTNM = "soft_lutpair1" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(p_0_in[3]),
        .O(p_0_in[0]));
(* SOFT_HLUTNM = "soft_lutpair1" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(p_0_in[3]),
        .O(p_0_in[1]));
LUT6 #(
    .INIT(64'h6996966996696996)) 
     \wr_pntr_bin[2]_i_1 
       (.I0(\n_0_Q_reg_reg[3] ),
        .I1(p_0_in[7]),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(\n_0_Q_reg_reg[6] ),
        .I4(\n_0_Q_reg_reg[4] ),
        .I5(\n_0_Q_reg_reg[2] ),
        .O(p_0_in[2]));
(* SOFT_HLUTNM = "soft_lutpair0" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \wr_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(p_0_in[7]),
        .I4(\n_0_Q_reg_reg[3] ),
        .O(p_0_in[3]));
(* SOFT_HLUTNM = "soft_lutpair0" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[4]_i_1 
       (.I0(p_0_in[7]),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[4] ),
        .O(p_0_in[4]));
(* SOFT_HLUTNM = "soft_lutpair2" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[5]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(p_0_in[7]),
        .O(p_0_in[5]));
(* SOFT_HLUTNM = "soft_lutpair2" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(p_0_in[7]),
        .O(p_0_in[6]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_109
   (Q,
    O1,
    D,
    wr_clk,
    I6);
  output [0:0]Q;
  output [6:0]O1;
  input [7:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [6:0]O1;
  wire [0:0]Q;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q));
(* SOFT_HLUTNM = "soft_lutpair5" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(O1[3]),
        .O(O1[0]));
(* SOFT_HLUTNM = "soft_lutpair5" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(O1[3]),
        .O(O1[1]));
(* SOFT_HLUTNM = "soft_lutpair3" *) 
   LUT6 #(
    .INIT(64'h6996966996696996)) 
     \rd_pntr_bin[2]_i_1 
       (.I0(\n_0_Q_reg_reg[3] ),
        .I1(Q),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(\n_0_Q_reg_reg[6] ),
        .I4(\n_0_Q_reg_reg[4] ),
        .I5(\n_0_Q_reg_reg[2] ),
        .O(O1[2]));
(* SOFT_HLUTNM = "soft_lutpair3" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \rd_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(Q),
        .I4(\n_0_Q_reg_reg[3] ),
        .O(O1[3]));
(* SOFT_HLUTNM = "soft_lutpair4" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[4]_i_1 
       (.I0(Q),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[4] ),
        .O(O1[4]));
(* SOFT_HLUTNM = "soft_lutpair4" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[5]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(Q),
        .O(O1[5]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(Q),
        .O(O1[6]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_43
   (Q,
    I1,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]I1;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]I1;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_44
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_45
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_46
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_47
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_48
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_49
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_50
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_51
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_52
   (p_0_in,
    D,
    rd_clk,
    I6);
  output [7:0]p_0_in;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire [7:0]p_0_in;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(p_0_in[7]));
(* SOFT_HLUTNM = "soft_lutpair26" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(p_0_in[3]),
        .O(p_0_in[0]));
(* SOFT_HLUTNM = "soft_lutpair26" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(p_0_in[3]),
        .O(p_0_in[1]));
(* SOFT_HLUTNM = "soft_lutpair24" *) 
   LUT6 #(
    .INIT(64'h6996966996696996)) 
     \wr_pntr_bin[2]_i_1 
       (.I0(\n_0_Q_reg_reg[3] ),
        .I1(p_0_in[7]),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(\n_0_Q_reg_reg[6] ),
        .I4(\n_0_Q_reg_reg[4] ),
        .I5(\n_0_Q_reg_reg[2] ),
        .O(p_0_in[2]));
(* SOFT_HLUTNM = "soft_lutpair24" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \wr_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(p_0_in[7]),
        .I4(\n_0_Q_reg_reg[3] ),
        .O(p_0_in[3]));
(* SOFT_HLUTNM = "soft_lutpair25" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[4]_i_1 
       (.I0(p_0_in[7]),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[4] ),
        .O(p_0_in[4]));
(* SOFT_HLUTNM = "soft_lutpair25" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[5]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(p_0_in[7]),
        .O(p_0_in[5]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(p_0_in[7]),
        .O(p_0_in[6]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_53
   (Q,
    O1,
    D,
    wr_clk,
    I5);
  output [0:0]Q;
  output [6:0]O1;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [6:0]O1;
  wire [0:0]Q;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q));
(* SOFT_HLUTNM = "soft_lutpair28" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(O1[3]),
        .O(O1[0]));
(* SOFT_HLUTNM = "soft_lutpair28" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(O1[3]),
        .O(O1[1]));
LUT6 #(
    .INIT(64'h6996966996696996)) 
     \rd_pntr_bin[2]_i_1 
       (.I0(\n_0_Q_reg_reg[3] ),
        .I1(Q),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(\n_0_Q_reg_reg[6] ),
        .I4(\n_0_Q_reg_reg[4] ),
        .I5(\n_0_Q_reg_reg[2] ),
        .O(O1[2]));
(* SOFT_HLUTNM = "soft_lutpair27" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \rd_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(Q),
        .I4(\n_0_Q_reg_reg[3] ),
        .O(O1[3]));
(* SOFT_HLUTNM = "soft_lutpair27" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[4]_i_1 
       (.I0(Q),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[4] ),
        .O(O1[4]));
(* SOFT_HLUTNM = "soft_lutpair29" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[5]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(Q),
        .O(O1[5]));
(* SOFT_HLUTNM = "soft_lutpair29" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(Q),
        .O(O1[6]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_64
   (Q,
    I1,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]I1;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]I1;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_65
   (Q,
    I1,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]I1;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]I1;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_66
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_67
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_68
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_69
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_70
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_71
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_72
   (Q,
    D,
    rd_clk,
    I6);
  output [7:0]Q;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_73
   (Q,
    D,
    wr_clk,
    I5);
  output [7:0]Q;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_74
   (p_0_in,
    D,
    rd_clk,
    I6);
  output [7:0]p_0_in;
  input [7:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [7:0]D;
  wire [0:0]I6;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire [7:0]p_0_in;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(p_0_in[7]));
(* SOFT_HLUTNM = "soft_lutpair13" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(p_0_in[3]),
        .O(p_0_in[0]));
(* SOFT_HLUTNM = "soft_lutpair13" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(p_0_in[3]),
        .O(p_0_in[1]));
LUT6 #(
    .INIT(64'h6996966996696996)) 
     \wr_pntr_bin[2]_i_1 
       (.I0(\n_0_Q_reg_reg[3] ),
        .I1(p_0_in[7]),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(\n_0_Q_reg_reg[6] ),
        .I4(\n_0_Q_reg_reg[4] ),
        .I5(\n_0_Q_reg_reg[2] ),
        .O(p_0_in[2]));
(* SOFT_HLUTNM = "soft_lutpair12" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \wr_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(p_0_in[7]),
        .I4(\n_0_Q_reg_reg[3] ),
        .O(p_0_in[3]));
(* SOFT_HLUTNM = "soft_lutpair12" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[4]_i_1 
       (.I0(p_0_in[7]),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[4] ),
        .O(p_0_in[4]));
(* SOFT_HLUTNM = "soft_lutpair14" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[5]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(p_0_in[7]),
        .O(p_0_in[5]));
(* SOFT_HLUTNM = "soft_lutpair14" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(p_0_in[7]),
        .O(p_0_in[6]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_75
   (Q,
    O1,
    D,
    wr_clk,
    I5);
  output [0:0]Q;
  output [6:0]O1;
  input [7:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [7:0]D;
  wire [0:0]I5;
  wire [6:0]O1;
  wire [0:0]Q;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q));
(* SOFT_HLUTNM = "soft_lutpair17" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(O1[3]),
        .O(O1[0]));
(* SOFT_HLUTNM = "soft_lutpair17" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(O1[3]),
        .O(O1[1]));
(* SOFT_HLUTNM = "soft_lutpair15" *) 
   LUT6 #(
    .INIT(64'h6996966996696996)) 
     \rd_pntr_bin[2]_i_1 
       (.I0(\n_0_Q_reg_reg[3] ),
        .I1(Q),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(\n_0_Q_reg_reg[6] ),
        .I4(\n_0_Q_reg_reg[4] ),
        .I5(\n_0_Q_reg_reg[2] ),
        .O(O1[2]));
(* SOFT_HLUTNM = "soft_lutpair15" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \rd_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[5] ),
        .I3(Q),
        .I4(\n_0_Q_reg_reg[3] ),
        .O(O1[3]));
(* SOFT_HLUTNM = "soft_lutpair16" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[4]_i_1 
       (.I0(Q),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[4] ),
        .O(O1[4]));
(* SOFT_HLUTNM = "soft_lutpair16" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[5]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(\n_0_Q_reg_reg[5] ),
        .I2(Q),
        .O(O1[5]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[6] ),
        .I1(Q),
        .O(O1[6]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_98
   (Q,
    I1,
    rd_clk,
    I7);
  output [7:0]Q;
  input [7:0]I1;
  input rd_clk;
  input [0:0]I7;

  wire [7:0]I1;
  wire [0:0]I7;
  wire [7:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff_99
   (Q,
    I1,
    wr_clk,
    I6);
  output [7:0]Q;
  input [7:0]I1;
  input wr_clk;
  input [0:0]I6;

  wire [7:0]I1;
  wire [0:0]I6;
  wire [7:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[7]),
        .Q(Q[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0
   (Q,
    I1,
    rd_clk,
    I7);
  output [8:0]Q;
  input [8:0]I1;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]I1;
  wire [0:0]I7;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(I1[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_10
   (Q,
    D,
    wr_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_11
   (Q,
    D,
    rd_clk,
    I7);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]D;
  wire [0:0]I7;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_12
   (Q,
    D,
    wr_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_13
   (p_0_in,
    D,
    rd_clk,
    I7);
  output [8:0]p_0_in;
  input [8:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]D;
  wire [0:0]I7;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire \n_0_Q_reg_reg[7] ;
  wire [8:0]p_0_in;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(\n_0_Q_reg_reg[7] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[8]),
        .Q(p_0_in[8]));
(* SOFT_HLUTNM = "soft_lutpair57" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(p_0_in[3]),
        .O(p_0_in[0]));
(* SOFT_HLUTNM = "soft_lutpair57" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(p_0_in[3]),
        .O(p_0_in[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[2]_i_1 
       (.I0(p_0_in[3]),
        .I1(\n_0_Q_reg_reg[2] ),
        .O(p_0_in[2]));
LUT6 #(
    .INIT(64'h6996966996696996)) 
     \wr_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(p_0_in[8]),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[7] ),
        .I4(\n_0_Q_reg_reg[5] ),
        .I5(\n_0_Q_reg_reg[3] ),
        .O(p_0_in[3]));
(* SOFT_HLUTNM = "soft_lutpair56" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \wr_pntr_bin[4]_i_1 
       (.I0(\n_0_Q_reg_reg[5] ),
        .I1(\n_0_Q_reg_reg[7] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(p_0_in[8]),
        .I4(\n_0_Q_reg_reg[4] ),
        .O(p_0_in[4]));
(* SOFT_HLUTNM = "soft_lutpair56" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[5]_i_1 
       (.I0(p_0_in[8]),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[7] ),
        .I3(\n_0_Q_reg_reg[5] ),
        .O(p_0_in[5]));
(* SOFT_HLUTNM = "soft_lutpair58" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(p_0_in[8]),
        .O(p_0_in[6]));
(* SOFT_HLUTNM = "soft_lutpair58" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[7]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(p_0_in[8]),
        .O(p_0_in[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_14
   (Q,
    O1,
    D,
    wr_clk,
    I6);
  output [0:0]Q;
  output [7:0]O1;
  input [8:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [7:0]O1;
  wire [0:0]Q;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire \n_0_Q_reg_reg[7] ;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(\n_0_Q_reg_reg[7] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q));
(* SOFT_HLUTNM = "soft_lutpair60" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(O1[3]),
        .O(O1[0]));
(* SOFT_HLUTNM = "soft_lutpair60" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(O1[3]),
        .O(O1[1]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[2]_i_1 
       (.I0(O1[3]),
        .I1(\n_0_Q_reg_reg[2] ),
        .O(O1[2]));
(* SOFT_HLUTNM = "soft_lutpair59" *) 
   LUT6 #(
    .INIT(64'h6996966996696996)) 
     \rd_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(Q),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[7] ),
        .I4(\n_0_Q_reg_reg[5] ),
        .I5(\n_0_Q_reg_reg[3] ),
        .O(O1[3]));
(* SOFT_HLUTNM = "soft_lutpair59" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \rd_pntr_bin[4]_i_1 
       (.I0(\n_0_Q_reg_reg[5] ),
        .I1(\n_0_Q_reg_reg[7] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(Q),
        .I4(\n_0_Q_reg_reg[4] ),
        .O(O1[4]));
(* SOFT_HLUTNM = "soft_lutpair61" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[5]_i_1 
       (.I0(Q),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[7] ),
        .I3(\n_0_Q_reg_reg[5] ),
        .O(O1[5]));
(* SOFT_HLUTNM = "soft_lutpair61" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(Q),
        .O(O1[6]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[7]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(Q),
        .O(O1[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_29
   (Q,
    I1,
    rd_clk,
    I6);
  output [8:0]Q;
  input [8:0]I1;
  input rd_clk;
  input [0:0]I6;

  wire [8:0]I1;
  wire [0:0]I6;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_30
   (Q,
    I1,
    wr_clk,
    I5);
  output [8:0]Q;
  input [8:0]I1;
  input wr_clk;
  input [0:0]I5;

  wire [8:0]I1;
  wire [0:0]I5;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(I1[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_31
   (Q,
    D,
    rd_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_32
   (Q,
    D,
    wr_clk,
    I5);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [8:0]D;
  wire [0:0]I5;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_33
   (Q,
    D,
    rd_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_34
   (Q,
    D,
    wr_clk,
    I5);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [8:0]D;
  wire [0:0]I5;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_35
   (Q,
    D,
    rd_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_36
   (Q,
    D,
    wr_clk,
    I5);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [8:0]D;
  wire [0:0]I5;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_37
   (Q,
    D,
    rd_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_38
   (Q,
    D,
    wr_clk,
    I5);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [8:0]D;
  wire [0:0]I5;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_39
   (p_0_in,
    D,
    rd_clk,
    I6);
  output [8:0]p_0_in;
  input [8:0]D;
  input rd_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire \n_0_Q_reg_reg[7] ;
  wire [8:0]p_0_in;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(\n_0_Q_reg_reg[7] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(p_0_in[8]));
(* SOFT_HLUTNM = "soft_lutpair38" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(p_0_in[3]),
        .O(p_0_in[0]));
(* SOFT_HLUTNM = "soft_lutpair38" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(p_0_in[3]),
        .O(p_0_in[1]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[2]_i_1 
       (.I0(p_0_in[3]),
        .I1(\n_0_Q_reg_reg[2] ),
        .O(p_0_in[2]));
(* SOFT_HLUTNM = "soft_lutpair37" *) 
   LUT6 #(
    .INIT(64'h6996966996696996)) 
     \wr_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(p_0_in[8]),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[7] ),
        .I4(\n_0_Q_reg_reg[5] ),
        .I5(\n_0_Q_reg_reg[3] ),
        .O(p_0_in[3]));
(* SOFT_HLUTNM = "soft_lutpair37" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \wr_pntr_bin[4]_i_1 
       (.I0(\n_0_Q_reg_reg[5] ),
        .I1(\n_0_Q_reg_reg[7] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(p_0_in[8]),
        .I4(\n_0_Q_reg_reg[4] ),
        .O(p_0_in[4]));
(* SOFT_HLUTNM = "soft_lutpair39" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \wr_pntr_bin[5]_i_1 
       (.I0(p_0_in[8]),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[7] ),
        .I3(\n_0_Q_reg_reg[5] ),
        .O(p_0_in[5]));
(* SOFT_HLUTNM = "soft_lutpair39" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \wr_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(p_0_in[8]),
        .O(p_0_in[6]));
LUT2 #(
    .INIT(4'h6)) 
     \wr_pntr_bin[7]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(p_0_in[8]),
        .O(p_0_in[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_4
   (Q,
    I1,
    wr_clk,
    I6);
  output [8:0]Q;
  input [8:0]I1;
  input wr_clk;
  input [0:0]I6;

  wire [8:0]I1;
  wire [0:0]I6;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(I1[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_40
   (Q,
    O1,
    D,
    wr_clk,
    I5);
  output [0:0]Q;
  output [7:0]O1;
  input [8:0]D;
  input wr_clk;
  input [0:0]I5;

  wire [8:0]D;
  wire [0:0]I5;
  wire [7:0]O1;
  wire [0:0]Q;
  wire \n_0_Q_reg_reg[0] ;
  wire \n_0_Q_reg_reg[1] ;
  wire \n_0_Q_reg_reg[2] ;
  wire \n_0_Q_reg_reg[3] ;
  wire \n_0_Q_reg_reg[4] ;
  wire \n_0_Q_reg_reg[5] ;
  wire \n_0_Q_reg_reg[6] ;
  wire \n_0_Q_reg_reg[7] ;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[0]),
        .Q(\n_0_Q_reg_reg[0] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[1]),
        .Q(\n_0_Q_reg_reg[1] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[2]),
        .Q(\n_0_Q_reg_reg[2] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[3]),
        .Q(\n_0_Q_reg_reg[3] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[4]),
        .Q(\n_0_Q_reg_reg[4] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[5]),
        .Q(\n_0_Q_reg_reg[5] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[6]),
        .Q(\n_0_Q_reg_reg[6] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[7]),
        .Q(\n_0_Q_reg_reg[7] ));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I5),
        .D(D[8]),
        .Q(Q));
(* SOFT_HLUTNM = "soft_lutpair41" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[0]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(\n_0_Q_reg_reg[0] ),
        .I3(O1[3]),
        .O(O1[0]));
(* SOFT_HLUTNM = "soft_lutpair41" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[1]_i_1 
       (.I0(\n_0_Q_reg_reg[2] ),
        .I1(\n_0_Q_reg_reg[1] ),
        .I2(O1[3]),
        .O(O1[1]));
LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[2]_i_1 
       (.I0(O1[3]),
        .I1(\n_0_Q_reg_reg[2] ),
        .O(O1[2]));
LUT6 #(
    .INIT(64'h6996966996696996)) 
     \rd_pntr_bin[3]_i_1 
       (.I0(\n_0_Q_reg_reg[4] ),
        .I1(Q),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(\n_0_Q_reg_reg[7] ),
        .I4(\n_0_Q_reg_reg[5] ),
        .I5(\n_0_Q_reg_reg[3] ),
        .O(O1[3]));
(* SOFT_HLUTNM = "soft_lutpair40" *) 
   LUT5 #(
    .INIT(32'h96696996)) 
     \rd_pntr_bin[4]_i_1 
       (.I0(\n_0_Q_reg_reg[5] ),
        .I1(\n_0_Q_reg_reg[7] ),
        .I2(\n_0_Q_reg_reg[6] ),
        .I3(Q),
        .I4(\n_0_Q_reg_reg[4] ),
        .O(O1[4]));
(* SOFT_HLUTNM = "soft_lutpair40" *) 
   LUT4 #(
    .INIT(16'h6996)) 
     \rd_pntr_bin[5]_i_1 
       (.I0(Q),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(\n_0_Q_reg_reg[7] ),
        .I3(\n_0_Q_reg_reg[5] ),
        .O(O1[5]));
(* SOFT_HLUTNM = "soft_lutpair42" *) 
   LUT3 #(
    .INIT(8'h96)) 
     \rd_pntr_bin[6]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(\n_0_Q_reg_reg[6] ),
        .I2(Q),
        .O(O1[6]));
(* SOFT_HLUTNM = "soft_lutpair42" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \rd_pntr_bin[7]_i_1 
       (.I0(\n_0_Q_reg_reg[7] ),
        .I1(Q),
        .O(O1[7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_5
   (Q,
    D,
    rd_clk,
    I7);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]D;
  wire [0:0]I7;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_6
   (Q,
    D,
    wr_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_7
   (Q,
    D,
    rd_clk,
    I7);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]D;
  wire [0:0]I7;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_8
   (Q,
    D,
    wr_clk,
    I6);
  output [8:0]Q;
  input [8:0]D;
  input wr_clk;
  input [0:0]I6;

  wire [8:0]D;
  wire [0:0]I6;
  wire [8:0]Q;
  wire wr_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I6),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module control_to_core_slave_axi_synchronizer_ff__parameterized0_9
   (Q,
    D,
    rd_clk,
    I7);
  output [8:0]Q;
  input [8:0]D;
  input rd_clk;
  input [0:0]I7;

  wire [8:0]D;
  wire [0:0]I7;
  wire [8:0]Q;
  wire rd_clk;

(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[0]),
        .Q(Q[0]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[1]),
        .Q(Q[1]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[2]),
        .Q(Q[2]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[3]),
        .Q(Q[3]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[4]),
        .Q(Q[4]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[5]),
        .Q(Q[5]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[6]),
        .Q(Q[6]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[7]),
        .Q(Q[7]));
(* ASYNC_REG *) 
   (* msgon = "true" *) 
   FDCE #(
    .INIT(1'b0)) 
     \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(I7),
        .D(D[8]),
        .Q(Q[8]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module control_to_core_slave_axi_wr_bin_cntr
   (O1,
    I3,
    O2,
    I2,
    S,
    O3,
    Q,
    O5,
    O6,
    O7,
    O4,
    RD_PNTR_WR,
    wr_en,
    p_1_out,
    E,
    wr_clk,
    I1);
  output O1;
  output [0:0]I3;
  output [7:0]O2;
  output [3:0]I2;
  output [2:0]S;
  output O3;
  output [7:0]Q;
  output O5;
  output O6;
  output O7;
  output [5:0]O4;
  input [7:0]RD_PNTR_WR;
  input wr_en;
  input p_1_out;
  input [0:0]E;
  input wr_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [3:0]I2;
  wire [0:0]I3;
  wire O1;
  wire [7:0]O2;
  wire O3;
  wire [5:0]O4;
  wire O5;
  wire O6;
  wire O7;
  wire [7:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire [2:0]S;
  wire \n_0_gic0.gc0.count[7]_i_2 ;
  wire p_1_out;
  wire [7:0]plusOp__1;
  wire wr_clk;
  wire wr_en;
  wire [1:0]wr_pntr_plus2;

LUT4 #(
    .INIT(16'h0004)) 
     RAM_reg_0_63_0_2_i_1
       (.I0(p_1_out),
        .I1(wr_en),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(O3));
LUT4 #(
    .INIT(16'h0040)) 
     RAM_reg_128_191_0_2_i_1
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(wr_en),
        .I3(p_1_out),
        .O(O6));
LUT4 #(
    .INIT(16'h4000)) 
     RAM_reg_192_255_0_2_i_1
       (.I0(p_1_out),
        .I1(wr_en),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(O7));
LUT4 #(
    .INIT(16'h0040)) 
     RAM_reg_64_127_0_2_i_1
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(wr_en),
        .I3(p_1_out),
        .O(O5));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_3 
       (.I0(O2[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_4 
       (.I0(O2[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_5 
       (.I0(O2[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_2 
       (.I0(O2[6]),
        .I1(RD_PNTR_WR[6]),
        .O(I2[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_3 
       (.I0(O2[5]),
        .I1(RD_PNTR_WR[5]),
        .O(I2[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_4 
       (.I0(O2[4]),
        .I1(RD_PNTR_WR[4]),
        .O(I2[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_5 
       (.I0(O2[3]),
        .I1(RD_PNTR_WR[3]),
        .O(I2[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[8]_i_2 
       (.I0(O2[7]),
        .I1(RD_PNTR_WR[7]),
        .O(I3));
(* SOFT_HLUTNM = "soft_lutpair34" *) 
   LUT1 #(
    .INIT(2'h1)) 
     \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__1[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp__1[1]));
(* SOFT_HLUTNM = "soft_lutpair34" *) 
   LUT3 #(
    .INIT(8'h78)) 
     \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(O4[0]),
        .O(plusOp__1[2]));
(* SOFT_HLUTNM = "soft_lutpair33" *) 
   LUT4 #(
    .INIT(16'h7F80)) 
     \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(O4[0]),
        .I3(O4[1]),
        .O(plusOp__1[3]));
(* SOFT_HLUTNM = "soft_lutpair33" *) 
   LUT5 #(
    .INIT(32'h7FFF8000)) 
     \gic0.gc0.count[4]_i_1 
       (.I0(O4[0]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(O4[1]),
        .I4(O4[2]),
        .O(plusOp__1[4]));
LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
     \gic0.gc0.count[5]_i_1 
       (.I0(O4[1]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(O4[0]),
        .I4(O4[2]),
        .I5(O4[3]),
        .O(plusOp__1[5]));
(* SOFT_HLUTNM = "soft_lutpair35" *) 
   LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[6]_i_1 
       (.I0(\n_0_gic0.gc0.count[7]_i_2 ),
        .I1(O4[4]),
        .O(plusOp__1[6]));
(* SOFT_HLUTNM = "soft_lutpair35" *) 
   LUT3 #(
    .INIT(8'h78)) 
     \gic0.gc0.count[7]_i_1 
       (.I0(\n_0_gic0.gc0.count[7]_i_2 ),
        .I1(O4[4]),
        .I2(O4[5]),
        .O(plusOp__1[7]));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gic0.gc0.count[7]_i_2 
       (.I0(O4[3]),
        .I1(O4[1]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(O4[0]),
        .I5(O4[2]),
        .O(\n_0_gic0.gc0.count[7]_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .PRE(I1),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(wr_pntr_plus2[1]),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[0]),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[1]),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[2]),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[3]),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[4]),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[5]),
        .Q(O2[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[0]),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[7]),
        .Q(Q[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[0]),
        .Q(wr_pntr_plus2[0]));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__1[1]),
        .PRE(I1),
        .Q(wr_pntr_plus2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[2]),
        .Q(O4[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[3]),
        .Q(O4[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[4]),
        .Q(O4[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[5]),
        .Q(O4[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[6]),
        .Q(O4[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[7]),
        .Q(O4[5]));
LUT6 #(
    .INIT(64'h0090000000000090)) 
     ram_full_i_i_3
       (.I0(RD_PNTR_WR[0]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_en),
        .I3(p_1_out),
        .I4(wr_pntr_plus2[1]),
        .I5(RD_PNTR_WR[1]),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module control_to_core_slave_axi_wr_bin_cntr_60
   (O1,
    I3,
    O2,
    I2,
    S,
    Q,
    O3,
    RD_PNTR_WR,
    wr_en,
    p_1_out,
    E,
    wr_clk,
    I1);
  output O1;
  output [0:0]I3;
  output [7:0]O2;
  output [3:0]I2;
  output [2:0]S;
  output [5:0]Q;
  output [7:0]O3;
  input [7:0]RD_PNTR_WR;
  input wr_en;
  input p_1_out;
  input [0:0]E;
  input wr_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [3:0]I2;
  wire [0:0]I3;
  wire O1;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [5:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire [2:0]S;
  wire \n_0_gic0.gc0.count[7]_i_2 ;
  wire p_1_out;
  wire [7:0]plusOp__1;
  wire wr_clk;
  wire wr_en;
  wire [1:0]wr_pntr_plus2;

LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_3 
       (.I0(O2[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_4 
       (.I0(O2[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_5 
       (.I0(O2[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_2 
       (.I0(O2[6]),
        .I1(RD_PNTR_WR[6]),
        .O(I2[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_3 
       (.I0(O2[5]),
        .I1(RD_PNTR_WR[5]),
        .O(I2[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_4 
       (.I0(O2[4]),
        .I1(RD_PNTR_WR[4]),
        .O(I2[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_5 
       (.I0(O2[3]),
        .I1(RD_PNTR_WR[3]),
        .O(I2[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[8]_i_2 
       (.I0(O2[7]),
        .I1(RD_PNTR_WR[7]),
        .O(I3));
LUT1 #(
    .INIT(2'h1)) 
     \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__1[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp__1[1]));
LUT3 #(
    .INIT(8'h78)) 
     \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(Q[0]),
        .O(plusOp__1[2]));
LUT4 #(
    .INIT(16'h7F80)) 
     \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(plusOp__1[3]));
LUT5 #(
    .INIT(32'h7FFF8000)) 
     \gic0.gc0.count[4]_i_1 
       (.I0(Q[0]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(plusOp__1[4]));
LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
     \gic0.gc0.count[5]_i_1 
       (.I0(Q[1]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(plusOp__1[5]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[6]_i_1 
       (.I0(\n_0_gic0.gc0.count[7]_i_2 ),
        .I1(Q[4]),
        .O(plusOp__1[6]));
LUT3 #(
    .INIT(8'h78)) 
     \gic0.gc0.count[7]_i_1 
       (.I0(\n_0_gic0.gc0.count[7]_i_2 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(plusOp__1[7]));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gic0.gc0.count[7]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\n_0_gic0.gc0.count[7]_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .PRE(I1),
        .Q(O2[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(wr_pntr_plus2[1]),
        .Q(O2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[0]),
        .Q(O2[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[1]),
        .Q(O2[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[2]),
        .Q(O2[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[3]),
        .Q(O2[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[4]),
        .Q(O2[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[5]),
        .Q(O2[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[0]),
        .Q(O3[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[1]),
        .Q(O3[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[2]),
        .Q(O3[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[3]),
        .Q(O3[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[4]),
        .Q(O3[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[5]),
        .Q(O3[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[6]),
        .Q(O3[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O2[7]),
        .Q(O3[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[0]),
        .Q(wr_pntr_plus2[0]));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__1[1]),
        .PRE(I1),
        .Q(wr_pntr_plus2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[2]),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[3]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[4]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[5]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[6]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[7]),
        .Q(Q[5]));
LUT6 #(
    .INIT(64'h0090000000000090)) 
     ram_full_i_i_3
       (.I0(RD_PNTR_WR[0]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_en),
        .I3(p_1_out),
        .I4(wr_pntr_plus2[1]),
        .I5(RD_PNTR_WR[1]),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module control_to_core_slave_axi_wr_bin_cntr_94
   (O1,
    I3,
    O3,
    I2,
    S,
    Q,
    O4,
    O2,
    wr_en,
    p_1_out,
    E,
    wr_clk,
    I1);
  output O1;
  output [0:0]I3;
  output [7:0]O3;
  output [3:0]I2;
  output [2:0]S;
  output [5:0]Q;
  output [7:0]O4;
  input [7:0]O2;
  input wr_en;
  input p_1_out;
  input [0:0]E;
  input wr_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [3:0]I2;
  wire [0:0]I3;
  wire O1;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [7:0]O4;
  wire [5:0]Q;
  wire [2:0]S;
  wire \n_0_gic0.gc0.count[7]_i_2 ;
  wire p_1_out;
  wire [7:0]plusOp__1;
  wire wr_clk;
  wire wr_en;
  wire [1:0]wr_pntr_plus2;

LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_3 
       (.I0(O3[2]),
        .I1(O2[2]),
        .O(S[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_4 
       (.I0(O3[1]),
        .I1(O2[1]),
        .O(S[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_5 
       (.I0(O3[0]),
        .I1(O2[0]),
        .O(S[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_2 
       (.I0(O3[6]),
        .I1(O2[6]),
        .O(I2[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_3 
       (.I0(O3[5]),
        .I1(O2[5]),
        .O(I2[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_4 
       (.I0(O3[4]),
        .I1(O2[4]),
        .O(I2[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_5 
       (.I0(O3[3]),
        .I1(O2[3]),
        .O(I2[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[8]_i_2 
       (.I0(O3[7]),
        .I1(O2[7]),
        .O(I3));
LUT1 #(
    .INIT(2'h1)) 
     \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__1[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp__1[1]));
LUT3 #(
    .INIT(8'h78)) 
     \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(Q[0]),
        .O(plusOp__1[2]));
LUT4 #(
    .INIT(16'h7F80)) 
     \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(plusOp__1[3]));
LUT5 #(
    .INIT(32'h7FFF8000)) 
     \gic0.gc0.count[4]_i_1 
       (.I0(Q[0]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(Q[1]),
        .I4(Q[2]),
        .O(plusOp__1[4]));
LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
     \gic0.gc0.count[5]_i_1 
       (.I0(Q[1]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(plusOp__1[5]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[6]_i_1 
       (.I0(\n_0_gic0.gc0.count[7]_i_2 ),
        .I1(Q[4]),
        .O(plusOp__1[6]));
LUT3 #(
    .INIT(8'h78)) 
     \gic0.gc0.count[7]_i_1 
       (.I0(\n_0_gic0.gc0.count[7]_i_2 ),
        .I1(Q[4]),
        .I2(Q[5]),
        .O(plusOp__1[7]));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gic0.gc0.count[7]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(Q[0]),
        .I5(Q[2]),
        .O(\n_0_gic0.gc0.count[7]_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .PRE(I1),
        .Q(O3[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(wr_pntr_plus2[1]),
        .Q(O3[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[0]),
        .Q(O3[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[1]),
        .Q(O3[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[2]),
        .Q(O3[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[3]),
        .Q(O3[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[4]),
        .Q(O3[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[5]),
        .Q(O3[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[0]),
        .Q(O4[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[1]),
        .Q(O4[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[2]),
        .Q(O4[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[3]),
        .Q(O4[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[4]),
        .Q(O4[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[5]),
        .Q(O4[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[6]),
        .Q(O4[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[7]),
        .Q(O4[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[0]),
        .Q(wr_pntr_plus2[0]));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__1[1]),
        .PRE(I1),
        .Q(wr_pntr_plus2[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[2]),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[3]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[4]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[5]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[6]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[7]),
        .Q(Q[5]));
LUT6 #(
    .INIT(64'h0090000000000090)) 
     ram_full_i_i_3
       (.I0(O2[0]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_en),
        .I3(p_1_out),
        .I4(wr_pntr_plus2[1]),
        .I5(O2[1]),
        .O(O1));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module control_to_core_slave_axi_wr_bin_cntr__parameterized0
   (O1,
    O3,
    I3,
    Q,
    I2,
    S,
    O4,
    ram_full_i,
    O5,
    O2,
    comp2,
    wr_en,
    p_1_out,
    comp1,
    rst_full_gen_i,
    E,
    wr_clk,
    I1);
  output O1;
  output O3;
  output [1:0]I3;
  output [7:0]Q;
  output [3:0]I2;
  output [2:0]S;
  output [7:0]O4;
  output ram_full_i;
  output [8:0]O5;
  input [8:0]O2;
  input comp2;
  input wr_en;
  input p_1_out;
  input comp1;
  input rst_full_gen_i;
  input [0:0]E;
  input wr_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [3:0]I2;
  wire [1:0]I3;
  wire O1;
  wire [8:0]O2;
  wire O3;
  wire [7:0]O4;
  wire [8:0]O5;
  wire [7:0]Q;
  wire [2:0]S;
  wire comp1;
  wire comp2;
  wire \n_0_gic0.gc0.count[8]_i_2 ;
  wire p_1_out;
  wire [8:8]p_8_out;
  wire [8:0]plusOp__1;
  wire ram_full_i;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_en;
  wire [8:8]wr_pntr_plus2;

LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_3 
       (.I0(Q[2]),
        .I1(O2[2]),
        .O(S[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_4 
       (.I0(Q[1]),
        .I1(O2[1]),
        .O(S[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_5 
       (.I0(Q[0]),
        .I1(O2[0]),
        .O(S[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_2 
       (.I0(Q[6]),
        .I1(O2[6]),
        .O(I2[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_3 
       (.I0(Q[5]),
        .I1(O2[5]),
        .O(I2[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_4 
       (.I0(Q[4]),
        .I1(O2[4]),
        .O(I2[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_5 
       (.I0(Q[3]),
        .I1(O2[3]),
        .O(I2[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[9]_i_2 
       (.I0(p_8_out),
        .I1(O2[8]),
        .O(I3[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[9]_i_3 
       (.I0(Q[7]),
        .I1(O2[7]),
        .O(I3[0]));
LUT1 #(
    .INIT(2'h1)) 
     \gic0.gc0.count[0]_i_1 
       (.I0(O4[0]),
        .O(plusOp__1[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[1]_i_1 
       (.I0(O4[0]),
        .I1(O4[1]),
        .O(plusOp__1[1]));
LUT3 #(
    .INIT(8'h6A)) 
     \gic0.gc0.count[2]_i_1 
       (.I0(O4[2]),
        .I1(O4[0]),
        .I2(O4[1]),
        .O(plusOp__1[2]));
LUT4 #(
    .INIT(16'h7F80)) 
     \gic0.gc0.count[3]_i_1 
       (.I0(O4[1]),
        .I1(O4[0]),
        .I2(O4[2]),
        .I3(O4[3]),
        .O(plusOp__1[3]));
LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gic0.gc0.count[4]_i_1 
       (.I0(O4[4]),
        .I1(O4[1]),
        .I2(O4[0]),
        .I3(O4[2]),
        .I4(O4[3]),
        .O(plusOp__1[4]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gic0.gc0.count[5]_i_1 
       (.I0(O4[5]),
        .I1(O4[3]),
        .I2(O4[2]),
        .I3(O4[0]),
        .I4(O4[1]),
        .I5(O4[4]),
        .O(plusOp__1[5]));
LUT4 #(
    .INIT(16'h6AAA)) 
     \gic0.gc0.count[6]_i_1 
       (.I0(O4[6]),
        .I1(O4[4]),
        .I2(\n_0_gic0.gc0.count[8]_i_2 ),
        .I3(O4[5]),
        .O(plusOp__1[6]));
LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gic0.gc0.count[7]_i_1 
       (.I0(O4[7]),
        .I1(O4[5]),
        .I2(\n_0_gic0.gc0.count[8]_i_2 ),
        .I3(O4[4]),
        .I4(O4[6]),
        .O(plusOp__1[7]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2),
        .I1(O4[6]),
        .I2(O4[4]),
        .I3(\n_0_gic0.gc0.count[8]_i_2 ),
        .I4(O4[5]),
        .I5(O4[7]),
        .O(plusOp__1[8]));
LUT4 #(
    .INIT(16'h8000)) 
     \gic0.gc0.count[8]_i_2 
       (.I0(O4[3]),
        .I1(O4[2]),
        .I2(O4[0]),
        .I3(O4[1]),
        .O(\n_0_gic0.gc0.count[8]_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(O4[0]),
        .PRE(I1),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O4[7]),
        .Q(Q[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(wr_pntr_plus2),
        .Q(p_8_out));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[0]),
        .Q(O5[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[1]),
        .Q(O5[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[2]),
        .Q(O5[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[3]),
        .Q(O5[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[4]),
        .Q(O5[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[5]),
        .Q(O5[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[6]),
        .Q(O5[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[7]),
        .Q(O5[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(p_8_out),
        .Q(O5[8]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[0]),
        .Q(O4[0]));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__1[1]),
        .PRE(I1),
        .Q(O4[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[2]),
        .Q(O4[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[3]),
        .Q(O4[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[4]),
        .Q(O4[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[5]),
        .Q(O4[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[6]),
        .Q(O4[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[7]),
        .Q(O4[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[8]),
        .Q(wr_pntr_plus2));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1__1 
       (.I0(p_8_out),
        .I1(O2[8]),
        .O(O1));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2),
        .I1(O2[8]),
        .O(O3));
LUT5 #(
    .INIT(32'h0000FF08)) 
     ram_full_i_i_1
       (.I0(comp2),
        .I1(wr_en),
        .I2(p_1_out),
        .I3(comp1),
        .I4(rst_full_gen_i),
        .O(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module control_to_core_slave_axi_wr_bin_cntr__parameterized0_21
   (O1,
    O2,
    I3,
    Q,
    I2,
    S,
    O3,
    ram_full_i,
    O4,
    RD_PNTR_WR,
    comp2,
    wr_en,
    p_1_out,
    comp1,
    rst_full_gen_i,
    E,
    wr_clk,
    I1);
  output O1;
  output O2;
  output [1:0]I3;
  output [7:0]Q;
  output [3:0]I2;
  output [2:0]S;
  output [7:0]O3;
  output ram_full_i;
  output [8:0]O4;
  input [8:0]RD_PNTR_WR;
  input comp2;
  input wr_en;
  input p_1_out;
  input comp1;
  input rst_full_gen_i;
  input [0:0]E;
  input wr_clk;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [3:0]I2;
  wire [1:0]I3;
  wire O1;
  wire O2;
  wire [7:0]O3;
  wire [8:0]O4;
  wire [7:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [2:0]S;
  wire comp1;
  wire comp2;
  wire \n_0_gic0.gc0.count[8]_i_2 ;
  wire p_1_out;
  wire [8:8]p_8_out;
  wire [8:0]plusOp__1;
  wire ram_full_i;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_en;
  wire [8:8]wr_pntr_plus2;

LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_3 
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_4 
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[3]_i_5 
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_2 
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .O(I2[3]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_3 
       (.I0(Q[5]),
        .I1(RD_PNTR_WR[5]),
        .O(I2[2]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_4 
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .O(I2[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[7]_i_5 
       (.I0(Q[3]),
        .I1(RD_PNTR_WR[3]),
        .O(I2[0]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[9]_i_2 
       (.I0(p_8_out),
        .I1(RD_PNTR_WR[8]),
        .O(I3[1]));
LUT2 #(
    .INIT(4'h9)) 
     \gdiff.diff_pntr_pad[9]_i_3 
       (.I0(Q[7]),
        .I1(RD_PNTR_WR[7]),
        .O(I3[0]));
LUT1 #(
    .INIT(2'h1)) 
     \gic0.gc0.count[0]_i_1 
       (.I0(O3[0]),
        .O(plusOp__1[0]));
LUT2 #(
    .INIT(4'h6)) 
     \gic0.gc0.count[1]_i_1 
       (.I0(O3[0]),
        .I1(O3[1]),
        .O(plusOp__1[1]));
(* SOFT_HLUTNM = "soft_lutpair47" *) 
   LUT3 #(
    .INIT(8'h6A)) 
     \gic0.gc0.count[2]_i_1 
       (.I0(O3[2]),
        .I1(O3[0]),
        .I2(O3[1]),
        .O(plusOp__1[2]));
(* SOFT_HLUTNM = "soft_lutpair45" *) 
   LUT4 #(
    .INIT(16'h7F80)) 
     \gic0.gc0.count[3]_i_1 
       (.I0(O3[1]),
        .I1(O3[0]),
        .I2(O3[2]),
        .I3(O3[3]),
        .O(plusOp__1[3]));
(* SOFT_HLUTNM = "soft_lutpair45" *) 
   LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gic0.gc0.count[4]_i_1 
       (.I0(O3[4]),
        .I1(O3[1]),
        .I2(O3[0]),
        .I3(O3[2]),
        .I4(O3[3]),
        .O(plusOp__1[4]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gic0.gc0.count[5]_i_1 
       (.I0(O3[5]),
        .I1(O3[3]),
        .I2(O3[2]),
        .I3(O3[0]),
        .I4(O3[1]),
        .I5(O3[4]),
        .O(plusOp__1[5]));
(* SOFT_HLUTNM = "soft_lutpair46" *) 
   LUT4 #(
    .INIT(16'h6AAA)) 
     \gic0.gc0.count[6]_i_1 
       (.I0(O3[6]),
        .I1(O3[4]),
        .I2(\n_0_gic0.gc0.count[8]_i_2 ),
        .I3(O3[5]),
        .O(plusOp__1[6]));
(* SOFT_HLUTNM = "soft_lutpair46" *) 
   LUT5 #(
    .INIT(32'h6AAAAAAA)) 
     \gic0.gc0.count[7]_i_1 
       (.I0(O3[7]),
        .I1(O3[5]),
        .I2(\n_0_gic0.gc0.count[8]_i_2 ),
        .I3(O3[4]),
        .I4(O3[6]),
        .O(plusOp__1[7]));
LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
     \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2),
        .I1(O3[6]),
        .I2(O3[4]),
        .I3(\n_0_gic0.gc0.count[8]_i_2 ),
        .I4(O3[5]),
        .I5(O3[7]),
        .O(plusOp__1[8]));
(* SOFT_HLUTNM = "soft_lutpair47" *) 
   LUT4 #(
    .INIT(16'h8000)) 
     \gic0.gc0.count[8]_i_2 
       (.I0(O3[3]),
        .I1(O3[2]),
        .I2(O3[0]),
        .I3(O3[1]),
        .O(\n_0_gic0.gc0.count[8]_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(O3[0]),
        .PRE(I1),
        .Q(Q[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[1]),
        .Q(Q[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[2]),
        .Q(Q[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[3]),
        .Q(Q[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[4]),
        .Q(Q[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[5]),
        .Q(Q[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[6]),
        .Q(Q[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(O3[7]),
        .Q(Q[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d1_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(wr_pntr_plus2),
        .Q(p_8_out));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[0]),
        .Q(O4[0]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[1]),
        .Q(O4[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[2]),
        .Q(O4[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[3]),
        .Q(O4[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[4]),
        .Q(O4[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[5]),
        .Q(O4[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[6]),
        .Q(O4[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(Q[7]),
        .Q(O4[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_d2_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(p_8_out),
        .Q(O4[8]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[0]),
        .Q(O3[0]));
FDPE #(
    .INIT(1'b1)) 
     \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__1[1]),
        .PRE(I1),
        .Q(O3[1]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[2]),
        .Q(O3[2]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[3]),
        .Q(O3[3]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[4]),
        .Q(O3[4]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[5]),
        .Q(O3[5]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[6]),
        .Q(O3[6]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[7]),
        .Q(O3[7]));
FDCE #(
    .INIT(1'b0)) 
     \gic0.gc0.count_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(I1),
        .D(plusOp__1[8]),
        .Q(wr_pntr_plus2));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1__1 
       (.I0(p_8_out),
        .I1(RD_PNTR_WR[8]),
        .O(O1));
LUT2 #(
    .INIT(4'h9)) 
     \gmux.gm[4].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2),
        .I1(RD_PNTR_WR[8]),
        .O(O2));
LUT5 #(
    .INIT(32'h0000FF08)) 
     ram_full_i_i_1
       (.I0(comp2),
        .I1(wr_en),
        .I2(p_1_out),
        .I3(comp1),
        .I4(rst_full_gen_i),
        .O(ram_full_i));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module control_to_core_slave_axi_wr_logic
   (full,
    prog_full,
    O1,
    Q,
    O2,
    O3,
    O4,
    O5,
    O6,
    O7,
    ram_full_i,
    wr_clk,
    rst_d2,
    RD_PNTR_WR,
    wr_en,
    rst_full_gen_i,
    I1);
  output full;
  output prog_full;
  output O1;
  output [5:0]Q;
  output [7:0]O2;
  output O3;
  output [7:0]O4;
  output O5;
  output O6;
  output O7;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input [7:0]RD_PNTR_WR;
  input wr_en;
  input rst_full_gen_i;
  input [0:0]I1;

  wire [0:0]I1;
  wire O1;
  wire [7:0]O2;
  wire O3;
  wire [7:0]O4;
  wire O5;
  wire O6;
  wire O7;
  wire [5:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire full;
  wire n_10_wpntr;
  wire n_11_wpntr;
  wire n_12_wpntr;
  wire n_13_wpntr;
  wire n_14_wpntr;
  wire n_15_wpntr;
  wire n_16_wpntr;
  wire n_1_wpntr;
  wire \n_2_gwas.wsts ;
  wire \n_3_gwas.wsts ;
  wire p_1_out;
  wire prog_full;
  wire ram_full_i;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_wr_pf_as \gwas.gpf.wrpf 
       (.I1(I1),
        .I2({n_10_wpntr,n_11_wpntr,n_12_wpntr,n_13_wpntr}),
        .I3(n_1_wpntr),
        .S({n_14_wpntr,n_15_wpntr,n_16_wpntr}),
        .p_1_out(p_1_out),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_pntr_plus1_pad({O2[6:0],\n_3_gwas.wsts }));
control_to_core_slave_axi_wr_status_flags_as \gwas.wsts 
       (.E(\n_2_gwas.wsts ),
        .full(full),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_d2(rst_d2),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pad(\n_3_gwas.wsts ));
control_to_core_slave_axi_wr_bin_cntr wpntr
       (.E(\n_2_gwas.wsts ),
        .I1(I1),
        .I2({n_10_wpntr,n_11_wpntr,n_12_wpntr,n_13_wpntr}),
        .I3(n_1_wpntr),
        .O1(O1),
        .O2(O2),
        .O3(O3),
        .O4(Q),
        .O5(O5),
        .O6(O6),
        .O7(O7),
        .Q(O4),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({n_14_wpntr,n_15_wpntr,n_16_wpntr}),
        .p_1_out(p_1_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module control_to_core_slave_axi_wr_logic_56
   (full,
    prog_full,
    O1,
    Q,
    WEBWE,
    O2,
    O3,
    ram_full_i,
    wr_clk,
    rst_d2,
    RD_PNTR_WR,
    wr_en,
    rst_full_gen_i,
    I1);
  output full;
  output prog_full;
  output O1;
  output [5:0]Q;
  output [0:0]WEBWE;
  output [7:0]O2;
  output [7:0]O3;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input [7:0]RD_PNTR_WR;
  input wr_en;
  input rst_full_gen_i;
  input [0:0]I1;

  wire [0:0]I1;
  wire O1;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [5:0]Q;
  wire [7:0]RD_PNTR_WR;
  wire [0:0]WEBWE;
  wire full;
  wire n_10_wpntr;
  wire n_11_wpntr;
  wire n_12_wpntr;
  wire n_13_wpntr;
  wire n_14_wpntr;
  wire n_15_wpntr;
  wire n_16_wpntr;
  wire n_1_wpntr;
  wire \n_3_gwas.wsts ;
  wire p_1_out;
  wire prog_full;
  wire ram_full_i;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_wr_pf_as_58 \gwas.gpf.wrpf 
       (.I1(I1),
        .I2({n_10_wpntr,n_11_wpntr,n_12_wpntr,n_13_wpntr}),
        .I3(n_1_wpntr),
        .S({n_14_wpntr,n_15_wpntr,n_16_wpntr}),
        .p_1_out(p_1_out),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_pntr_plus1_pad({O2[6:0],\n_3_gwas.wsts }));
control_to_core_slave_axi_wr_status_flags_as_59 \gwas.wsts 
       (.E(WEBWE),
        .full(full),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_d2(rst_d2),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pad(\n_3_gwas.wsts ));
control_to_core_slave_axi_wr_bin_cntr_60 wpntr
       (.E(WEBWE),
        .I1(I1),
        .I2({n_10_wpntr,n_11_wpntr,n_12_wpntr,n_13_wpntr}),
        .I3(n_1_wpntr),
        .O1(O1),
        .O2(O2),
        .O3(O3),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({n_14_wpntr,n_15_wpntr,n_16_wpntr}),
        .p_1_out(p_1_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module control_to_core_slave_axi_wr_logic_83
   (full,
    prog_full,
    O1,
    Q,
    WEBWE,
    O3,
    O4,
    ram_full_i,
    wr_clk,
    rst_d2,
    O2,
    wr_en,
    rst_full_gen_i,
    I1);
  output full;
  output prog_full;
  output O1;
  output [5:0]Q;
  output [0:0]WEBWE;
  output [7:0]O3;
  output [7:0]O4;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input [7:0]O2;
  input wr_en;
  input rst_full_gen_i;
  input [0:0]I1;

  wire [0:0]I1;
  wire O1;
  wire [7:0]O2;
  wire [7:0]O3;
  wire [7:0]O4;
  wire [5:0]Q;
  wire [0:0]WEBWE;
  wire full;
  wire n_10_wpntr;
  wire n_11_wpntr;
  wire n_12_wpntr;
  wire n_13_wpntr;
  wire n_14_wpntr;
  wire n_15_wpntr;
  wire n_16_wpntr;
  wire n_1_wpntr;
  wire \n_3_gwas.wsts ;
  wire p_1_out;
  wire prog_full;
  wire ram_full_i;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_wr_pf_as_92 \gwas.gpf.wrpf 
       (.I1(I1),
        .I2({n_10_wpntr,n_11_wpntr,n_12_wpntr,n_13_wpntr}),
        .I3(n_1_wpntr),
        .S({n_14_wpntr,n_15_wpntr,n_16_wpntr}),
        .p_1_out(p_1_out),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_pntr_plus1_pad({O3[6:0],\n_3_gwas.wsts }));
control_to_core_slave_axi_wr_status_flags_as_93 \gwas.wsts 
       (.E(WEBWE),
        .full(full),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_d2(rst_d2),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pad(\n_3_gwas.wsts ));
control_to_core_slave_axi_wr_bin_cntr_94 wpntr
       (.E(WEBWE),
        .I1(I1),
        .I2({n_10_wpntr,n_11_wpntr,n_12_wpntr,n_13_wpntr}),
        .I3(n_1_wpntr),
        .O1(O1),
        .O2(O2),
        .O3(O3),
        .O4(O4),
        .Q(Q),
        .S({n_14_wpntr,n_15_wpntr,n_16_wpntr}),
        .p_1_out(p_1_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module control_to_core_slave_axi_wr_logic__parameterized0
   (full,
    prog_full,
    Q,
    O1,
    E,
    O3,
    v1_reg,
    v1_reg_0,
    wr_clk,
    rst_d2,
    O2,
    wr_en,
    rst_full_gen_i,
    I1);
  output full;
  output prog_full;
  output [7:0]Q;
  output [7:0]O1;
  output [0:0]E;
  output [8:0]O3;
  input [3:0]v1_reg;
  input [3:0]v1_reg_0;
  input wr_clk;
  input rst_d2;
  input [8:0]O2;
  input wr_en;
  input rst_full_gen_i;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [7:0]O1;
  wire [8:0]O2;
  wire [8:0]O3;
  wire [7:0]Q;
  wire comp1;
  wire comp2;
  wire full;
  wire n_0_wpntr;
  wire n_12_wpntr;
  wire n_13_wpntr;
  wire n_14_wpntr;
  wire n_15_wpntr;
  wire n_16_wpntr;
  wire n_17_wpntr;
  wire n_18_wpntr;
  wire n_1_wpntr;
  wire n_2_wpntr;
  wire n_3_wpntr;
  wire \n_5_gwas.wsts ;
  wire p_1_out;
  wire prog_full;
  wire ram_full_i;
  wire rst_d2;
  wire rst_full_gen_i;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_wr_pf_as__parameterized0 \gwas.gpf.wrpf 
       (.I1(I1),
        .I2({n_12_wpntr,n_13_wpntr,n_14_wpntr,n_15_wpntr}),
        .I3({n_2_wpntr,n_3_wpntr}),
        .S({n_16_wpntr,n_17_wpntr,n_18_wpntr}),
        .p_1_out(p_1_out),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_pntr_plus1_pad({Q,\n_5_gwas.wsts }));
control_to_core_slave_axi_wr_status_flags_as__parameterized0 \gwas.wsts 
       (.E(E),
        .I1(n_0_wpntr),
        .I2(n_1_wpntr),
        .comp1(comp1),
        .comp2(comp2),
        .full(full),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_d2(rst_d2),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pad(\n_5_gwas.wsts ));
control_to_core_slave_axi_wr_bin_cntr__parameterized0 wpntr
       (.E(E),
        .I1(I1),
        .I2({n_12_wpntr,n_13_wpntr,n_14_wpntr,n_15_wpntr}),
        .I3({n_2_wpntr,n_3_wpntr}),
        .O1(n_0_wpntr),
        .O2(O2),
        .O3(n_1_wpntr),
        .O4(O1),
        .O5(O3),
        .Q(Q),
        .S({n_16_wpntr,n_17_wpntr,n_18_wpntr}),
        .comp1(comp1),
        .comp2(comp2),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module control_to_core_slave_axi_wr_logic__parameterized0_17
   (full,
    prog_full,
    Q,
    O1,
    E,
    O2,
    v1_reg,
    v1_reg_0,
    wr_clk,
    rst_d2,
    RD_PNTR_WR,
    wr_en,
    rst_full_gen_i,
    I1);
  output full;
  output prog_full;
  output [7:0]Q;
  output [7:0]O1;
  output [0:0]E;
  output [8:0]O2;
  input [3:0]v1_reg;
  input [3:0]v1_reg_0;
  input wr_clk;
  input rst_d2;
  input [8:0]RD_PNTR_WR;
  input wr_en;
  input rst_full_gen_i;
  input [0:0]I1;

  wire [0:0]E;
  wire [0:0]I1;
  wire [7:0]O1;
  wire [8:0]O2;
  wire [7:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire comp1;
  wire comp2;
  wire full;
  wire n_0_wpntr;
  wire n_12_wpntr;
  wire n_13_wpntr;
  wire n_14_wpntr;
  wire n_15_wpntr;
  wire n_16_wpntr;
  wire n_17_wpntr;
  wire n_18_wpntr;
  wire n_1_wpntr;
  wire n_2_wpntr;
  wire n_3_wpntr;
  wire \n_5_gwas.wsts ;
  wire p_1_out;
  wire prog_full;
  wire ram_full_i;
  wire rst_d2;
  wire rst_full_gen_i;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire wr_en;

control_to_core_slave_axi_wr_pf_as__parameterized0_19 \gwas.gpf.wrpf 
       (.I1(I1),
        .I2({n_12_wpntr,n_13_wpntr,n_14_wpntr,n_15_wpntr}),
        .I3({n_2_wpntr,n_3_wpntr}),
        .S({n_16_wpntr,n_17_wpntr,n_18_wpntr}),
        .p_1_out(p_1_out),
        .prog_full(prog_full),
        .rst_d2(rst_d2),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_pntr_plus1_pad({Q,\n_5_gwas.wsts }));
control_to_core_slave_axi_wr_status_flags_as__parameterized0_20 \gwas.wsts 
       (.E(E),
        .I1(n_0_wpntr),
        .I2(n_1_wpntr),
        .comp1(comp1),
        .comp2(comp2),
        .full(full),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_d2(rst_d2),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_pntr_plus1_pad(\n_5_gwas.wsts ));
control_to_core_slave_axi_wr_bin_cntr__parameterized0_21 wpntr
       (.E(E),
        .I1(I1),
        .I2({n_12_wpntr,n_13_wpntr,n_14_wpntr,n_15_wpntr}),
        .I3({n_2_wpntr,n_3_wpntr}),
        .O1(n_0_wpntr),
        .O2(n_1_wpntr),
        .O3(O1),
        .O4(O2),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({n_16_wpntr,n_17_wpntr,n_18_wpntr}),
        .comp1(comp1),
        .comp2(comp2),
        .p_1_out(p_1_out),
        .ram_full_i(ram_full_i),
        .rst_full_gen_i(rst_full_gen_i),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module control_to_core_slave_axi_wr_pf_as
   (prog_full,
    wr_clk,
    rst_d2,
    rst_full_gen_i,
    p_1_out,
    I1,
    wr_pntr_plus1_pad,
    S,
    I2,
    I3);
  output prog_full;
  input wr_clk;
  input rst_d2;
  input rst_full_gen_i;
  input p_1_out;
  input [0:0]I1;
  input [7:0]wr_pntr_plus1_pad;
  input [2:0]S;
  input [3:0]I2;
  input [0:0]I3;

  wire [0:0]I1;
  wire [3:0]I2;
  wire [0:0]I3;
  wire [2:0]S;
  wire [7:1]diff_pntr;
  wire \n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_2 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire p_1_out;
  wire [8:0]plusOp;
  wire prog_full;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [7:0]wr_pntr_plus1_pad;
  wire [3:0]\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_O_UNCONNECTED ;

FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[2]),
        .Q(diff_pntr[1]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[3]),
        .Q(diff_pntr[2]));
CARRY4 \gdiff.diff_pntr_pad_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[3]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[3:0]),
        .O(plusOp[3:0]),
        .S({S,1'b0}));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[4]),
        .Q(diff_pntr[3]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[5]),
        .Q(diff_pntr[4]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[6]),
        .Q(diff_pntr[5]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[7]),
        .Q(diff_pntr[6]));
CARRY4 \gdiff.diff_pntr_pad_reg[7]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[7]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[7:4]),
        .O(plusOp[7:4]),
        .S(I2));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[8]),
        .Q(diff_pntr[7]));
CARRY4 \gdiff.diff_pntr_pad_reg[8]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ),
        .CO(\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_O_UNCONNECTED [3:1],plusOp[8]}),
        .S({1'b0,1'b0,1'b0,I3}));
LUT5 #(
    .INIT(32'h0F0E000E)) 
     \gpf1.prog_full_i_i_1 
       (.I0(\n_0_gpf1.prog_full_i_i_2 ),
        .I1(diff_pntr[7]),
        .I2(rst_full_gen_i),
        .I3(p_1_out),
        .I4(prog_full),
        .O(\n_0_gpf1.prog_full_i_i_1 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gpf1.prog_full_i_i_2 
       (.I0(diff_pntr[6]),
        .I1(diff_pntr[5]),
        .I2(diff_pntr[2]),
        .I3(diff_pntr[1]),
        .I4(diff_pntr[4]),
        .I5(diff_pntr[3]),
        .O(\n_0_gpf1.prog_full_i_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gpf1.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\n_0_gpf1.prog_full_i_i_1 ),
        .PRE(rst_d2),
        .Q(prog_full));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module control_to_core_slave_axi_wr_pf_as_58
   (prog_full,
    wr_clk,
    rst_d2,
    rst_full_gen_i,
    p_1_out,
    I1,
    wr_pntr_plus1_pad,
    S,
    I2,
    I3);
  output prog_full;
  input wr_clk;
  input rst_d2;
  input rst_full_gen_i;
  input p_1_out;
  input [0:0]I1;
  input [7:0]wr_pntr_plus1_pad;
  input [2:0]S;
  input [3:0]I2;
  input [0:0]I3;

  wire [0:0]I1;
  wire [3:0]I2;
  wire [0:0]I3;
  wire [2:0]S;
  wire [7:1]diff_pntr;
  wire \n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_2 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire p_1_out;
  wire [8:0]plusOp;
  wire prog_full;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [7:0]wr_pntr_plus1_pad;
  wire [3:0]\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_O_UNCONNECTED ;

FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[2]),
        .Q(diff_pntr[1]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[3]),
        .Q(diff_pntr[2]));
CARRY4 \gdiff.diff_pntr_pad_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[3]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[3:0]),
        .O(plusOp[3:0]),
        .S({S,1'b0}));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[4]),
        .Q(diff_pntr[3]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[5]),
        .Q(diff_pntr[4]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[6]),
        .Q(diff_pntr[5]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[7]),
        .Q(diff_pntr[6]));
CARRY4 \gdiff.diff_pntr_pad_reg[7]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[7]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[7:4]),
        .O(plusOp[7:4]),
        .S(I2));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[8]),
        .Q(diff_pntr[7]));
CARRY4 \gdiff.diff_pntr_pad_reg[8]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ),
        .CO(\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_O_UNCONNECTED [3:1],plusOp[8]}),
        .S({1'b0,1'b0,1'b0,I3}));
LUT5 #(
    .INIT(32'h0F0E000E)) 
     \gpf1.prog_full_i_i_1 
       (.I0(\n_0_gpf1.prog_full_i_i_2 ),
        .I1(diff_pntr[7]),
        .I2(rst_full_gen_i),
        .I3(p_1_out),
        .I4(prog_full),
        .O(\n_0_gpf1.prog_full_i_i_1 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gpf1.prog_full_i_i_2 
       (.I0(diff_pntr[6]),
        .I1(diff_pntr[5]),
        .I2(diff_pntr[2]),
        .I3(diff_pntr[1]),
        .I4(diff_pntr[4]),
        .I5(diff_pntr[3]),
        .O(\n_0_gpf1.prog_full_i_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gpf1.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\n_0_gpf1.prog_full_i_i_1 ),
        .PRE(rst_d2),
        .Q(prog_full));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module control_to_core_slave_axi_wr_pf_as_92
   (prog_full,
    wr_clk,
    rst_d2,
    rst_full_gen_i,
    p_1_out,
    I1,
    wr_pntr_plus1_pad,
    S,
    I2,
    I3);
  output prog_full;
  input wr_clk;
  input rst_d2;
  input rst_full_gen_i;
  input p_1_out;
  input [0:0]I1;
  input [7:0]wr_pntr_plus1_pad;
  input [2:0]S;
  input [3:0]I2;
  input [0:0]I3;

  wire [0:0]I1;
  wire [3:0]I2;
  wire [0:0]I3;
  wire [2:0]S;
  wire [7:1]diff_pntr;
  wire \n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_2 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire p_1_out;
  wire [8:0]plusOp;
  wire prog_full;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [7:0]wr_pntr_plus1_pad;
  wire [3:0]\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_O_UNCONNECTED ;

FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[2]),
        .Q(diff_pntr[1]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[3]),
        .Q(diff_pntr[2]));
CARRY4 \gdiff.diff_pntr_pad_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[3]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[3:0]),
        .O(plusOp[3:0]),
        .S({S,1'b0}));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[4]),
        .Q(diff_pntr[3]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[5]),
        .Q(diff_pntr[4]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[6]),
        .Q(diff_pntr[5]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[7]),
        .Q(diff_pntr[6]));
CARRY4 \gdiff.diff_pntr_pad_reg[7]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[7]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[7:4]),
        .O(plusOp[7:4]),
        .S(I2));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[8]),
        .Q(diff_pntr[7]));
CARRY4 \gdiff.diff_pntr_pad_reg[8]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ),
        .CO(\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[8]_i_1_O_UNCONNECTED [3:1],plusOp[8]}),
        .S({1'b0,1'b0,1'b0,I3}));
LUT5 #(
    .INIT(32'h0F0E000E)) 
     \gpf1.prog_full_i_i_1 
       (.I0(\n_0_gpf1.prog_full_i_i_2 ),
        .I1(diff_pntr[7]),
        .I2(rst_full_gen_i),
        .I3(p_1_out),
        .I4(prog_full),
        .O(\n_0_gpf1.prog_full_i_i_1 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gpf1.prog_full_i_i_2 
       (.I0(diff_pntr[6]),
        .I1(diff_pntr[5]),
        .I2(diff_pntr[2]),
        .I3(diff_pntr[1]),
        .I4(diff_pntr[4]),
        .I5(diff_pntr[3]),
        .O(\n_0_gpf1.prog_full_i_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gpf1.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\n_0_gpf1.prog_full_i_i_1 ),
        .PRE(rst_d2),
        .Q(prog_full));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module control_to_core_slave_axi_wr_pf_as__parameterized0
   (prog_full,
    wr_clk,
    rst_d2,
    rst_full_gen_i,
    p_1_out,
    I1,
    wr_pntr_plus1_pad,
    S,
    I2,
    I3);
  output prog_full;
  input wr_clk;
  input rst_d2;
  input rst_full_gen_i;
  input p_1_out;
  input [0:0]I1;
  input [8:0]wr_pntr_plus1_pad;
  input [2:0]S;
  input [3:0]I2;
  input [1:0]I3;

  wire [0:0]I1;
  wire [3:0]I2;
  wire [1:0]I3;
  wire [2:0]S;
  wire [8:1]diff_pntr;
  wire \n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_2 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[9]_i_1 ;
  wire p_1_out;
  wire [9:0]plusOp;
  wire prog_full;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [8:0]wr_pntr_plus1_pad;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED ;

FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[2]),
        .Q(diff_pntr[1]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[3]),
        .Q(diff_pntr[2]));
CARRY4 \gdiff.diff_pntr_pad_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[3]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[3:0]),
        .O(plusOp[3:0]),
        .S({S,1'b0}));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[4]),
        .Q(diff_pntr[3]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[5]),
        .Q(diff_pntr[4]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[6]),
        .Q(diff_pntr[5]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[7]),
        .Q(diff_pntr[6]));
CARRY4 \gdiff.diff_pntr_pad_reg[7]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[7]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[7:4]),
        .O(plusOp[7:4]),
        .S(I2));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[8]),
        .Q(diff_pntr[7]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[9]),
        .Q(diff_pntr[8]));
CARRY4 \gdiff.diff_pntr_pad_reg[9]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ),
        .CO({\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED [3:1],\n_3_gdiff.diff_pntr_pad_reg[9]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,wr_pntr_plus1_pad[8]}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED [3:2],plusOp[9:8]}),
        .S({1'b0,1'b0,I3}));
LUT6 #(
    .INIT(64'h00FF00E0000000E0)) 
     \gpf1.prog_full_i_i_1 
       (.I0(\n_0_gpf1.prog_full_i_i_2 ),
        .I1(diff_pntr[7]),
        .I2(diff_pntr[8]),
        .I3(rst_full_gen_i),
        .I4(p_1_out),
        .I5(prog_full),
        .O(\n_0_gpf1.prog_full_i_i_1 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gpf1.prog_full_i_i_2 
       (.I0(diff_pntr[2]),
        .I1(diff_pntr[1]),
        .I2(diff_pntr[3]),
        .I3(diff_pntr[6]),
        .I4(diff_pntr[4]),
        .I5(diff_pntr[5]),
        .O(\n_0_gpf1.prog_full_i_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gpf1.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\n_0_gpf1.prog_full_i_i_1 ),
        .PRE(rst_d2),
        .Q(prog_full));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module control_to_core_slave_axi_wr_pf_as__parameterized0_19
   (prog_full,
    wr_clk,
    rst_d2,
    rst_full_gen_i,
    p_1_out,
    I1,
    wr_pntr_plus1_pad,
    S,
    I2,
    I3);
  output prog_full;
  input wr_clk;
  input rst_d2;
  input rst_full_gen_i;
  input p_1_out;
  input [0:0]I1;
  input [8:0]wr_pntr_plus1_pad;
  input [2:0]S;
  input [3:0]I2;
  input [1:0]I3;

  wire [0:0]I1;
  wire [3:0]I2;
  wire [1:0]I3;
  wire [2:0]S;
  wire [8:1]diff_pntr;
  wire \n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_1 ;
  wire \n_0_gpf1.prog_full_i_i_2 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[3]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[7]_i_1 ;
  wire \n_3_gdiff.diff_pntr_pad_reg[9]_i_1 ;
  wire p_1_out;
  wire [9:0]plusOp;
  wire prog_full;
  wire rst_d2;
  wire rst_full_gen_i;
  wire wr_clk;
  wire [8:0]wr_pntr_plus1_pad;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED ;

FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[2]),
        .Q(diff_pntr[1]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[3]),
        .Q(diff_pntr[2]));
CARRY4 \gdiff.diff_pntr_pad_reg[3]_i_1 
       (.CI(1'b0),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[3]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[3]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[3:0]),
        .O(plusOp[3:0]),
        .S({S,1'b0}));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[4]),
        .Q(diff_pntr[3]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[5]),
        .Q(diff_pntr[4]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[6]),
        .Q(diff_pntr[5]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[7]),
        .Q(diff_pntr[6]));
CARRY4 \gdiff.diff_pntr_pad_reg[7]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[3]_i_1 ),
        .CO({\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_1_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_2_gdiff.diff_pntr_pad_reg[7]_i_1 ,\n_3_gdiff.diff_pntr_pad_reg[7]_i_1 }),
        .CYINIT(1'b0),
        .DI(wr_pntr_plus1_pad[7:4]),
        .O(plusOp[7:4]),
        .S(I2));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[8]),
        .Q(diff_pntr[7]));
FDCE #(
    .INIT(1'b0)) 
     \gdiff.diff_pntr_pad_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(I1),
        .D(plusOp[9]),
        .Q(diff_pntr[8]));
CARRY4 \gdiff.diff_pntr_pad_reg[9]_i_1 
       (.CI(\n_0_gdiff.diff_pntr_pad_reg[7]_i_1 ),
        .CO({\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED [3:1],\n_3_gdiff.diff_pntr_pad_reg[9]_i_1 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,wr_pntr_plus1_pad[8]}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED [3:2],plusOp[9:8]}),
        .S({1'b0,1'b0,I3}));
LUT6 #(
    .INIT(64'h00FF00E0000000E0)) 
     \gpf1.prog_full_i_i_1 
       (.I0(\n_0_gpf1.prog_full_i_i_2 ),
        .I1(diff_pntr[7]),
        .I2(diff_pntr[8]),
        .I3(rst_full_gen_i),
        .I4(p_1_out),
        .I5(prog_full),
        .O(\n_0_gpf1.prog_full_i_i_1 ));
LUT6 #(
    .INIT(64'h8000000000000000)) 
     \gpf1.prog_full_i_i_2 
       (.I0(diff_pntr[2]),
        .I1(diff_pntr[1]),
        .I2(diff_pntr[3]),
        .I3(diff_pntr[6]),
        .I4(diff_pntr[4]),
        .I5(diff_pntr[5]),
        .O(\n_0_gpf1.prog_full_i_i_2 ));
FDPE #(
    .INIT(1'b1)) 
     \gpf1.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\n_0_gpf1.prog_full_i_i_1 ),
        .PRE(rst_d2),
        .Q(prog_full));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module control_to_core_slave_axi_wr_status_flags_as
   (full,
    p_1_out,
    E,
    wr_pntr_plus1_pad,
    ram_full_i,
    wr_clk,
    rst_d2,
    wr_en);
  output full;
  output p_1_out;
  output [0:0]E;
  output [0:0]wr_pntr_plus1_pad;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input wr_en;

  wire [0:0]E;
  wire full;
  wire p_1_out;
  wire ram_full_i;
  wire rst_d2;
  wire wr_clk;
  wire wr_en;
  wire [0:0]wr_pntr_plus1_pad;

LUT2 #(
    .INIT(4'h2)) 
     \gdiff.diff_pntr_pad[3]_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(wr_pntr_plus1_pad));
LUT2 #(
    .INIT(4'h2)) 
     \gic0.gc0.count_d1[7]_i_1 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(E));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(p_1_out));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(full));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module control_to_core_slave_axi_wr_status_flags_as_59
   (full,
    p_1_out,
    E,
    wr_pntr_plus1_pad,
    ram_full_i,
    wr_clk,
    rst_d2,
    wr_en);
  output full;
  output p_1_out;
  output [0:0]E;
  output [0:0]wr_pntr_plus1_pad;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input wr_en;

  wire [0:0]E;
  wire full;
  wire p_1_out;
  wire ram_full_i;
  wire rst_d2;
  wire wr_clk;
  wire wr_en;
  wire [0:0]wr_pntr_plus1_pad;

LUT2 #(
    .INIT(4'h2)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(E));
LUT2 #(
    .INIT(4'h2)) 
     \gdiff.diff_pntr_pad[3]_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(wr_pntr_plus1_pad));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(p_1_out));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(full));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module control_to_core_slave_axi_wr_status_flags_as_93
   (full,
    p_1_out,
    E,
    wr_pntr_plus1_pad,
    ram_full_i,
    wr_clk,
    rst_d2,
    wr_en);
  output full;
  output p_1_out;
  output [0:0]E;
  output [0:0]wr_pntr_plus1_pad;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input wr_en;

  wire [0:0]E;
  wire full;
  wire p_1_out;
  wire ram_full_i;
  wire rst_d2;
  wire wr_clk;
  wire wr_en;
  wire [0:0]wr_pntr_plus1_pad;

LUT2 #(
    .INIT(4'h2)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(E));
LUT2 #(
    .INIT(4'h2)) 
     \gdiff.diff_pntr_pad[3]_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(wr_pntr_plus1_pad));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(p_1_out));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(full));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module control_to_core_slave_axi_wr_status_flags_as__parameterized0
   (comp1,
    comp2,
    full,
    p_1_out,
    E,
    wr_pntr_plus1_pad,
    v1_reg,
    I1,
    v1_reg_0,
    I2,
    ram_full_i,
    wr_clk,
    rst_d2,
    wr_en);
  output comp1;
  output comp2;
  output full;
  output p_1_out;
  output [0:0]E;
  output [0:0]wr_pntr_plus1_pad;
  input [3:0]v1_reg;
  input I1;
  input [3:0]v1_reg_0;
  input I2;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input wr_en;

  wire [0:0]E;
  wire I1;
  wire I2;
  wire comp1;
  wire comp2;
  wire full;
  wire p_1_out;
  wire ram_full_i;
  wire rst_d2;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire wr_en;
  wire [0:0]wr_pntr_plus1_pad;

LUT2 #(
    .INIT(4'h2)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM36_NO_ECC.ram_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(E));
control_to_core_slave_axi_compare__parameterized0 c1
       (.I1(I1),
        .comp1(comp1),
        .v1_reg(v1_reg));
control_to_core_slave_axi_compare__parameterized0_1 c2
       (.I2(I2),
        .comp2(comp2),
        .v1_reg_0(v1_reg_0));
LUT2 #(
    .INIT(4'h2)) 
     \gdiff.diff_pntr_pad[3]_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(wr_pntr_plus1_pad));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(p_1_out));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(full));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module control_to_core_slave_axi_wr_status_flags_as__parameterized0_20
   (comp1,
    comp2,
    full,
    p_1_out,
    E,
    wr_pntr_plus1_pad,
    v1_reg,
    I1,
    v1_reg_0,
    I2,
    ram_full_i,
    wr_clk,
    rst_d2,
    wr_en);
  output comp1;
  output comp2;
  output full;
  output p_1_out;
  output [0:0]E;
  output [0:0]wr_pntr_plus1_pad;
  input [3:0]v1_reg;
  input I1;
  input [3:0]v1_reg_0;
  input I2;
  input ram_full_i;
  input wr_clk;
  input rst_d2;
  input wr_en;

  wire [0:0]E;
  wire I1;
  wire I2;
  wire comp1;
  wire comp2;
  wire full;
  wire p_1_out;
  wire ram_full_i;
  wire rst_d2;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire wr_en;
  wire [0:0]wr_pntr_plus1_pad;

LUT2 #(
    .INIT(4'h2)) 
     \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(E));
control_to_core_slave_axi_compare__parameterized0_22 c1
       (.I1(I1),
        .comp1(comp1),
        .v1_reg(v1_reg));
control_to_core_slave_axi_compare__parameterized0_23 c2
       (.I2(I2),
        .comp2(comp2),
        .v1_reg_0(v1_reg_0));
LUT2 #(
    .INIT(4'h2)) 
     \gdiff.diff_pntr_pad[3]_i_2 
       (.I0(wr_en),
        .I1(p_1_out),
        .O(wr_pntr_plus1_pad));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(p_1_out));
(* equivalent_register_removal = "no" *) 
   FDPE #(
    .INIT(1'b1)) 
     ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(rst_d2),
        .Q(full));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
